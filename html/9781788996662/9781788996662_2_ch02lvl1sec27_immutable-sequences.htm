<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Immutable sequences - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec27/immutable-sequences" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec27/immutable-sequences" rel="canonical"/>
<meta content="Let's start with immutable sequences: strings, tuples, and bytes.Textual data in Python is handled with str objects, more commonly known as strings." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Immutable sequences - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Let's start with immutable sequences: strings, tuples, and bytes.Textual data in Python is handled with str objects, more commonly known as strings." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec27/immutable-sequences" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Immutable sequences - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Let's start with immutable sequences: strings, tuples, and bytes.Textual data in Python is handled with str objects, more commonly known as strings." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/script.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/profitwell.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/inferredEvents.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/445429252334850"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/fbevents.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/gtm.js"></script><script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/f(1).txt"></script><script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Immutable sequences - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Let's start with immutable sequences: strings, tuples, and bytes.Textual data in Python is handled with str objects, more commonly known as strings.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch02lvl1sec27"></a>Immutable sequences</h2></div></div><hr/></div><p>Let's <span>start</span><a class="indexterm" id="id325905650"></a> with <span>immutable</span><a class="indexterm" id="id325905641"></a> sequences: strings, tuples, and bytes.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec28"></a>Strings and bytes</h3></div></div></div><p>Textual data in Python is handled with <code class="literal">str</code> objects, more <span>commonly</span><a class="indexterm" id="id325905624"></a> known as <span class="strong"><strong>strings</strong></span>. They are immutable sequences of <span class="strong"><strong>Unicode code points</strong></span>. Unicode code points can <span>represent</span><a class="indexterm" id="id325676710"></a> a character, but can also have other meanings, such as formatting data, for example. Python, unlike other languages, doesn't have a <code class="literal">char</code> type, so a single character is rendered simply by a string of length <code class="literal">1</code>.</p><p>Unicode is an <span>excellent</span><a class="indexterm" id="id325676691"></a> way to handle data, and should be used for the internals of any application. When it comes to storing textual data though, or sending it on the network, you may want to encode it, using an appropriate <span>encoding</span><a class="indexterm" id="id325676684"></a> for the medium you're using. The result of an <span>encoding</span><a class="indexterm" id="id325676674"></a> produces a <code class="literal">bytes</code> object, whose syntax and behavior is similar to that of strings. String literals are written in Python using single, double, or triple quotes (both single or double). If built with triple quotes, a string can span on multiple lines. An example will clarify this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>&gt;&gt;&gt; # 4 ways to make a string</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; str1 = 'This is a string. We built it with single quotes.'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; str2 = "This is also a string, but built with double quotes."</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; str3 = '''This is built using triple quotes,</strong></span>
<span class="strong"><strong>... so it can span multiple lines.'''</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; str4 = """This too</strong></span>
<span class="strong"><strong>... is a multiline one</strong></span>
<span class="strong"><strong>... built with triple double-quotes."""</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; str4  #A</strong></span>
<span class="strong"><strong>'This too\nis a multiline one\nbuilt with triple double-quotes.'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; print(str4)  #B</strong></span>
<span class="strong"><strong>This too</strong></span>
<span class="strong"><strong>is a multiline one</strong></span>
<span class="strong"><strong>built with triple double-quotes.</strong></span></code></pre></div><p>In <code class="literal">#A</code> and <code class="literal">#B</code>, we print <code class="literal">str4</code>, first implicitly, and then explicitly, using the <code class="literal">print</code> function. A nice exercise would be to find out why they are different. Are you up to the challenge? (hint: look up the <code class="literal">str</code> function.)</p><p>Strings, like any sequence, have a length. You can get this by calling the <code class="literal">len</code> function:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>&gt;&gt;&gt; len(str1)</strong></span><span class="strong"><strong>49</strong></span></code></pre></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch02lvl3sec0"></a>Encoding and decoding strings</h4></div></div></div><p>Using the <code class="literal">encode</code>/<code class="literal">decode</code> methods, we can encode Unicode <span>strings</span><a class="indexterm" id="id325915838"></a> and decode bytes objects. <span class="strong"><strong>UTF-8</strong></span> is a variable length character encoding, capable of encoding all possible Unicode code points. It is the dominant <span>encoding</span><a class="indexterm" id="id325916570"></a> for the web. Notice also that by adding a literal <code class="literal">b</code> in front of a <span>string</span><a class="indexterm" id="id325916581"></a> declaration, we're creating a <span class="emphasis"><em>bytes</em></span> object:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>&gt;&gt;&gt; s = "This is üŋíc0de"  # unicode string: code points</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(s)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'str'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>
<span class="strong"><strong>&gt;&gt;&gt; encoded_s = s.encode('utf-8')  # utf-8 encoded version of s</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; encoded_s</strong></span>
<span class="strong"><strong>b'This is \xc3\xbc\xc5\x8b\xc3\xadc0de'  # result: bytes object</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(encoded_s)  # another way to verify it</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'bytes'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>
<span class="strong"><strong>&gt;&gt;&gt; encoded_s.decode('utf-8')  # let's revert to the original</strong></span>
<span class="strong"><strong>'This is üŋíc0de'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; bytes_obj = b"A bytes object"  # a bytes object</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(bytes_obj)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'bytes'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span></code></pre></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch02lvl3sec1"></a>Indexing and slicing strings</h4></div></div></div><p>When manipulating sequences, it's very common to have to access them at one precise position (indexing), or to get a subsequence out of them (slicing). When dealing with immutable sequences, both operations are read-only.</p><p>While <span>indexing</span><a class="indexterm" id="id326026644"></a> comes in one form, a zero-based access to any position within the sequence, <span>slicing</span><a class="indexterm" id="id326026666"></a> comes in different forms. When you get a slice of a sequence, you can specify the <code class="literal">start</code> and <code class="literal">stop</code> positions, and the <code class="literal">step</code>. They are separated with a colon (<code class="literal">:</code>) like this: <code class="literal">my_sequence[start:stop:step]</code>. All the arguments are optional, <code class="literal">start</code> is inclusive, and <code class="literal">stop</code> is exclusive. It's much easier to show an example, rather than explain them further in words:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>&gt;&gt;&gt; s = "The trouble is you think you have time."</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[0]  # indexing at position 0, which is the first char</strong></span>
<span class="strong"><strong>'T'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[5]  # indexing at position 5, which is the sixth char</strong></span>
<span class="strong"><strong>'r'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[:4]  # slicing, we specify only the stop position</strong></span>
<span class="strong"><strong>'The '</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[4:]  # slicing, we specify only the start position</strong></span>
<span class="strong"><strong>'trouble is you think you have time.'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[2:14]  # slicing, both start and stop positions</strong></span>
<span class="strong"><strong>'e trouble is'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[2:14:3]  # slicing, start, stop and step (every 3 chars)</strong></span>
<span class="strong"><strong>'erb '</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; s[:]  # quick way of making a copy</strong></span>
<span class="strong"><strong>'The trouble is you think you have time.'</strong></span></code></pre></div><p>Of all the lines, the last one is probably the most interesting. If you don't specify a parameter, Python will fill in the default for you. In this case, <code class="literal">start</code> will be the start of the string, <code class="literal">stop</code> will be the end of the string, and <code class="literal">step</code> will be the default <code class="literal">1</code>. This is an easy and quick way of obtaining a copy of the string <code class="literal">s</code> (same value, but different object). Can you find a way to get the reversed copy of a string using slicing (don't look it up; find it for yourself)?</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch02lvl3sec2"></a>String formatting</h4></div></div></div><p>One of the features strings have is the ability to be used as a template. There are several different ways of formatting a string, and for the full list of possibilities, I <span>encourage</span><a class="indexterm" id="id326287180"></a> you to look up the documentation. Here are some common examples:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>&gt;&gt;&gt; greet_old = 'Hello %s!'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_old % 'Fabrizio'</strong></span>
<span class="strong"><strong>'Hello Fabrizio!'</strong></span><span class="strong"><strong>
</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_positional = 'Hello {} {}!'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_positional.format('Fabrizio', 'Romano')</strong></span>
<span class="strong"><strong>'Hello Fabrizio Romano!'
</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_positional_idx = 'This is {0}! {1} loves {0}!'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_positional_idx.format('Python', 'Fabrizio')</strong></span>
<span class="strong"><strong>'This is Python! Fabrizio loves Python!'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; greet_positional_idx.format('Coffee', 'Fab')</strong></span>
<span class="strong"><strong>'This is Coffee! Fab loves Coffee!'</strong></span>
<span class="strong"><strong>
&gt;&gt;&gt; keyword = 'Hello, my name is {name} {last_name}'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; keyword.format(name='Fabrizio', last_name='Romano')</strong></span>
<span class="strong"><strong>'Hello, my name is Fabrizio Romano'</strong></span></code></pre></div><p>In the previous example, you can see four different ways of formatting stings. The first one, which relies on the <code class="literal">%</code> operator, is deprecated and shouldn't be used any more. The current, modern way to format a string is by using the <code class="literal">format</code> string method. You can see, from the different examples, that a pair of curly braces acts as a placeholder within the string. When we call <code class="literal">format</code>, we feed it data that replaces the placeholders. We can specify indexes (and much more) within the curly braces, and even names, which implies we'll have to call <code class="literal">format</code> using keyword arguments instead of positional ones.</p><p>Notice how <code class="literal">greet_positional_idx</code> is rendered differently by feeding different data to the call to <code class="literal">format</code>. Apparently, I'm into Python and coffee... big surprise!</p><p>One last feature I want to show you is a relatively new <span>addition</span><a class="indexterm" id="id326293144"></a> to Python (Version 3.6) and it's called <span class="strong"><strong>formatted string literals</strong></span>. This feature is quite cool: strings are prefixed with <code class="literal">f</code>, and contain replacement fields <span>surrounded</span><a class="indexterm" id="id326293197"></a> by curly braces. Replacement fields are expressions evaluated at runtime, and then formatted using the <code class="literal">format</code> protocol:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>&gt;&gt;&gt; name = 'Fab'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; age = 42</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; f"Hello! My name is {name} and I'm {age}"</strong></span>
<span class="strong"><strong>"Hello! My name is Fab and I'm 42"</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; from math import pi</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; f"No arguing with {pi}, it's irrational..."</strong></span>
<span class="strong"><strong>"No arguing with 3.141592653589793, it's irrational..."</strong></span></code></pre></div><p>Check out the official documentation to learn everything about string formatting and how powerful it can be.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec29"></a>Tuples</h3></div></div></div><p>The last <span>immutable</span><a class="indexterm" id="id326346740"></a> sequence type we're going to see is the tuple. A <span class="strong"><strong>tuple</strong></span> is a <span>sequence</span><a class="indexterm" id="id326402356"></a> of arbitrary Python objects. In a tuple, items are separated by commas. They are used everywhere in Python, because they allow for patterns that are hard to reproduce in other languages. Sometimes tuples are used implicitly; for example, to set up multiple variables on one line, or to allow a function to return multiple different objects (usually a function returns one object only, in many other languages), and even in the Python console, you can use tuples implicitly to print multiple elements with one single instruction. We'll see examples for all these cases:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"><span class="strong"><strong>&gt;&gt;&gt; t = ()  # empty tuple</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(t)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'tuple'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>
<span class="strong"><strong>&gt;&gt;&gt; one_element_tuple = (42, )  # you need the comma!</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; three_elements_tuple = (1, 3, 5)  # braces are optional here</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a, b, c = 1, 2, 3  # tuple for multiple assignment</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a, b, c  # implicit tuple to print with one instruction</strong></span>
<span class="strong"><strong>(1, 2, 3)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; 3 in three_elements_tuple  # membership test</strong></span>
<span class="strong"><strong>True</strong></span></code></pre></div><p>Notice that the membership operator <code class="literal">in</code> can also be used with lists, strings, dictionaries, and, in general, with collection and sequence objects.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note22"></a>Note</h3><p>Notice that to create a tuple with one item, we need to put that comma after the item. The reason is that without the comma that item is just itself wrapped in braces, kind of in a redundant mathematical expression. Notice also that on assignment, braces are optional so <code class="literal">my_tuple = 1, 2, 3</code> is the same as <code class="literal">my_tuple = (1, 2, 3)</code>.</p></div><p>One thing that tuple assignment allows us to do, is <span class="emphasis"><em>one-line swaps</em></span>, with no need for a third temporary variable. Let's see first a more traditional way of doing it:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong>&gt;&gt;&gt; a, b = 1, 2</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; c = a  # we need three lines and a temporary var c</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a = b</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; b = c</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a, b  # a and b have been swapped</strong></span>
<span class="strong"><strong>(2, 1)</strong></span></code></pre></div><p>And now let's see how we would do it in Python:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>&gt;&gt;&gt; a, b = 0, 1</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a, b = b, a  # this is the Pythonic way to do it</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a, b</strong></span>
<span class="strong"><strong>(1, 0)</strong></span></code></pre></div><p>Take a look at the line that shows you the Pythonic way of swapping two values. Do you remember what I wrote in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/1" linkend="ch01"><span>Chapter 1</span></a>, <span class="emphasis"><em>A Gentle Introduction to Python</em></span>? A Python program is typically one-fifth to one-third the size of equivalent Java or C++ code, and features like one-line swaps contribute to this. Python is elegant, where elegance in this context also means economy.</p><p>Because they are immutable, <span>tuples</span><a class="indexterm" id="id325675198"></a> can be used as keys for dictionaries (we'll see this shortly). To me, <span>tuples</span><a class="indexterm" id="id325675205"></a> are Python's built-in data that most closely represent a mathematical vector. This doesn't mean that this was the reason for which they were created though. Tuples usually contain an heterogeneous sequence of elements, while on the other hand, lists are most of the times homogeneous. Moreover, tuples are normally accessed via unpacking or indexing, while lists are usually iterated over.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/adsct" type="text/javascript"></script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_2_ch02lvl1sec27_immutable-sequences_files/adsct" type="text/javascript"></script></body></html>