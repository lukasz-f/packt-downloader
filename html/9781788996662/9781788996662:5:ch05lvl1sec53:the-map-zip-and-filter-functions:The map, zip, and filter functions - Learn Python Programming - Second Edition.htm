<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">The map, zip, and filter functions - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec53/the-map-zip-and-filter-functions" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec53/the-map-zip-and-filter-functions" rel="canonical"/>
<meta content="We'll start by reviewing map, filter, and zip, which are the main built-in functions one can employ when handling collections, and then we'll learn how to" name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="The map, zip, and filter functions - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="We'll start by reviewing map, filter, and zip, which are the main built-in functions one can employ when handling collections, and then we'll learn how to" property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec53/the-map-zip-and-filter-functions" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="The map, zip, and filter functions - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="We'll start by reviewing map, filter, and zip, which are the main built-in functions one can employ when handling collections, and then we'll learn how to" name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "The map, zip, and filter functions - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "We'll start by reviewing map, filter, and zip, which are the main built-in functions one can employ when handling collections, and then we'll learn how to",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch05lvl1sec53"></a>The map, zip, and filter functions</h2></div></div><hr/></div><p>We'll start <span>by</span><a class="indexterm" id="id326678209"></a> reviewing <code class="literal">map</code>, <code class="literal">filter</code>, and <code class="literal">zip</code>, which are the main built-in functions one can employ when <span>handling</span><a class="indexterm" id="id326305369"></a> collections, and then we'll learn how to achieve the same results using two very important constructs: <span class="strong"><strong>comprehensions</strong></span> and <span class="strong"><strong>generators</strong></span>. Fasten your seatbelt!</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec64"></a>map</h3></div></div></div><p>According to the official <span>Python</span><a class="indexterm" id="id326305397"></a> documentation:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>map(function, iterable, ...) returns an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted.</em></span></p></blockquote></div><p>We will explain the concept of yielding later on in the chapter. For now, let's translate this into code—we'll use a <code class="literal">lambda</code> function that takes a variable number of positional arguments, and just returns them as a tuple:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong># map.example.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; map(lambda *a: a, range(3))  # 1 iterable</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><span class="strong"><span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><strong><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">object</span> <span class="token attr-name">at</span> <span class="token attr-name">0x10acf8f98</span><span class="token punctuation">&gt;</span></span>  # Not useful! Let's use alias</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, range(3)))  # 1 iterable</strong></span>
<span class="strong"><strong>[(0,), (1,), (2,)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, range(3), 'abc'))  # 2 iterables</strong></span>
<span class="strong"><strong>[(0, 'a'), (1, 'b'), (2, 'c')]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, range(3), 'abc', range(4, 7)))  # 3</strong></span>
<span class="strong"><strong>[(0, 'a', 4), (1, 'b', 5), (2, 'c', 6)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; # map stops at the shortest iterator</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, (), 'abc'))  # empty tuple is shortest</strong></span>
<span class="strong"><strong>[]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, (1, 2), 'abc'))  # (1, 2) shortest</strong></span>
<span class="strong"><strong>[(1, 'a'), (2, 'b')]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, (1, 2, 3, 4), 'abc'))  # 'abc' shortest</strong></span>
<span class="strong"><strong>[(1, 'a'), (2, 'b'), (3, 'c')]</strong></span></code></pre></div><p>In the preceding code, you can see why we have to wrap calls in <code class="literal">list(...)</code> (or its alias, <code class="literal">_</code>, in this case). Without it, I get the string representation of a <code class="literal">map</code> object, which is not really useful in this context, is it?</p><p>You can also notice how the elements of each iterable are applied to the function; at first, the first element of each iterable, then the second one of each iterable, and so on. Notice also that <code class="literal">map</code> stops when the shortest of the iterables we called it with is exhausted. This is actually a very nice behavior; it doesn't force us to level off all the iterables to a common length, and it doesn't break if they aren't all the same length.</p><p><code class="literal">map</code> is very useful when you have to apply the same function to one or more collections of objects. As a more interesting example, let's see the <span class="strong"><strong>decorate-sort-undecorate</strong></span> idiom (also known as <span class="strong"><strong>Schwartzian transform</strong></span>). It's a <span>technique</span><a class="indexterm" id="id326402638"></a> that was extremely popular when Python sorting wasn't providing <span class="emphasis"><em>key-functions</em></span>, and therefore is less used today, but it's a cool trick that still comes in handy once in a while.</p><p>Let's see a variation of it in the next example: we want to sort in descending order by the sum of credits accumulated by students, so to have the best student at position 0. We write a function to produce a decorated object, we sort, and then we undecorate. Each student has credits in three (possibly different) subjects. In this context, to decorate an object means to transform it, either adding extra data to it, or putting it into another object, in a way that allows us to be able to sort the original objects the way we want. This technique has nothing to do with Python decorators, which we will explore later on in the book.</p><p>After the sorting, we revert the <span>decorated</span><a class="indexterm" id="id326468917"></a> objects to get the original ones from them. This is called to undecorate:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># decorate.sort.undecorate.py
students = [
    dict(id=0, credits=dict(math=9, physics=6, history=7)),
    dict(id=1, credits=dict(math=6, physics=7, latin=10)),
    dict(id=2, credits=dict(history=8, physics=9, chemistry=10)),
    dict(id=3, credits=dict(math=5, physics=5, geography=7)),
]

def decorate(student):
    # create a 2-tuple (sum of credits, student) from student dict
    return (<span class="strong"><strong>sum(student['credits'].values())</strong></span>, student)

def undecorate(decorated_student):
    # discard sum of credits, return original student dict
    return decorated_student[1]

students = sorted(<span class="strong"><strong>map(decorate, students)</strong></span>, reverse=True)
students = _(<span class="strong"><strong>map(undecorate, students)</strong></span>)</code></pre></div><p>Let's start by understanding what each student object is. In fact, let's print the first one:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2">{'credits': {'history': 7, 'math': 9, 'physics': 6}, 'id': 0}</code></pre></div><p>You can see that it's a dictionary with two keys: <code class="literal">id</code> and <code class="literal">credits</code>. The value of <code class="literal">credits</code> is also a dictionary in which there are three subject/grade key/value pairs. As I'm sure you recall from our visit in the data structures world, calling <code class="literal">dict.values()</code> returns an object similar to <code class="literal">iterable</code>, with only the values. Therefore, <code class="literal">sum(student['credits'].values())</code> for the first student is equivalent to <code class="literal">sum((9, 6, 7))</code>.</p><p>Let's print the result of calling decorate with the first student:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>&gt;&gt;&gt; decorate(students[0])</strong></span>
<span class="strong"><strong>(22, {'credits': {'history': 7, 'math': 9, 'physics': 6}, 'id': 0})</strong></span></code></pre></div><p>If we decorate all the students like this, we can sort them on their total amount of credits by just sorting the list of tuples. In order to apply the decoration to each item in students, we call <code class="literal">map(decorate, students)</code>. Then we sort the result, and then we undecorate in a similar fashion. If you have gone through the previous chapters correctly, understanding this code shouldn't be too hard.</p><p>Printing students after running the whole code yields:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>$ python decorate.sort.undecorate.py</strong></span>
<span class="strong"><strong>[{'credits': {'chemistry': 10, 'history': 8, 'physics': 9}, 'id': 2},</strong></span>
<span class="strong"><strong> {'credits': {'latin': 10, 'math': 6, 'physics': 7}, 'id': 1},</strong></span>
<span class="strong"><strong> {'credits': {'history': 7, 'math': 9, 'physics': 6}, 'id': 0},</strong></span>
<span class="strong"><strong> {'credits': {'geography': 7, 'math': 5, 'physics': 5}, 'id': 3}]</strong></span></code></pre></div><p>And you can see, by the order of <span>the</span><a class="indexterm" id="id326678229"></a> student objects, that they have indeed been sorted by the sum of their credits.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note47"></a>Note</h3><p>For more on the <span class="emphasis"><em>decorate-sort-undecorate</em></span> idiom, there's a very nice introduction in the sorting how-to section of the official Python documentation (<a class="ulink" href="https://docs.python.org/3.7/howto/sorting.html#the-old-way-using-decorate-sort-undecorate" target="_blank">https://docs.python.org/3.7/howto/sorting.html#the-old-way-using-decorate-sort-undecorate</a>).</p></div><p>One thing to notice about the sorting part: what if two or more students share the same total sum? The sorting algorithm would then proceed to sort the tuples by comparing the <code class="literal">student</code> objects with each other. This doesn't make <span>any</span><a class="indexterm" id="id326678564"></a> sense, and in more complex cases, could lead to unpredictable results, or even errors. If you want to be sure to avoid this issue, one simple solution is to create a three-tuple instead of a two-tuple, having the sum of credits in the first position, the position of the <code class="literal">student</code> object in the <code class="literal">students</code> list in the second one, and the <code class="literal">student</code> object itself in the third one. This way, if the sum of credits is the same, the tuples will be sorted against the position, which will always be different and therefore enough to resolve the sorting between any pair of tuples.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec65"></a>zip</h3></div></div></div><p>We've <span>already</span><a class="indexterm" id="id326678586"></a> covered <code class="literal">zip</code> in the previous chapters, so let's just define it properly and then I want to show you how you could combine it with <code class="literal">map</code>.</p><p>According to the Python documentation:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>zip(*iterables) returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator.</em></span></p></blockquote></div><p>Let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong># zip.grades.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; grades = [18, 23, 30, 27]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; avgs = [22, 21, 29, 24]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(zip(avgs, grades))</strong></span>
<span class="strong"><strong>[(22, 18), (21, 23), (29, 30), (24, 27)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(map(lambda *a: a, avgs, grades))  # equivalent to zip</strong></span>
<span class="strong"><strong>[(22, 18), (21, 23), (29, 30), (24, 27)]</strong></span></code></pre></div><p>In the preceding code, we're zipping together the average and the grade for the last exam, for each student. Notice how easy it is to reproduce <code class="literal">zip</code> using <code class="literal">map</code> (last two instructions of the example). Here as well, to visualize results we have to use our <code class="literal">_</code> alias.</p><p>A simple example on the combined use of <code class="literal">map</code> and <code class="literal">zip</code> could be a way of calculating the element-wise maximum amongst sequences, that is, the maximum of the first element of each sequence, then the maximum of the second one, and so on:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"><span class="strong"><strong># maxims.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a = [5, 9, 2, 4, 7]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; b = [3, 7, 1, 9, 2]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; c = [6, 8, 0, 5, 3]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; maxs = map(lambda n: max(*n), zip(a, b, c))</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(maxs)</strong></span>
<span class="strong"><strong>[6, 9, 2, 9, 7]</strong></span></code></pre></div><p>Notice how easy it is to calculate the max values of three sequences. <code class="literal">zip</code> is not strictly needed of course, we could just use <code class="literal">map</code>. Sometimes it's hard, when showing a simple example, to grasp why using a technique might be good or bad. We forget that we aren't always in control of the source code, we might have to use a third-party library, which we can't change the way we want. Having different ways to work with data is therefore really helpful.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec66"></a>filter</h3></div></div></div><p>According to the <span>Python</span><a class="indexterm" id="id325610412"></a> documentation:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>filter(function, iterable) construct an iterator from those elements of iterable for which function returns True. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.</em></span></p></blockquote></div><p>Let's see a very quick example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong># filter.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; test = [2, 5, 8, 0, 0, 1, 0]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(filter(None, test))</strong></span>
<span class="strong"><strong>[2, 5, 8, 1]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(filter(lambda x: x, test))  # equivalent to previous one</strong></span>
<span class="strong"><strong>[2, 5, 8, 1]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(filter(lambda x: x &gt; 4, test))  # keep only items &gt; 4</strong></span>
<span class="strong"><strong>[5, 8]</strong></span></code></pre></div><p>In the preceding code, notice how the second call to <code class="literal">filter</code> is equivalent to the first one. If we pass a function that takes one argument and returns the argument itself, only those arguments that are <code class="literal">True</code> will make the function return <code class="literal">True</code>, therefore this behavior is exactly the same as passing <code class="literal">None</code>. It's often a very good exercise to mimic some of the built-in Python behaviors. When you succeed, you can say you fully understand how Python behaves in a specific situation.</p><p>Armed with <code class="literal">map</code>, <code class="literal">zip</code>, and <code class="literal">filter</code> (and several other functions from the Python standard library) we can massage sequences very effectively. But those functions are not the only way to do it. So let's see one of the nicest features of Python: comprehensions.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><div></div><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:5:ch05lvl1sec53:the-map-zip-and-filter-functions:The map, zip, and filter functions - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>