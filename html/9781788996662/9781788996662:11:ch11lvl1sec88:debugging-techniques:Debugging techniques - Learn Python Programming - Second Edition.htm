<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Debugging techniques - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/11/ch11lvl1sec88/debugging-techniques" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/11/ch11lvl1sec88/debugging-techniques" rel="canonical"/>
<meta content="In this part, I'll present you with the most common techniques, the ones I use most often; however, please don't consider this list to be exhaustive." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Debugging techniques - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="In this part, I'll present you with the most common techniques, the ones I use most often; however, please don't consider this list to be exhaustive." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/11/ch11lvl1sec88/debugging-techniques" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Debugging techniques - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="In this part, I'll present you with the most common techniques, the ones I use most often; however, please don't consider this list to be exhaustive." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Debugging techniques - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "In this part, I'll present you with the most common techniques, the ones I use most often; however, please don't consider this list to be exhaustive.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch11lvl1sec88"></a>Debugging techniques</h2></div></div><hr/></div><p>In this part, I'll present you <span>with</span><a class="indexterm" id="id326427934"></a> the most common techniques, the ones I use most often; however, please don't consider this list to be exhaustive.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec131"></a>Debugging with print</h3></div></div></div><p>This is probably the <span>easiest</span><a class="indexterm" id="id326427235"></a> technique of all. It's not very effective, it cannot be used everywhere, and it requires access to both the source code and a Terminal that will run it (and therefore show the results of the <code class="literal">print</code> function calls).</p><p>However, in many situations, this is still a <span>quick</span><a class="indexterm" id="id325610421"></a> and useful way to debug. For example, if you are developing a Django website and what happens in a page is not what you would expect, you can fill the view with prints and keep an eye on the console while you reload the page. When you scatter calls to <code class="literal">print</code> in your code, you normally end up in a situation where you duplicate a lot of debugging code, either because you're printing a timestamp (like we did when we were measuring how fast list comprehensions and generators were), or because you have somehow to build a string of some sort that you want to display.</p><p>Another issue is that it's extremely easy to forget calls to <code class="literal">print</code> in your code.</p><p>So, for these reasons, rather than using a bare call to <code class="literal">print</code>, I sometimes prefer to code a custom function. Let's see how.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec132"></a>Debugging with a custom function</h3></div></div></div><p>Having a custom function in a <span>snippet</span><a class="indexterm" id="id325610450"></a> that you can <span>quickly</span><a class="indexterm" id="id325610458"></a> grab and paste into the code, and then use to debug, can be very useful. If you're fast, you can always code one on the fly. The important thing is to code it in a way that it won't leave stuff around when you eventually remove the calls and its definition. Therefore <span class="emphasis"><em>it's important to code it in a way that is completely self-contained</em></span>. Another good reason for this requirement is that it will avoid potential name clashes with the rest of the code.</p><p>Let's see an example of such a function:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># custom.py
def debug(*msg, print_separator=True):
    print(*msg)
    if print_separator:
        print('-' * 40)

debug('Data is ...')
debug('Different', 'Strings', 'Are not a problem')
debug('After while loop', print_separator=False)</code></pre></div><p>In this case, I am using a keyword-only argument to be able to print a separator, which is a line of <code class="literal">40</code> dashes.</p><p>The function is very simple. I just redirect whatever is in <code class="literal">msg</code> to a call to <code class="literal">print</code> and, if <code class="literal">print_separator</code> is <code class="literal">True</code>, I print a line separator. Running the code will show the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>$ python custom.py</strong></span>
<span class="strong"><strong>Data is ...</strong></span>
<span class="strong"><strong>----------------------------------------</strong></span>
<span class="strong"><strong>Different Strings Are not a problem</strong></span>
<span class="strong"><strong>----------------------------------------</strong></span>
<span class="strong"><strong>After while loop</strong></span></code></pre></div><p>As you can see, there is no separator after the last line.</p><p>This is just one easy way to somehow augment a simple call to the <code class="literal">print</code> function. Let's see how we can calculate a time difference between calls, using one of Python's tricky features to our advantage:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># custom_timestamp.py
from time import sleep

def debug(*msg, timestamp=[None]):
    print(*msg)
    from time import time  # local import
    if timestamp[0] is None:
        timestamp[0] = time()  #1
    else:
        now = time()
        print(
            ' Time elapsed: {:.3f}s'.format(now - timestamp[0])
        )
        timestamp[0] = now  #2

debug('Entering nasty piece of code...')
sleep(.3)
debug('First step done.')
sleep(.5)
debug('Second step done.')</code></pre></div><p>This is a bit trickier, but still <span>quite</span><a class="indexterm" id="id325906136"></a> simple. First, notice we import the <code class="literal"><span>time</span></code> function from the <code class="literal">time</code> module from inside the <code class="literal">debug</code> function. This allows us to avoid having to add that import outside of the function, and maybe forget it there.</p><p>Take a look at how I defined <code class="literal">timestamp</code>. It's a list, of course, but what's important here is <span>that</span><a class="indexterm" id="id325906164"></a> it is a <span class="strong"><strong>mutable</strong></span> object. This means that it will be set up when Python parses the function and it will retain its value throughout different calls. Therefore, if we put a timestamp in it after each call, we can keep track of time without having to use an external global variable. I borrowed this trick from my studies on <span class="strong"><strong>closures</strong></span>, a technique <span>that</span><a class="indexterm" id="id325906179"></a> I encourage you to <span>read</span><a class="indexterm" id="id325906185"></a> about because it's very interesting.</p><p>Right, so, after having printed whatever message we had to print and some importing time, we then inspect the content of the only item in <code class="literal">timestamp</code>. If it is <code class="literal">None</code>, we have no previous reference, therefore we set the value to the current time (<code class="literal">#1</code>).</p><p>On the other hand, if we have a previous reference, we can calculate a difference (which we nicely format to three decimal digits) and then we finally put the current time again in <code class="literal">timestamp</code> (<code class="literal">#2</code>). It's a nice trick, isn't it?</p><p>Running this code shows this result:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>$ python custom_timestamp.py</strong></span>
<span class="strong"><strong>Entering nasty piece of code...</strong></span>
<span class="strong"><strong>First step done.</strong></span>
<span class="strong"><strong> Time elapsed: 0.304s</strong></span>
<span class="strong"><strong>Second step done.</strong></span>
<span class="strong"><strong> Time elapsed: 0.505s</strong></span></code></pre></div><p>Whatever your situation, having a self-contained function like this can be very useful.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec133"></a>Inspecting the traceback</h3></div></div></div><p>We briefly talked about the traceback in <span><a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/8" linkend="ch08">Chapter 8</a>, </span><span class="emphasis"><em>Testing, Profiling, and Dealing with Exceptions</em></span>, when we saw several different kinds of exceptions. The traceback gives you information <span>about</span><a class="indexterm" id="id325906263"></a> what went <span>wrong</span><a class="indexterm" id="id325906272"></a> in your application. It's helpful to read it, so let's see a small example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># traceback_simple.py
d = {'some': 'key'}
key = 'some-other'
print(d[key])</code></pre></div><p>We have a dictionary and we try to access a key that isn't in it. You should remember that this will raise a <code class="literal">KeyError</code> exception. Let's run the code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>$ python traceback_simple.py</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "traceback_simple.py", line 3, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    print(d[key])</strong></span>
<span class="strong"><strong>KeyError: 'some-other'</strong></span></code></pre></div><p>You can see that we get all the information we need: the module name, the line that caused the error (both the number and the instruction), and the error itself. With this information, you can go back to the source code and try to understand what's going on.</p><p>Let's now create a more interesting example that builds on top of this, and exercises a feature that is only available in Python 3. Imagine that we're validating a dictionary, working on mandatory fields, therefore we expect them to be there. If not, we need to raise a custom <code class="literal">ValidationError</code> that we will trap further upstream in the process that runs the validator (which is not shown here, so it could be anything, really). It should be something like this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># traceback_validator.py
class ValidatorError(Exception):
    """Raised when accessing a dict results in KeyError. """

d = {'some': 'key'}
mandatory_key = 'some-other'
try:
    print(d[mandatory_key])
except KeyError as err:
    raise ValidatorError(
        f'`{mandatory_key}` not found in d.'
    ) from err</code></pre></div><p>We define a custom exception that is raised when the mandatory key isn't there. Note that its body consists of its documentation string, so we don't need to add any other statements.</p><p>Very simply, we define a dummy dict and try to access it using <code class="literal">mandatory_key</code>. We trap <code class="literal">KeyError</code> and raise <code class="literal">ValidatorError</code> when that happens. And we do it by using the <code class="literal">raise ... from ...</code> syntax, which was <span>introduced</span><a class="indexterm" id="id325906650"></a> in Python 3 by PEP 3134 (<a class="ulink" href="https://www.python.org/dev/peps/pep-3134/" target="_blank">https://www.python.org/dev/peps/pep-3134/</a>), to chain exceptions. The purpose of doing this is that we may also want to raise <code class="literal">ValidatorError</code> in other circumstances, not necessarily as a consequence of a <span>mandatory</span><a class="indexterm" id="id325906666"></a> key <span>being</span><a class="indexterm" id="id325906675"></a> missing. This technique allows us to run the validation in a simple <code class="literal">try</code>/<code class="literal">except</code> that only cares about <code class="literal">ValidatorError</code>.</p><p>Without being able to chain exceptions, we would lose information about <code class="literal">KeyError</code>. The code produces this result:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong>$ python traceback_validator.py</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "traceback_validator.py", line 7, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    print(d[mandatory_key])</strong></span>
<span class="strong"><strong>KeyError: 'some-other'</strong></span>

<span class="strong"><strong>The above exception was the direct cause of the following exception:</strong></span>

<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "traceback_validator.py", line 10, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    '`{}` not found in d.'.format(mandatory_key)) from err</strong></span>
<span class="strong"><strong>__main__.ValidatorError: `some-other` not found in d.</strong></span></code></pre></div><p>This is brilliant, because we can see the traceback of the exception that led us to raise <code class="literal">ValidationError</code>, as well as the traceback for the <code class="literal">ValidationError</code> itself.</p><p>I had a nice discussion with one of my reviewers about the traceback you get from the <code class="literal">pip</code> installer. He was having trouble setting everything up in order to review the code for <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/13" linkend="ch13"><span>Chapter 13</span></a>, <span class="emphasis"><em>Data Science</em></span>. His fresh Ubuntu installation was missing a few libraries that were needed by the <code class="literal">pip</code> packages in order to run correctly.</p><p>The reason he was blocked was that he was trying to fix the errors displayed in the traceback starting from the top one. I suggested that he started from the bottom one instead, and fix that. The reason was that, if the installer had gotten to that last line, I guess that before that, whatever error may have occurred, it was still possible to recover from it. Only after the last line, <code class="literal">pip</code> decided it wasn't possible to continue any further, and therefore I started fixing that one. Once the libraries required to fix that error had been installed, everything else went smoothly.</p><p>Reading a traceback can be tricky, and my friend was lacking the necessary experience to address this problem correctly. Therefore, if you end up in the same situation. Don't be discouraged, and try to shake things up a bit, don't take anything for granted.</p><p>Python has a huge and wonderful <span>community</span><a class="indexterm" id="id325970064"></a> and it's very unlikely that, when you encounter a problem, you're the first one to see it, so open a browser and search. By doing so, your <span>searching</span><a class="indexterm" id="id325970072"></a> skills will also improve because you will have to trim the error down to the minimum but essential set of details that will make your search effective.</p><p>If you want to play and understand the traceback a bit better, in the standard library there is a module you can use called, surprise surprise, <code class="literal">traceback</code>. It provides a standard interface to extract, format, and print stack traces of Python programs, mimicking the behavior of the Python interpreter when it prints a stack trace.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec134"></a>Using the Python debugger</h3></div></div></div><p>Another very effective way of <span>debugging</span><a class="indexterm" id="id325970092"></a> Python is to <span>use</span><a class="indexterm" id="id325970101"></a> the Python debugger: <code class="literal">pdb</code>. Instead of using it directly though, you should definitely check out the <code class="literal">pdbpp</code> library. <code class="literal">pdbpp</code> augments the standard <code class="literal">pdb</code> interface by providing some convenient tools, my favorite of which is the <span class="strong"><strong>sticky mode</strong></span>, which <span>allows</span><a class="indexterm" id="id325983132"></a> you to see a whole function while you step through its instructions.</p><p>There are several different ways to use this debugger (whichever version, it's not important), but the most common one consists of simply setting a breakpoint and running the code. When Python reaches the breakpoint, execution is suspended and you get console access to that point so that you can inspect all the names, and so on. You can also alter data on the fly to change the flow of the program.</p><p>As a toy example, let's pretend we have a parser that is raising <code class="literal">KeyError</code> because a key is missing in a dictionary. The dictionary is from a JSON payload that we cannot control, and we just want, for the time being, to cheat and pass that control, since we're interested in what comes afterward. Let's see how we could intercept this moment, inspect the data, fix it, and get to the bottom of it, with <code class="literal">pdbpp</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"># pdebugger.py
# d comes from a JSON payload we don't control
d = {'first': 'v1', 'second': 'v2', 'fourth': 'v4'}
# keys also comes from a JSON payload we don't control
keys = ('first', 'second', 'third', 'fourth')

def do_something_with_value(value):
    print(value)

for key in keys:
    do_something_with_value(d[key])

print('Validation done.')</code></pre></div><p>As you can see, this code will break when <code class="literal">key</code> gets the <code class="literal">'third'</code> value, which is missing in the dictionary. Remember, we're pretending that both <code class="literal">d</code> and <code class="literal">keys</code> come dynamically from a JSON payload we don't control, so we need to inspect them in order to fix <code class="literal">d</code> and pass the <code class="literal">for</code> loop. If we run the code as it is, we get the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"><span class="strong"><strong>$ python pdebugger.py</strong></span>
<span class="strong"><strong>v1</strong></span>
<span class="strong"><strong>v2</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "pdebugger.py", line 10, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    do_something_with_value(d[key])</strong></span>
<span class="strong"><strong>KeyError: 'third'</strong></span></code></pre></div><p>So we see that that <code class="literal">key</code> is <span>missing</span><a class="indexterm" id="id325983213"></a> from the dictionary, but <span>since</span><a class="indexterm" id="id325983222"></a> every time we run this code we may get a different dictionary or <code class="literal">keys</code> tuple, this information doesn't really help us. Let's inject a call to <code class="literal">pdb</code> just before the <code class="literal">for</code> loop. You have two options:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10">import pdb
pdb.set_trace()</code></pre></div><p>This is the most common way of doing it. You import <code class="literal">pdb</code> and call its <code class="literal">set_trace</code> method. Many developers have macros in their editor to add this line with a keyboard shortcut. As of Python 3.7 though, we can simplify things even further, to this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11">breakpoint()</code></pre></div><p>The new <code class="literal">breakpoint</code> built-in function calls <code class="literal">sys.breakpointhook()</code> under the hood, which is programmed by default to call <code class="literal">pdb.set_trace()</code>. However, you can reprogram <code class="literal">sys.breakpointhook()</code> to call whatever you want, and therefore <code class="literal">breakpoint</code> will point to that too, which is very convenient.</p><p>The code for this example is in the <code class="literal">pdebugger_pdb.py</code> module. If we now run this code, things get interesting (note that your output may vary a little and that all the comments in this output were added by me):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"><span class="strong"><strong>$ python pdebugger_pdb.py</strong></span>
<span class="strong"><strong>(Pdb++) l</strong></span>
<span class="strong"><strong> 16</strong></span>
<span class="strong"><strong> 17 -&gt; for key in keys:  # breakpoint comes in</strong></span>
<span class="strong"><strong> 18 do_something_with_value(d[key])</strong></span>
<span class="strong"><strong> 19</strong></span>

<span class="strong"><strong>(Pdb++) keys  # inspecting the keys tuple</strong></span>
<span class="strong"><strong>('first', 'second', 'third', 'fourth')</strong></span>
<span class="strong"><strong>(Pdb++) d.keys()  # inspecting keys of `d`</strong></span>
<span class="strong"><strong>dict_keys(['first', 'second', 'fourth'])</strong></span>
<span class="strong"><strong>(Pdb++) d['third'] = 'placeholder'  # add tmp placeholder</strong></span>
<span class="strong"><strong>(Pdb++) c  # continue</strong></span>
<span class="strong"><strong>v1</strong></span>
<span class="strong"><strong>v2</strong></span>
<span class="strong"><strong>placeholder</strong></span>
<span class="strong"><strong>v4</strong></span>
<span class="strong"><strong>Validation done.</strong></span></code></pre></div><p>First, note that when you reach a breakpoint, you're served a console that tells you where you are (the Python module) and which line is the next one to be executed. You can, at this point, perform a bunch of exploratory actions, such as inspecting the code before and after the next line, printing a stack trace, and interacting with the objects. Please consult the <span>official</span><a class="indexterm" id="id326008686"></a> Python documentation (<a class="ulink" href="https://docs.python.org/3.7/library/pdb.html" target="_blank">https://docs.python.org/3.7/library/pdb.html</a>) on <code class="literal">pdb</code> to learn more about this. In our case, we first inspect the <code class="literal">keys</code> tuple. After that, we inspect the keys of <code class="literal">d</code>. We see that <code class="literal">'third'</code> is missing, so we put it in ourselves (could this be dangerous—think about it). Finally, now that all the keys are in, we type <code class="literal">c</code>, which means (<span class="emphasis"><em>c</em></span>)ontinue.</p><p><code class="literal">pdb</code> also gives you the ability to proceed with your code one line at a time using (<span class="emphasis"><em><span class="strong"><strong>n</strong></span></em></span>)ext, to (<span class="emphasis"><em><span class="strong"><strong>s</strong></span></em></span>)tep into a function for deeper analysis, or to handle breaks with (<span class="emphasis"><em><span class="strong"><strong>b</strong></span></em></span>)reak. For a <span>complete</span><a class="indexterm" id="id326008740"></a> list of commands, please <span>refer</span><a class="indexterm" id="id326008748"></a> to the documentation or type (<span class="emphasis"><em><span class="strong"><strong>h</strong></span></em></span>)elp in the console.</p><p>You can see, from the output of the preceding run, that we could finally get to the end of the validation.</p><p><code class="literal">pdb</code> (or <code class="literal">pdbpp</code>) is an invaluable tool that I use every day. So, go and have fun, set a breakpoint somewhere, and try to inspect it, follow the official documentation and try the commands in your code to see their effect and learn them well.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note76"></a>Note</h3><p>Notice that in this example I have assumed you installed <code class="literal">pdbpp</code>. If that is not the case, then you might find that some commands don't work the same in <code class="literal">pdb</code>. One example is the letter <code class="literal">d</code>, which would be interpreted from <code class="literal">pdb</code> as the <span class="emphasis"><em>down</em></span> command. In order to get around that, you would have to add a <code class="literal">!</code> in front of <code class="literal">d</code>, to tell <code class="literal">pdb</code> that it is meant to be interpreted literally, and not as a command.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec135"></a>Inspecting log files</h3></div></div></div><p>Another way of <span>debugging</span><a class="indexterm" id="id326049258"></a> a misbehaving application is to inspect its log files. <span class="strong"><strong>Log files</strong></span> are <span>special</span><a class="indexterm" id="id326049271"></a> files in which an application writes down all sorts of things, normally related to what's going on inside of it. If an important procedure is started, I would typically expect a corresponding line in the logs. It is the <span>same</span><a class="indexterm" id="id326049280"></a> when it finishes, and possibly for what happens inside of it.</p><p>Errors need to be logged so that when a problem happens, we can inspect what went wrong by taking a look at the information in the log files.</p><p>There are many different ways to set up a logger in Python. Logging is very malleable and you can configure it. In a nutshell, there are normally four players in the game: loggers, handlers, filters, and formatters:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><span class="strong"><strong>Loggers</strong></span>: Expose the <span>interface</span><a class="indexterm" id="id326049301"></a> that the application code uses directly</li><li style="list-style-type: disc"><span class="strong"><strong>Handlers</strong></span>: Send <span>the</span><a class="indexterm" id="id326049313"></a> log records (created by loggers) to the appropriate destination</li><li style="list-style-type: disc"><span class="strong"><strong>Filters</strong></span>: Provide a finer-grained facility <span>for</span><a class="indexterm" id="id326049735"></a> determining which log records to output</li><li style="list-style-type: disc"><span class="strong"><strong>Formatters</strong></span>: Specify the <span>layout</span><a class="indexterm" id="id326049747"></a> of the log records in the final output</li></ul></div><p>Logging is performed by calling methods on instances of the <code class="literal">Logger</code> class. Each line you log has a level. The levels normally used are: <code class="literal">DEBUG</code>, <code class="literal">INFO</code>, <code class="literal">WARNING</code>, <code class="literal">ERROR</code>, and <code class="literal">CRITICAL</code>. You can import them from the <code class="literal">logging</code> module. They are in order of severity and it's very important to use them properly because they will help you filter the contents of a log file based on what you're searching for. Log files usually become extremely big so it's very important to have the information in them written properly so that you can find it quickly when it matters.</p><p>You can log to a file but you can also log to a network location, to a queue, to a console, and so on. In general, if you have an architecture that is deployed on one machine, logging to a file is acceptable, but when your architecture spans over multiple machines (such as in the case of service-oriented or microservice architectures), it's very useful to implement a centralized solution for logging so that all log messages coming from each service can be stored and investigated in a single place. It helps a lot, otherwise trying to correlate giant files from several <span>different</span><a class="indexterm" id="id326049780"></a> sources to figure out what went wrong can become truly challenging.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note77"></a>Note</h3><p>A <span class="strong"><strong>service-oriented architecture</strong></span> (<span class="strong"><strong>SOA</strong></span>) is an architectural pattern in software design in which application components provide services to other components via a communications protocol, typically over a network. The beauty of this system is that, when coded properly, each service can be written in the most appropriate language to serve its purpose. The only thing that matters is the communication with the other services, which needs to happen via a common format so that data exchange can be done.<span class="strong"><strong>Microservice architectures</strong></span> are an evolution of SOAs, but follow a different set of architectural patterns. </p></div><p>Here, I will <span>present</span><a class="indexterm" id="id326056941"></a> you with a very simple <span>logging</span><a class="indexterm" id="id326056950"></a> example. We will <span>log</span><a class="indexterm" id="id326056956"></a> a few messages to a file:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"># log.py
import logging

logging.basicConfig(
    filename='ch11.log',
    level=logging.DEBUG,  # minimum level capture in the file
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%m/%d/%Y %I:%M:%S %p')

mylist = [1, 2, 3]
logging.info('Starting to process `mylist`...')

for position in range(4):
    try:
        logging.debug(
            'Value at position %s is %s', position, mylist[position]
        )
    except IndexError:
        logging.exception('Faulty position: %s', position)

logging.info('Done parsing `mylist`.')</code></pre></div><p>Let's go through it line by line. First, we import the <code class="literal">logging</code> module, then we set up a basic configuration. In general, a production-logging configuration is much more complicated than this, but I wanted to keep things as easy as possible. We specify a filename, the minimum logging level we want to capture in the file, and the message format. We'll log the date and time information, the level, and the message.</p><p>I will start by logging an <code class="literal">info</code> message that tells me we're about to process our list. Then, I will log (this time using the <code class="literal">DEBUG</code> level, by using the <code class="literal">debug</code> function) which is the value at some position. I'm using <code class="literal">debug</code> here because I want to be able to filter out these logs in the future (by setting the minimum level to <code class="literal">logging.INFO</code> or more), because I might have to handle very big lists and I don't want to log all the values.</p><p>If we get <code class="literal">IndexError</code> (and we do, since I'm looping over <code class="literal">range(4)</code>), we call <code class="literal">logging.exception()</code>, which is the same as <code class="literal">logging.error()</code>, but it also prints the traceback.</p><p>At the end of the code, I log another <code class="literal">info</code> message saying we're done. The result is this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"># ch11.log
[05/06/2018 11:13:48 AM] INFO:Starting to process `mylist`...
[05/06/2018 11:13:48 AM] DEBUG:Value at position 0 is 1
[05/06/2018 11:13:48 AM] DEBUG:Value at position 1 is 2
[05/06/2018 11:13:48 AM] DEBUG:Value at position 2 is 3
[05/06/2018 11:13:48 AM] ERROR:Faulty position: 3
Traceback (most recent call last):
  File "log.py", line 15, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>
    position, mylist[position]))
IndexError: list index out of range
[05/06/2018 11:13:48 AM] INFO:Done parsing `mylist`.</code></pre></div><p>This is exactly what we <span>need</span><a class="indexterm" id="id326057020"></a> to be able to debug an <span>application</span><a class="indexterm" id="id326057029"></a> that is running on a box, and not on our console. We can see what went on, the traceback of any exception raised, and so on.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note78"></a>Note</h3><p>The example presented here only scratches the surface of logging. For a more in-depth explanation, you can find information in the <span class="emphasis"><em>Python HOWTOs</em></span> section of the official Python documentation: <span class="emphasis"><em>Logging HOWTO</em></span>, and <span class="emphasis"><em>Logging Cookbook</em></span>.</p></div><p>Logging is an art. You need to find a good balance between logging everything and logging nothing. Ideally, you should log anything that you need to make sure your application is working correctly, and possibly all errors or exceptions.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec136"></a>Other techniques</h3></div></div></div><p>In this final section, I'd like to <span>demonstrate</span><a class="indexterm" id="id326058326"></a> briefly a couple of techniques that you may find useful.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch11lvl3sec48"></a>Profiling</h4></div></div></div><p>We talked about <span>profiling</span><a class="indexterm" id="id326058341"></a> in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/8" linkend="ch08"><span>Chapter 8</span></a>, <span class="emphasis"><em>Testing, Profiling, and Dealing with Exceptions</em></span>, and I'm only mentioning it here because profiling can sometimes explain weird <span>errors</span><a class="indexterm" id="id326058358"></a> that are due to a component being too slow. Especially when networking is involved, having an idea of the timings and latencies your application has to go through is very important in order to understand what may be going on when problems arise, therefore I suggest you get acquainted with profiling techniques and also for a troubleshooting perspective.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch11lvl3sec49"></a>Assertions</h4></div></div></div><p>Assertions are a nice way to <span>make</span><a class="indexterm" id="id326058371"></a> your code <span>ensure</span><a class="indexterm" id="id326058379"></a> your assumptions are verified. If they are, all proceeds regularly but, if they are not, you get a nice exception that you can work with. Sometimes, instead of inspecting, it's quicker to drop a couple of assertions in the code just to exclude possibilities. Let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15"># assertions.py
mylist = [1, 2, 3]  # this ideally comes from some place
assert 4 == len(mylist)  # this will break
for position in range(4):
    print(mylist[position])</code></pre></div><p>This code simulates a situation in which <code class="literal">mylist</code> isn't defined by us like that, of course, but we're assuming it has four elements. So we put an assertion there, and the result is this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16"><span class="strong"><strong>$ python assertions.py</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "assertions.py", line 3, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    assert 4 == len(mylist)  # this will break</strong></span>
<span class="strong"><strong>AssertionError</strong></span></code></pre></div><p>This tells us exactly where the problem is.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch11lvl2sec137"></a>Where to find information</h3></div></div></div><p>In the Python official documentation, there is a section dedicated to <span>debugging</span><a class="indexterm" id="id326074232"></a> and profiling, where you can read up about the <code class="literal">bdb</code> debugger framework, and about modules such as <code class="literal">faulthandler</code>, <code class="literal">timeit</code>, <code class="literal">trace</code>, <code class="literal">tracemallock</code>, and of course <code class="literal">pdb</code>. Just head to the standard library section in the documentation and you'll find all this information very easily.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:11:ch11lvl1sec88:debugging-techniques:Debugging techniques - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>