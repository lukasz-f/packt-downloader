<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Don't overdo comprehensions and generators - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec57/don-t-overdo-comprehensions-and-generators" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec57/don-t-overdo-comprehensions-and-generators" rel="canonical"/>
<meta content="We've seen how powerful list comprehensions and generator expressions can be." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Don't overdo comprehensions and generators - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="We've seen how powerful list comprehensions and generator expressions can be." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec57/don-t-overdo-comprehensions-and-generators" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Don't overdo comprehensions and generators - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="We've seen how powerful list comprehensions and generator expressions can be." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Don't overdo comprehensions and generators - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "We've seen how powerful list comprehensions and generator expressions can be.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch05lvl1sec57"></a>Don't overdo comprehensions and generators</h2></div></div><hr/></div><p>We've seen how powerful <code class="literal">list</code> comprehensions and generator expressions can be. And they are, don't get me wrong, but the <span>feeling</span><a class="indexterm" id="id326402606"></a> that I have <span>when</span><a class="indexterm" id="id326402598"></a> I deal with them is that their complexity grows exponentially. The more you try to do within a single comprehension or a generator expression, the harder it becomes to read, understand, and therefore maintain or change.</p><p>If you check the Zen of Python again, there are a few lines that I think are worth keeping in mind when dealing with optimized code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>&gt;&gt;&gt; import this</strong></span>
<span class="strong"><strong>...</strong></span>
<span class="strong"><strong>Explicit is better than implicit.</strong></span>
<span class="strong"><strong>Simple is better than complex.</strong></span>
<span class="strong"><strong>...</strong></span>
<span class="strong"><strong>Readability counts.</strong></span>
<span class="strong"><strong>...</strong></span>
<span class="strong"><strong>If the implementation is hard to explain, it's a bad idea.</strong></span>
<span class="strong"><strong>...</strong></span></code></pre></div><p>Comprehensions and generator expressions are more implicit than explicit, can be quite difficult to read and understand, and they can be hard to explain. Sometimes you have to break them apart using the inside-out technique, to understand what's going on.</p><p>To give you an example, let's talk a bit more about Pythagorean triples. Just to remind you, a Pythagorean triple is a tuple of positive integers (<span class="emphasis"><em>a</em></span>, <span class="emphasis"><em>b</em></span>, <span class="emphasis"><em>c</em></span>) such that <span class="emphasis"><em>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></em></span>.</p><p>We saw how to calculate them in the <span class="emphasis"><em>Filtering a comprehension</em></span> section, but we did it in a very inefficient way because we were scanning all pairs of numbers below a certain threshold, calculating the hypotenuse, and filtering out those that were not producing a triple.</p><p>A better way to get a list of Pythagorean triples is to generate them directly. There are many different formulas you can use to do this, we'll use the <span class="strong"><strong>Euclidean formula</strong></span>.</p><p>This formula says that any triple (<span class="emphasis"><em>a</em></span>, <span class="emphasis"><em>b</em></span>, <span class="emphasis"><em>c</em></span>), where <span class="emphasis"><em>a = m<sup>2</sup> - n<sup>2</sup></em></span>, <span class="emphasis"><em>b = 2mn</em></span>, <span class="emphasis"><em>c = m<sup>2</sup> + n<sup>2</sup></em></span>, with <span class="emphasis"><em>m</em></span> and <span class="emphasis"><em>n</em></span> positive integers such that <span class="emphasis"><em>m &gt; n</em></span>, is a Pythagorean triple. For example, when <span class="emphasis"><em>m = 2</em></span> and <span class="emphasis"><em>n = 1</em></span>, we find the smallest triple: (<span class="emphasis"><em>3</em></span>, <span class="emphasis"><em>4</em></span>, <span class="emphasis"><em>5</em></span>).</p><p>There is one catch though: consider the triple (<span class="emphasis"><em>6</em></span>, <span class="emphasis"><em>8</em></span>, <span class="emphasis"><em>10</em></span>) that is just like (<span class="emphasis"><em>3</em></span>, <span class="emphasis"><em>4</em></span>, <span class="emphasis"><em>5</em></span>) with all the numbers multiplied by <span class="emphasis"><em>2</em></span>. This triple is definitely Pythagorean, since <span class="emphasis"><em>6<sup>2</sup> + 8<sup>2</sup> = 10<sup>2</sup></em></span> , but we can derive it from (<span class="emphasis"><em>3</em></span>, <span class="emphasis"><em>4</em></span>, <span class="emphasis"><em>5</em></span>) simply by multiplying each of its elements by <span class="emphasis"><em>2</em></span>. Same goes for (<span class="emphasis"><em>9</em></span>, <span class="emphasis"><em>12</em></span>, <span class="emphasis"><em>15</em></span>), (<span class="emphasis"><em>12</em></span>, <span class="emphasis"><em>16</em></span>, <span class="emphasis"><em>20</em></span>), and in general for all the triples that we can write as (<span class="emphasis"><em>3k</em></span>, <span class="emphasis"><em>4k</em></span>, <span class="emphasis"><em>5k</em></span>), with k being a positive integer greater than <span class="emphasis"><em>1</em></span>.</p><p>A triple that cannot be obtained by multiplying the elements of another one by some factor, <span class="emphasis"><em>k</em></span>, is called <span class="strong"><strong>primitive</strong></span>. Another <span>way</span><a class="indexterm" id="id326661992"></a> of stating this is: if the <span>three</span><a class="indexterm" id="id326662004"></a> elements of a triple are <span class="strong"><strong>coprime</strong></span>, then the triple is primitive. Two numbers are coprime when they don't share any prime factor amongst their divisors, that is, their <span class="strong"><strong>greatest common divisor</strong></span> (<span class="strong"><strong>GCD</strong></span>) is <span class="emphasis"><em>1</em></span>. For example, 3 and 5 are coprime, while 3 and 6 are not, because they are both divisible by 3.</p><p>So, the Euclidean formula tells us that if <span class="emphasis"><em>m</em></span> and <span class="emphasis"><em>n</em></span> are coprime, and <span class="emphasis"><em>m - n</em></span> is odd, the triple they generate is <span class="emphasis"><em>primitive</em></span>. In the following example, we will write a generator expression to calculate all the primitive Pythagorean triples whose hypotenuse (<span class="emphasis"><em>c</em></span>) is less than or equal to some integer, <span class="emphasis"><em>N</em></span>. This means we want all triples for which <span class="emphasis"><em>m<sup>2</sup> + n<sup>2</sup> ≤ N</em></span>. When <span class="emphasis"><em>n</em></span> is <span class="emphasis"><em>1</em></span>, the formula looks like this: <span class="emphasis"><em>m<sup>2</sup> ≤ N - 1</em></span>, which means we can approximate the calculation with an upper bound of <span class="emphasis"><em>m ≤ N<sup>1/2</sup></em></span>.</p><p>So, to recap: <span class="emphasis"><em>m</em></span> must be greater than <span class="emphasis"><em>n</em></span>, they must also be coprime, and their difference <span class="emphasis"><em>m - n</em></span> must be odd. Moreover, in order to avoid useless calculations, we'll put the upper bound for <span class="emphasis"><em>m</em></span> at <span class="emphasis"><em>floor(sqrt(N)) + 1</em></span>.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note53"></a>Note</h3><p>The <code class="literal">floor</code> function for a real number, <span class="emphasis"><em>x</em></span>, gives the maximum integer, <span class="emphasis"><em>n</em></span>, such that <span class="emphasis"><em>n &lt; x</em></span>, for example, <span class="emphasis"><em>floor(3.8) = 3</em></span>, <span class="emphasis"><em>floor(13.1) = 13</em></span>. Taking <span class="emphasis"><em>floor(sqrt(N)) + 1</em></span> means taking the integer part of the square root of <span class="emphasis"><em>N</em></span> and adding a minimal margin just to make sure we don't miss any numbers.</p></div><p>Let's put all of this into code, step by step. Let's start by writing a simple <code class="literal">gcd</code> function that uses <span class="strong"><strong>Euclid's algorithm</strong></span>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># functions.py
def gcd(a, b):
    """Calculate the Greatest Common Divisor of (a, b). """
    while b != 0:
        a, b = b, a % b
    return a</code></pre></div><p>The explanation of Euclid's algorithm is available on the web, so I won't spend any time here talking about it; we need to focus on the generator expression. The next step is to use the knowledge we gathered before to generate a list of primitive Pythagorean triples:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># pythagorean.triple.generation.py
from functions import gcd
N = 50

triples = sorted(                                    # 1
    ((a, b, c) for a, b, c in (                      # 2
        ((m**2 - n**2), (2 * m * n), (m**2 + n**2))  # 3
        for m in range(1, int(N**.5) + 1)            # 4
        for n in range(1, m)                         # 5
        if (m - n) % 2 and gcd(m, n) == 1            # 6
    ) if c &lt;= N), key=lambda *triple: sum(*triple)   # 7
)</code></pre></div><p>There you go. It's not easy to read, so let's go through it line by line. At <code class="literal">#3</code>, we start a generator expression that is creating triples. You can see from <code class="literal">#4</code> and <code class="literal">#5</code> that we're looping on <code class="literal">m</code> in <span class="emphasis"><em>[1, M]</em></span> with <span class="emphasis"><em>M</em></span> being the integer part of <span class="emphasis"><em>sqrt(N)</em></span>, plus <span class="emphasis"><em>1</em></span>. On the other hand, <code class="literal">n</code> loops within <span class="emphasis"><em>[1, m)</em></span>, to respect the <span class="emphasis"><em>m &gt; n</em></span> rule. It's worth noting how I calculated <span class="emphasis"><em>sqrt(N)</em></span>, that is, <code class="literal">N**.5</code>, which is just another way to do it that I wanted to show you.</p><p>At <code class="literal">#6</code>, you can see the filtering conditions to make the triples primitive: <code class="literal">(m - n) % 2</code> evaluates to <code class="literal">True</code> when <code class="literal">(m - n)</code> is odd, and <code class="literal">gcd(m, n) == 1</code> means <code class="literal">m</code> and <code class="literal">n</code> are coprime. With these in place, we know the triples will be primitive. This takes care of the innermost generator expression. The outermost one starts at <code class="literal">#2</code>, and finishes at <code class="literal">#7</code>. We take the triples (<span class="emphasis"><em>a</em></span>, <span class="emphasis"><em>b</em></span>, <span class="emphasis"><em>c</em></span>) in (...innermost generator...) such that <code class="literal">c &lt;= N</code>. </p><p>Finally, at <code class="literal">#1</code> we apply sorting, to present the list in order. At <code class="literal">#7</code>, after the outermost generator expression is closed, you can see that we specify the sorting key to be the sum <span class="emphasis"><em>a + b + c</em></span>. This is just my personal preference, there is no mathematical reason behind it.</p><p>So, what do you think? Was it straightforward to read? I don't think so. And believe me, this is still a simple example; I have seen much worse in my career. This kind of code is difficult to understand, debug, and modify. It shouldn't find a place in a professional environment.</p><p>So, let's see if we can rewrite this code into something more readable:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"># pythagorean.triple.generation.for.py
from functions import gcd

def gen_triples(N):
    for m in range(1, int(N**.5) + 1):                  # 1
        for n in range(1, m):                           # 2
            if (m - n) % 2 and gcd(m, n) == 1:          # 3
                c = m**2 + n**2                         # 4
                if c &lt;= N:                              # 5
                    a = m**2 - n**2                     # 6
                    b = 2 * m * n                       # 7
                    yield (a, b, c)                     # 8

triples = sorted(
    gen_triples(50), key=lambda *triple: sum(*triple))  # 9</code></pre></div><p>This is so <span>much</span><a class="indexterm" id="id325610405"></a> better. Let's go <span>through</span><a class="indexterm" id="id325610413"></a> it, line by line. You'll see how much easier it is to understand.</p><p>We start looping at <code class="literal">#1</code> and <code class="literal">#2</code>, in exactly the same way we were looping in the previous example. On line <code class="literal">#3</code>, we have the filtering for primitive triples. On line <code class="literal">#4</code>, we deviate a bit from what we were doing before: we calculate <code class="literal">c</code>, and on line <code class="literal">#5</code>, we filter on <code class="literal">c</code> being less than or equal to <code class="literal">N</code>. Only when <code class="literal">c</code> satisfies that condition, we do calculate <code class="literal">a</code> and <code class="literal">b</code>, and yield the resulting tuple. It's always good to delay all calculations for as much as possible so that we don't waste time and CPU. On the last line, we apply sorting with the same key we were using in the generator expression example.</p><p>I hope you agree, this example is easier to understand. And I promise you, if you have to modify the code one day, you'll find that modifying this one is easy, while to modify the other version will take much longer (and it will be more error-prone).</p><p>If you print the results of both examples (they are the same), you will get this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>[(3, 4, 5), (5, 12, 13), (15, 8, 17), (7, 24, 25), (21, 20, 29), (35, 12, 37), (9, 40, 41)]</strong></span></code></pre></div><p>The moral of the story is, try and use comprehensions and generator expressions as much as you can, but if the code starts to be complicated to modify or to read, you may want to refactor it into something more readable. Your colleagues will thank you.</p></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:5:ch05lvl1sec57:don-t-overdo-comprehensions-and-generators:Don't overdo comprehensions and generators - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>