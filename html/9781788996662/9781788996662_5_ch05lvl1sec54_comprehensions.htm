<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Comprehensions - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec54/comprehensions" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec54/comprehensions" rel="canonical"/>
<meta content="Comprehensions are a concise notation, both perform some operation for a collection of elements, and/or select a subset of them that meet some condition." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Comprehensions - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Comprehensions are a concise notation, both perform some operation for a collection of elements, and/or select a subset of them that meet some condition." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec54/comprehensions" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Comprehensions - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Comprehensions are a concise notation, both perform some operation for a collection of elements, and/or select a subset of them that meet some condition." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_5_ch05lvl1sec54_comprehensions_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_5_ch05lvl1sec54_comprehensions_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/script.js"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/profitwell.js"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/inferredEvents.js"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/445429252334850"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/fbevents.js"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/gtm.js"></script><script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/f(1).txt"></script><script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Comprehensions - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Comprehensions are a concise notation, both perform some operation for a collection of elements, and/or select a subset of them that meet some condition.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_5_ch05lvl1sec54_comprehensions_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch05lvl1sec54"></a>Comprehensions</h2></div></div><hr/></div><p>Comprehensions are a concise notation, both <span>perform</span><a class="indexterm" id="id326305353"></a> some operation for a collection of elements, and/or select a subset of them that meet some condition. They are borrowed from the functional programming language Haskell (<a class="ulink" href="https://www.haskell.org/" target="_blank">https://www.haskell.org/</a>), and <span>contribute</span><a class="indexterm" id="id326026665"></a> to giving Python a functional flavor, together with iterators and generators.</p><p>Python offers you different types of comprehensions: <code class="literal">list</code>, <code class="literal">dict</code>, and <code class="literal">set</code>. We'll concentrate on the first one for now, and then it will be easy to explain the other two.</p><p>Let's start with a very simple example. I want to calculate a list with the squares of the first 10 natural numbers. How would you do it? There are a couple of equivalent ways:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong># squares.map.py</strong></span>
<span class="strong"><strong># If you code like this you are not a Python dev! ;)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; squares = []</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; for n in range(10):</strong></span>
<span class="strong"><strong>...     squares.append(n ** 2)</strong></span>
<span class="strong"><strong>...</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; squares</strong></span>
<span class="strong"><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></span>

<span class="strong"><strong># This is better, one line, nice and readable</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; squares = map(lambda n: n**2, range(10))</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(squares)</strong></span>
<span class="strong"><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></span></code></pre></div><p>The preceding example should be nothing new for you. Let's see how to achieve the same result using a <code class="literal">list</code> comprehension:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong># squares.comprehension.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; [n ** 2 for n in range(10)]</strong></span>
<span class="strong"><strong>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</strong></span></code></pre></div><p>As simple as that. Isn't it elegant? Basically we have put a <code class="literal">for</code> loop within square brackets. Let's now filter out the odd squares. I'll show you how to do it with <code class="literal">map</code> and <code class="literal">filter</code> first, and then using a <code class="literal">list</code> comprehension again:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># even.squares.py
# using map and filter
sq1 = list(
    map(lambda n: n ** 2, filter(lambda n: not n % 2, range(10)))
)
# equivalent, but using list comprehensions
sq2 = [n ** 2 for n in range(10) if not n % 2]

print(sq1, sq1 == sq2)  # prints: [0, 4, 16, 36, 64] True</code></pre></div><p>I think that now the <span>difference</span><a class="indexterm" id="id325699129"></a> in readability is evident. The <code class="literal">list</code> comprehension reads much better. It's almost English: give me all squares (<code class="literal">n ** 2</code>) for <code class="literal">n</code> between <code class="literal">0</code> and <code class="literal">9</code> if <code class="literal">n</code> is even.</p><p>According to the Python documentation:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it.</em></span></p></blockquote></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec67"></a>Nested comprehensions</h3></div></div></div><p>Let's see an example of <span>nested</span><a class="indexterm" id="id325888059"></a> loops. It's very common when dealing with algorithms to have to iterate on a sequence using two placeholders. The first one runs through the whole sequence, left to right. The second one as well, but it starts from the first one, instead of 0. The concept is that of testing all pairs without duplication. Let's see the classical <code class="literal">for</code> loop equivalent:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"># pairs.for.loop.py
items = 'ABCD'
pairs = []

for a in range(len(items)):
    for b in range(a, len(items)):
        pairs.append((items[a], items[b]))</code></pre></div><p>If you print pairs at the end, you get:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>$ python pairs.for.loop.py</strong></span>
<span class="strong"><strong>[('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'C'), ('C', 'D'), ('D', 'D')]</strong></span></code></pre></div><p>All the tuples with the same letter are those where <code class="literal">b</code> is at the same position as <code class="literal">a</code>. Now, let's see how we can translate this in a <code class="literal">list</code> comprehension:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># pairs.list.comprehension.py
items = 'ABCD'
pairs = [(items[a], items[b])
    for a in range(len(items)) for b in range(a, len(items))]</code></pre></div><p>This version is just two lines long and achieves the same result. Notice that in this particular case, because the <code class="literal">for</code> loop over <code class="literal">b</code> has a dependency on <code class="literal">a</code>, it must follow the <code class="literal">for</code> loop over <code class="literal">a</code> in the comprehension. If you swap them around, you'll get a name error.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec68"></a>Filtering a comprehension</h3></div></div></div><p>We can apply <span>filtering</span><a class="indexterm" id="id325891890"></a> to a comprehension. Let's do it first with <code class="literal">filter</code>. Let's find all Pythagorean triples whose short sides are numbers smaller than 10. We obviously don't want to test a combination twice, and therefore we'll use a trick similar to the one we saw in the previous example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># pythagorean.triple.py
from math import sqrt
# this will generate all possible pairs
mx = 10
triples = [(a, b, sqrt(a**2 + b**2))
    for a in range(1, mx) for b in range(a, mx)]
# this will filter out all non pythagorean triples
triples = list(
    filter(lambda triple: triple[2].is_integer(), triples))

print(triples)  # prints: [(3, 4, 5.0), (6, 8, 10.0)]</code></pre></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note48"></a>Note</h3><p>A <span class="strong"><strong>Pythagorean triple</strong></span> is a triple (<span class="emphasis"><em>a</em></span>, <span class="emphasis"><em>b</em></span>, <span class="emphasis"><em>c</em></span>) of integer numbers satisfying the equation <span class="emphasis"><em>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></em></span>.</p></div><p>In the preceding code, we generated a list of <span class="emphasis"><em>three-tuples</em></span>, <code class="literal">triples</code>. Each tuple contains two integer numbers (the legs), and the hypotenuse of the Pythagorean triangle whose legs are the first two numbers in the tuple. For example, when <code class="literal">a</code> is <code class="literal">3</code> and <code class="literal">b</code> is <code class="literal">4</code>, the tuple will be <code class="literal">(3, 4, 5.0)</code>, and when <code class="literal">a</code> is <code class="literal">5</code> and <code class="literal">b</code> is <code class="literal">7</code>, the tuple will be <code class="literal">(5, 7, 8.602325267042627)</code>.</p><p>After having all the <code class="literal">triples</code> done, we need to filter out all those that don't have a hypotenuse that is an integer number. In order to do this, we filter based on <code class="literal">float_number.is_integer()</code> being <code class="literal">True</code>. This means that of the two example tuples I showed you before, the one with <code class="literal">5.0</code> hypotenuse will be retained, while the one with the <code class="literal">8.602325267042627</code> hypotenuse will be discarded.</p><p>This is good, but I don't like that the triple has two integer numbers and a float. They are supposed to be all integers, so let's use <code class="literal">map</code> to fix this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># pythagorean.triple.int.py
from math import sqrt
mx = 10
triples = [(a, b, sqrt(a**2 + b**2))
    for a in range(1, mx) for b in range(a, mx)]
triples = filter(lambda triple: triple[2].is_integer(), triples)
# this will make the third number in the tuples integer
triples = list(
    map(lambda triple: <span class="strong"><strong>triple[:2] + (int(triple[2]), )</strong></span>, triples))

print(triples)  # prints: [(3, 4, 5), (6, 8, 10)]</code></pre></div><p>Notice the step we added. We take each element in <code class="literal">triples</code> and we slice it, taking only the first two elements in it. Then, we concatenate the slice with a one-tuple, in which we put the integer version of that float number that we didn't like. Seems <span>like</span><a class="indexterm" id="id326305708"></a> a lot of work, right? Indeed it is. Let's see how to do all this with a <code class="literal">list</code> comprehension:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"># pythagorean.triple.comprehension.py
from math import sqrt
# this step is the same as before
mx = 10
triples = [(a, b, sqrt(a**2 + b**2))
    for a in range(1, mx) for b in range(a, mx)]
# here we combine filter and map in one CLEAN list comprehension
triples = [(a, b, int(c)) for a, b, c in triples if c.is_integer()]
print(triples)  # prints: [(3, 4, 5), (6, 8, 10)]</code></pre></div><p>I know. It's much better, isn't it? It's clean, readable, shorter. In other words, it's elegant.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip49"></a>Note</h3><p>I'm going quite fast here, as anticipated in the <span class="emphasis"><em>Summary</em></span> of <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/4" linkend="ch04">Chapter 4</a>, <span class="emphasis"><em>Functions, the Building Blocks of Code</em></span>. Are you playing with this code? If not, I suggest you do. It's very important that you play around, break things, change things, see what happens. Make sure you have a clear understanding of what is going on. You want to become a ninja, right?</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec69"></a>dict comprehensions</h3></div></div></div><p>Dictionary and <code class="literal">set</code> comprehensions <span>work</span><a class="indexterm" id="id326651591"></a> exactly like the list ones, only there is a little difference in the syntax. The following example will suffice to explain everything you need to know:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"># dictionary.comprehensions.py
from string import ascii_lowercase
lettermap = dict((c, k) for k, c in enumerate(ascii_lowercase, 1))</code></pre></div><p>If you print <code class="literal">lettermap</code>, you will see the following (I omitted the middle results, you get the gist):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10"><span class="strong"><strong>$ python dictionary.comprehensions.py</strong></span>
<span class="strong"><strong>{'a': 1,</strong></span>
<span class="strong"><strong> 'b': 2,</strong></span>
<span class="strong"><strong> ...</strong></span>
<span class="strong"><strong> 'y': 25,</strong></span>
<span class="strong"><strong> 'z': 26}</strong></span></code></pre></div><p>What happens in the preceding code is that we're feeding the <code class="literal">dict</code> constructor with a comprehension (technically, a generator expression, we'll see it in a bit). We tell the <code class="literal">dict</code> constructor to make <span class="emphasis"><em>key</em></span>/<span class="emphasis"><em>value</em></span> pairs from each tuple in the comprehension. We enumerate the sequence of all lowercase ASCII letters, starting from <code class="literal">1</code>, using <code class="literal">enumerate</code>. Piece of cake. There is also another way to do the same thing, which is closer to the other dictionary syntax:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11">lettermap = {c: k for k, c in enumerate(ascii_lowercase, 1)} </code></pre></div><p>It does exactly the same thing, with a slightly different syntax that highlights a bit more of the <span class="emphasis"><em>key: value</em></span> part.</p><p>Dictionaries do not allow duplication in the keys, as shown in the following example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"># dictionary.comprehensions.duplicates.py
word = 'Hello'
swaps = {c: c.swapcase() for c in word}
print(swaps)  # prints: {'H': 'h', 'e': 'E', 'l': 'L', 'o': 'O'}</code></pre></div><p>We create a dictionary with keys, the letters in the <code class="literal">'Hello'</code> string, and values of the same letters, but with the case swapped. Notice there is only one <code class="literal">'l': 'L'</code> pair. The constructor doesn't complain, it simply reassigns duplicates to the latest value. Let's make this clearer with another example; let's assign to each key its <span>position</span><a class="indexterm" id="id325610450"></a> in the string:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"># dictionary.comprehensions.positions.py
word = 'Hello'
positions = {c: k for k, c in enumerate(word)}
print(positions)  # prints: {'H': 0, 'e': 1, 'l': 3, 'o': 4}</code></pre></div><p>Notice the value associated with the letter <code class="literal">'l': 3</code>. The <code class="literal">'l': 2</code> pair isn't there; it has been overridden by <code class="literal">'l': 3</code>.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec70"></a>set comprehensions</h3></div></div></div><p>The <code class="literal">set</code> comprehensions are very <span>similar</span><a class="indexterm" id="id325640247"></a> to list and dictionary ones. Python allows both the <code class="literal">set()</code> constructor to be used, or the explicit <code class="literal">{}</code> syntax. Let's see one quick example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"># set.comprehensions.py
word = 'Hello'
letters1 = set(c for c in word)
letters2 = {c for c in word}
print(letters1)  # prints: {'H', 'o', 'e', 'l'}
print(letters1 == letters2)  # prints: True</code></pre></div><p>Notice how for <code class="literal">set</code> comprehensions, as for dictionaries, duplication is not allowed and therefore the resulting set has only four letters. Also, notice that the expressions assigned to <code class="literal">letters1</code> and <code class="literal">letters2</code> produce equivalent sets.</p><p>The syntax used to create <code class="literal">letters2</code> is very similar to the one we can use to create a dictionary comprehension. You can spot the difference only by the fact that dictionaries require keys and values, separated by columns, while sets don't.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_5_ch05lvl1sec54_comprehensions_files/adsct" type="text/javascript"></script></body></html>