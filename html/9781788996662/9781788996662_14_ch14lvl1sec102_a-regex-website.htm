<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">A regex website - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/14/ch14lvl1sec102/a-regex-website" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/14/ch14lvl1sec102/a-regex-website" rel="canonical"/>
<meta content="So, here we are. We'll code a website that stores regular expressions so that we'll be able to play with them a little bit." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="A regex website - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="So, here we are. We'll code a website that stores regular expressions so that we'll be able to play with them a little bit." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/14/ch14lvl1sec102/a-regex-website" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="A regex website - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="So, here we are. We'll code a website that stores regular expressions so that we'll be able to play with them a little bit." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/script.js"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/profitwell.js"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/inferredEvents.js"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/445429252334850"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/fbevents.js"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/gtm.js"></script><script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/f(1).txt"></script><script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "A regex website - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "So, here we are. We'll code a website that stores regular expressions so that we'll be able to play with them a little bit.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch14lvl1sec102"></a>A regex website</h2></div></div><hr/></div><p>So, here we are. We'll code a <span>website</span><a class="indexterm" id="id325915846"></a> that stores regular <span>expressions</span><a class="indexterm" id="id325915838"></a> so that we'll be able to play with them a little bit.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note91"></a>Note</h3><p>Before we proceed with creating the project, I'd like to talk about <span class="strong"><strong>Cascading Style Sheets</strong></span> (<span class="strong"><strong>CSS</strong></span>). CSS are files in which we specify how the various elements on an HTML page look. You can set all sorts of properties, such as shape, size, color, margins, borders, and fonts. In this project, I have tried my best to achieve a decent result on the pages, but I'm neither a frontend developer nor a designer, so please don't pay too much attention to how things look. Try to focus on how they work.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec164"></a>Setting up Django</h3></div></div></div><p>On the Django website (<a class="ulink" href="https://www.djangoproject.com/" target="_blank"><span>https://www.djangoproject.com/</span></a>), you can <span>follow</span><a class="indexterm" id="id325915808"></a> the tutorial, which <span>gives</span><a class="indexterm" id="id325915799"></a> you a pretty good idea of Django's capabilities. If you want, you can follow that tutorial first and then come back to this example. So, first things first; let's install Django in your virtual environment (you will find it is <span>already</span><a class="indexterm" id="id325915733"></a> installed, as it is part of the requirements file):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>$ pip install django</strong></span></code></pre></div><p>When this command is done, you can test it within a console (try doing it with <code class="literal">bpython</code>, it gives you a shell similar to IPython but with nice introspection capabilities):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>&gt;&gt;&gt; import django</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; django.VERSION</strong></span>
<span class="strong"><strong>(2, 0, 5, 'final', 0)</strong></span></code></pre></div><p>Now that Django is installed, we're good to go. We'll have to do some scaffolding, so I'll quickly guide you through that.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch14lvl3sec60"></a>Starting the project</h4></div></div></div><p>Choose a folder in the book's <span>environment</span><a class="indexterm" id="id325891870"></a> and change into that. I'll use <code class="literal">ch14</code>. From there, we can start a Django project with the following command:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>$ django-admin startproject regex</strong></span></code></pre></div><p>This will prepare the skeleton for a Django project called <code class="literal">regex</code>. Change into the <code class="literal">regex</code> folder and run the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>$ python manage.py runserver</strong></span></code></pre></div><p>You should be able to go to <code class="literal">http://127.0.0.1:8000/</code> with your browser and see the <strong class="userinput"><code>It worked!</code></strong> default Django page. This means that the project is correctly set up. When you've seen the page, kill the server with <span class="emphasis"><em><span class="strong"><strong>Ctrl</strong></span></em></span> + <span class="emphasis"><em><span class="strong"><strong>C</strong></span></em></span> (or whatever it says in the console). I'll paste the final structure for the project now so that you can use it as a reference:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>$ tree -A regex  # from the ch14 folder</strong></span>
<span class="strong"><strong>regex</strong></span>
<span class="strong"><strong>├── entries</strong></span>
<span class="strong"><strong>│ ├── __init__.py</strong></span>
<span class="strong"><strong>│ ├── admin.py</strong></span>
<span class="strong"><strong>│ ├── forms.py</strong></span>
<span class="strong"><strong>│ ├── migrations</strong></span>
<span class="strong"><strong>│ │ ├── 0001_initial.py</strong></span>
<span class="strong"><strong>│ │ └── __init__.py</strong></span>
<span class="strong"><strong>│ ├── models.py</strong></span>
<span class="strong"><strong>│ ├── static</strong></span>
<span class="strong"><strong>│ │ └── entries</strong></span>
<span class="strong"><strong>│ │ └── css</strong></span>
<span class="strong"><strong>│ │ └── main.css</strong></span>
<span class="strong"><strong>│ ├── templates</strong></span>
<span class="strong"><strong>│ │ └── entries</strong></span>
<span class="strong"><strong>│ │ ├── base.html</strong></span>
<span class="strong"><strong>│ │ ├── footer.html</strong></span>
<span class="strong"><strong>│ │ ├── home.html</strong></span>
<span class="strong"><strong>│ │ ├── insert.html</strong></span>
<span class="strong"><strong>│ │ └── list.html</strong></span>
<span class="strong"><strong>│ └── views.py</strong></span>
<span class="strong"><strong>├── manage.py</strong></span>
<span class="strong"><strong>└── regex</strong></span>
<span class="strong"><strong>    ├── __init__.py</strong></span>
<span class="strong"><strong>    ├── settings.py</strong></span>
<span class="strong"><strong>    ├── urls.py</strong></span>
<span class="strong"><strong>    └── wsgi.py</strong></span></code></pre></div><p>Don't worry if you're missing files, we'll get there. A Django project is typically a collection of several different applications. Each application is meant to provide a <span>functionality</span><a class="indexterm" id="id325891875"></a> in a self-contained, reusable fashion. We'll create just one, called <code class="literal">entries</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>$ python manage.py startapp entries</strong></span></code></pre></div><p>Within the <code class="literal">entries</code> folder that has been created, you can get rid of the <code class="literal">tests.py</code> module.</p><p>Now, let's fix the <code class="literal">regex/settings.py</code> file in the <code class="literal">regex</code> folder. We need to add our application to the <code class="literal">INSTALLED_APPS</code> list so that we can use it (add it at the bottom of the list):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6">INSTALLED_APPS = [
    'django.contrib.admin',
    ...
    'entries',
]</code></pre></div><p>Then, you may want to fix the language and time zone according to your personal preference. I live in London, so I set them like this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7">LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'Europe/London'</code></pre></div><p>There is nothing else to do in this file, so you can save and close it.</p><p>Now it's time to apply the <span class="strong"><strong>migrations</strong></span> to the database. Django needs database support to handle users, sessions, and things like that, so we need to create a database and populate it with the <span>necessary</span><a class="indexterm" id="id325999367"></a> data. Luckily, this is very easily done with the following command:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>$ python manage.py migrate</strong></span></code></pre></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note92"></a>Note</h3><p>For this project, we use an SQLite database, which is basically just a file. On a real project, you would use a different database engine, such as MySQL or PostgreSQL.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch14lvl3sec61"></a>Creating users</h4></div></div></div><p>Now that we have a database, we can <span>create</span><a class="indexterm" id="id326292248"></a> a superuser using the console:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"><span class="strong"><strong>$ python manage.py createsuperuser</strong></span></code></pre></div><p>After entering the username and other details, we have a user with admin privileges. This is enough to access the Django admin section, so try to start the server:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10"><span class="strong"><strong>$ python manage.py runserver</strong></span></code></pre></div><p>This will start the Django development server, which is a very useful built-in web server that you can use while working with Django. Now that the server is running, we can access the admin page at <code class="literal">http://localhost:8000/admin/</code>. I will show you a screenshot of this section later. If you log in with the credentials of the user you just created and head to the <strong class="userinput"><code>Authentication and Authorization</code></strong> section, you'll find <strong class="userinput"><code>Users</code></strong>. Open that and you will be able to see the list of users. You can edit the details of any user you want as an admin. In our case, make sure you create a different one so that there are at least two users in the system (we'll need them later). I'll call the first user Fabrizio (username: <code class="literal">fab</code>) and the second one Adriano (username: <code class="literal">adri</code>), in honor of my father.</p><p>By the way, you should see that the Django admin panel comes for free automatically. You define your models, hook them up, and that's it. This is an incredible tool that shows how advanced Django's introspection capabilities are. Moreover, it is completely customizable and extendable. It's truly an excellent piece of work.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec165"></a>Adding the Entry model</h3></div></div></div><p>Now that the boilerplate is out of the way, and we have a couple of users, we're ready to code. We start by adding the <code class="literal">Entry</code> model to our application so that we can store <span>objects</span><a class="indexterm" id="id326010086"></a> in the database. Here's the code you'll need to add (remember to use the project tree for reference):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11"># entries/models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class Entry(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    pattern = models.CharField(max_length=255)
    test_string = models.CharField(max_length=255)
    date_added = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name_plural = 'entries'</code></pre></div><p>This is the model we'll use to store regular expressions in our system. We'll store a pattern, a test string, a reference to the user who created the entry, and the moment of creation. You can see that creating a model is actually quite easy, but nonetheless, let's go through it line by line.</p><p>First we need to import the <code class="literal">models</code> module from <code class="literal">django.db</code>. This will give us the base class for our <code class="literal">Entry</code> model. Django models are special classes and much is done for us behind the scenes when we inherit from <code class="literal">models.Model</code>.</p><p>We want a reference to the user who created the entry, so we need to import the <code class="literal">User</code> model from Django's authorization application and we also need to import the <code class="literal">timezone</code> model to get access to the <code class="literal">timezone.now()</code> function, which provides us with a <code class="literal">timezone</code>-aware version of <code class="literal">datetime.now()</code>. The beauty of this is that it's hooked up with the <code class="literal">TIME_ZONE</code> settings I showed you before.</p><p>As for the primary key for this class, if we don't set one explicitly, Django will add <span>one</span><a class="indexterm" id="id326013383"></a> for us. A <span class="strong"><strong>primary key</strong></span> is a key that allows us to uniquely identify an <code class="literal">Entry</code> object in the database (in this case, Django will add an auto-incrementing integer ID).</p><p>So, we define our class, and we set up four class attributes. We have a <code class="literal">ForeignKey</code> attribute that is our reference to the <code class="literal">User</code> model. We also have two <code class="literal">CharField</code> attributes that hold the pattern and test strings for our regular expressions. We also have <code class="literal">DateTimeField</code>, whose default value is set to <code class="literal">timezone.now</code>. Note that we don't call <code class="literal">timezone.now</code> right there, it's <code class="literal">now</code>, not <code class="literal">now()</code>. So, we're not passing a <code class="literal">DateTime</code> instance (set at the moment in time when that line is parsed) rather, we're passing a callable, a function that is called when we save an entry in the database. This is similar to the callback mechanism we used in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/12" linkend="ch12"><span>Chapter 12</span></a>, <span class="emphasis"><em>GUIs and Scripts</em></span>, when we were assigning commands to button clicks.</p><p>The last two lines are very interesting. We define a <code class="literal">Meta</code> class within the <code class="literal">Entry</code> class itself. The <code class="literal">Meta</code> class is used by Django to provide all sorts of extra information for a model. Django has a great deal of logic under the hood to adapt its behavior according to the information we put into the <code class="literal">Meta</code> class. In this case, in the <span>admin</span><a class="indexterm" id="id326013452"></a> panel, the pluralized version of <code class="literal">Entry</code> would be <span class="emphasis"><em>Entrys</em></span>, which is wrong, therefore we need to set it manually. We specify the plural in all lowercase, as Django takes care of capitalizing it for us when needed.</p><p>Now that we have a new model, we need to update the database to reflect the new state of the code. In order to do this, we need to instruct Django that it needs to create the code to update the database. This <span>code</span><a class="indexterm" id="id326013469"></a> is called <span class="strong"><strong>migration</strong></span>. Let's <span>create</span><a class="indexterm" id="id326013480"></a> it and execute it:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"><span class="strong"><strong>$ python manage.py makemigrations entries</strong></span><span class="strong"><strong>$ python manage.py migrate</strong></span></code></pre></div><p>After these two instructions, the <span>database</span><a class="indexterm" id="id326013498"></a> will be ready to store <code class="literal">Entry</code> objects.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note93"></a>Note</h3><p>There are two different kinds of migrations: data and schema migrations. <span class="strong"><strong>Data migrations</strong></span> port data from one state to another without altering its structure. For example, a data migration could set all products for a category as out of stock by switching a flag to <code class="literal">False</code> or <code class="literal">0</code>. A <span class="strong"><strong>schema migration</strong></span> is a set of instructions that alter the structure of the database schema. For example, that could be adding an <code class="literal">age</code> column to a <code class="literal">Person</code> table, or increasing the maximum length of a field to account for very long addresses. When developing with Django, it's quite common to have to perform both kinds of migrations over the course of development. Data evolves continuously, especially if you code in an agile environment.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec166"></a>Customizing the admin panel</h3></div></div></div><p>The next step is to hook the <code class="literal">Entry</code> model up with the admin panel. You can do it with one line of code, but in this case, I want to add some options to <span>customize</span><a class="indexterm" id="id326020852"></a> the way the admin panel shows the entries, both in the list view of all entry items in the database and in the form view that allows us to create and modify them.</p><p>All we need to do is to add the following code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"># entries/admin.py
from django.contrib import admin
from .models import Entry

@admin.register(Entry)
class EntryAdmin(admin.ModelAdmin):
    fieldsets = [
        ('Regular Expression',
         {'fields': ['pattern', 'test_string']}),
        ('Other Information',
         {'fields': ['user', 'date_added']}),
    ]
    list_display = ('pattern', 'test_string', 'user')
    list_filter = ['user']
    search_fields = ['test_string']</code></pre></div><p>This is simply beautiful. My guess is that you probably already understand most of it, even if you're new to Django.</p><p>So, we start by importing the <code class="literal">admin</code> module and the <code class="literal">Entry</code> model. Because we want to foster code reuse, we import the <code class="literal">Entry</code> model using a relative import (there's a dot before <code class="literal">models</code>). This will allow us to move or rename the application without too much trouble. Then, we define the <code class="literal">EntryAdmin</code> class, which inherits from <code class="literal">admin.ModelAdmin</code>. The decoration on the class tells Django to display the <code class="literal">Entry</code> model in the admin panel, and what we put in the <code class="literal">EntryAdmin</code> class tells Django how to customize the way it handles this model.</p><p>First, we specify the <code class="literal">fieldsets</code> for the create/edit page. This will divide the page into two sections so that we get a better visualization of the content (pattern and test string) and the other details (user and timestamp) separately.</p><p>Then, we customize the way the list page displays the results. We want to see all the fields, but not the date. We also want to be able to filter on the user so that we can have a list of all the entries by just one user, and we want to be able to search on <code class="literal">test_string</code>.</p><p>I will go ahead and add three entries, one for myself <span>and</span><a class="indexterm" id="id326042791"></a> two on behalf of my father. The result is shown in the next two screenshots. After inserting them, the list page looks like this:</p><div class="mediaobject"><img src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/1dbf005c-0e9f-480e-92d0-9bc8e7e8d37f.png"/></div><p>I have highlighted the three parts of this view that we customized in the <code class="literal">EntryAdmin</code> class. We can filter by user, we can search, and we have all the fields displayed. If you click on a pattern, the edit view opens up.</p><p>After <span>our</span><a class="indexterm" id="id326042814"></a> customization, it looks like this:</p><div class="mediaobject"><img src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/2f8b4a10-5402-4d54-ba90-8ebfa7ce250d.png"/></div><p>Notice how we have two sections: <strong class="userinput"><code>Regular </code></strong><strong class="userinput"><code>Expression</code></strong> and <strong class="userinput"><code>Other </code></strong><strong class="userinput"><code>Information</code></strong>, thanks to our custom <code class="literal">EntryAdmin</code> class. Have a go with it, add some entries to a couple of different users, get <span>familiar</span><a class="indexterm" id="id326047968"></a> with the interface. Isn't it nice to have all this for free?</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec167"></a>Creating the form</h3></div></div></div><p>Every time you fill in your details on a web page, you're inserting data in form fields. A <span class="strong"><strong>form</strong></span> is a <span>part</span><a class="indexterm" id="id326047987"></a> of the HTML <span class="strong"><strong>Document Object Model</strong></span> (<span class="strong"><strong>DOM</strong></span>) tree. In HTML, you <span>create</span><a class="indexterm" id="id326048002"></a> a form by using the <code class="literal">form</code> tag. When you <span>click</span><a class="indexterm" id="id326048013"></a> on the submit button, your browser normally packs the <code class="literal">form</code> data together and puts it in the body of a <code class="literal">POST</code> request. As opposed to <code class="literal">GET</code> requests, which are used to ask the web server for a resource, a <code class="literal">POST</code> request normally sends data to the web server with the aim of creating or updating a resource. For this reason, handling <code class="literal">POST</code> requests usually requires more care than <code class="literal">GET</code> requests.</p><p>When the server receives data from a <code class="literal">POST</code> request, that data needs to be validated. Moreover, the server needs to employ security mechanisms to protect against various types of attacks. One <span>attack</span><a class="indexterm" id="id326050402"></a> that is very dangerous is the <span class="strong"><strong>cross-site request forgery</strong></span> (<span class="strong"><strong>CSRF</strong></span>) attack, which happens when data is sent from a domain that is not the one the user is authenticated on. Django allows you to handle this issue in a very elegant way.</p><p>So, instead of being lazy and using the Django admin to create the entries, I'm going to show you how to do it using a Django form. By using the tools the framework gives you, you get a very good degree of validation work already done (in fact, we won't need to add any custom validation ourselves).</p><p>There are two kinds of form classes in Django: <code class="literal">Form</code> and <code class="literal">ModelForm</code>. You use the former to create a form whose shape and behavior depends on how you code the class, what fields you add, and so on. On the other hand, the latter is a type of form that, albeit still customizable, infers fields and behavior from a model. Since we need a form for the <code class="literal">Entry</code> model, we'll use that one:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"># entries/forms.py
from django.forms import ModelForm
from .models import Entry

class EntryForm(ModelForm):
    class Meta:
        model = Entry
        fields = ['pattern', 'test_string']</code></pre></div><p>Amazingly enough, this is all we have to do to have a form that we can put on a page. The only notable thing here is that we restrict the fields to only <code class="literal">pattern</code> and <code class="literal">test_string</code>. Only logged-in users will be allowed access to the insert page, and therefore we don't need to ask who the user is, we already know that. As for the date, when we save an <code class="literal">Entry</code>, the <code class="literal">date_added</code> field will be set according to its default, therefore we don't need to specify that as well. We'll see in the view how to feed the user information to the form before saving. So, now that the background work is done, all we need is the views and the templates. Let's start with the views.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec168"></a>Writing the views</h3></div></div></div><p>We need to write three views. We <span>need</span><a class="indexterm" id="id326050594"></a> one for the home page, one to display the list of all entries for a user, and one to create a new entry. We also need views to log in and log out. But thanks to Django, we don't <span>need</span><a class="indexterm" id="id326050602"></a> to write them. I'll paste the code in steps:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15"># entries/views.py
import re
from django.contrib.auth.decorators import login_required
from django.contrib.messages.views import SuccessMessageMixin
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.views.generic import FormView, TemplateView
from .forms import EntryForm
from .models import Entry</code></pre></div><p>Let's start with the imports. We need the <code class="literal">re</code> module to handle regular expressions, then we need a few classes and functions from Django, and finally, we need the <code class="literal">Entry</code> model and the <code class="literal">EntryForm</code> form.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch14lvl3sec62"></a>The home view</h4></div></div></div><p>The first <span>view</span><a class="indexterm" id="id326050634"></a> is <code class="literal">HomeView</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16"># entries/views.py
class HomeView(TemplateView):
    template_name = 'entries/home.html'

    @method_decorator(
        login_required(login_url=reverse_lazy('login')))
    def get(self, request, *args, **kwargs):
        return super(HomeView, self).get(request, *args, **kwargs)</code></pre></div><p>It inherits from <code class="literal">TemplateView</code>, which means that the response will be created by rendering a template with the context we'll create in the view. All we have to do is specify the <code class="literal">template_name</code> class attribute to point to the correct template. Django promotes code reuse to a point that if we didn't need to make this view accessible only to logged-in users, the first two lines would have been all we needed.</p><p>However, we want this view to be accessible only to logged-in users; therefore, we need to decorate it with <code class="literal">login_required</code>. Now, historically views in Django were functions; therefore, this decorator was designed to accept a function, and not a method like we have in this class. We're using Django class-based views in this project so, in order to make things work, we need to transform <code class="literal">login_required</code> so that it accepts a method (the difference being in the first argument: <code class="literal">self</code>). We do this by passing <code class="literal">login_required</code> to <code class="literal">method_decorator</code>.</p><p>We also need to feed the <code class="literal">login_required</code> decorator with <code class="literal">login_url</code> information, and here comes another wonderful feature of Django. As you'll see after we're done with the views, in Django, you tie a view to a URL through a pattern, consisting of a string which may or may not be a regular expression, and possibly other information. You can give a name to each entry in the <code class="literal">urls.py</code> file so that when you want to refer to a URL, you don't have to hardcode its value into your code. All you have to do is get Django to reverse-engineer that URL from the name we gave to the entry in <code class="literal">urls.py</code>, defining the URL and the view that is tied to it. This mechanism will become clearer later. For now, just think of <code class="literal">reverse('...')</code> as a way of getting a URL from an identifier. In this way, you only write the actual URL once, in the <code class="literal">urls.py</code> file, which is brilliant. In the <code class="literal">views.py</code> code, we need to use <code class="literal">reverse_lazy</code>, which works exactly like <code class="literal">reverse</code> with one major difference: it only finds the URL when we actually need it (in a lazy fashion). The reason why <code class="literal">reverse_lazy</code> can be so useful is that sometimes it might happen that we need to reverse an URL from an identifier, but at the moment we call <code class="literal">reverse</code>, the <code class="literal">urls.py</code> module hasn't been loaded yet, which <span>causes</span><a class="indexterm" id="id326069324"></a> a failure. The lazy behavior of <code class="literal">reverse_lazy</code> solves the issue because even if the call is made before the <code class="literal">urls.py</code> module has been loaded, the actual reversing of the identifier, to get to the related URL, happens in a lazy fashion, later on, when <code class="literal">urls.py</code> has surely been loaded.</p><p>The <code class="literal">get</code> method, which we just decorated, simply calls the <code class="literal">get</code> method of the parent class. Of course, the <code class="literal">get</code> method is the method that Django calls when a <code class="literal">GET</code> request is performed against the URL tied to this view.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch14lvl3sec63"></a>The entry list view</h4></div></div></div><p>This view is much more <span>interesting</span><a class="indexterm" id="id326069364"></a> than the previous one:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="17"># entries/views.py
class EntryListView(TemplateView):
    template_name = 'entries/list.html'

    @method_decorator(
        login_required(login_url=reverse_lazy('login')))
    def get(self, request, *args, **kwargs):
        context = self.get_context_data(**kwargs)
        entries = Entry.objects.filter(
            user=request.user).order_by('-date_added')
        matches = (self._parse_entry(entry) for entry in entries)
        context['entries'] = list(zip(entries, matches))
        return self.render_to_response(context)

    def _parse_entry(self, entry):
        match = re.search(entry.pattern, entry.test_string)
        if match is not None:
            return (
                match.group(),
                match.groups() or None,
                match.groupdict() or None
            )
        return None</code></pre></div><p>First of all, we decorate the <code class="literal">get</code> method as we did before. Inside of it, we need to prepare a list of <code class="literal">Entry</code> objects and feed it to the template, which shows it to the user. In order to do so, we start by getting the <code class="literal">context</code> dictionary like we're supposed to do, by calling the <code class="literal">get_context_data</code> method of the <code class="literal">TemplateView</code> class. Then, we use the ORM to get a list of the entries. We do this by accessing the objects manager, and calling a filter on it. We filter the entries according to which user is logged in, and we ask for them to be sorted in descending order (that <code class="literal">'-'</code> in front of the name specifies the descending order). The <code class="literal">objects</code> manager is the default <span class="strong"><strong>manager</strong></span> every Django model is augmented with on creation: it allows us to interact with the database through its methods.</p><p>We parse each entry to get a list of matches (actually, I coded it so that <code class="literal">matches</code> is a generator expression). Finally, we add to the context an <code class="literal">'entries'</code> key whose value is the <span>coupling</span><a class="indexterm" id="id326077130"></a> of <code class="literal">entries</code> and <code class="literal">matches</code>, so that each <code class="literal">Entry</code> instance is paired with the resulting match of its pattern and test string.</p><p>On the last line, we simply ask Django to render the template using the context we created.</p><p>Take a look at the <code class="literal">_parse_entry</code> method. All it does is perform a search on the <code class="literal">entry.test_string</code> with the <code class="literal">entry.pattern</code>. If the resulting <code class="literal">match</code> object is not <code class="literal">None</code>, it means that we found something. If so, we return a tuple with three elements: the overall group, the subgroups, and the group dictionary.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note94"></a>Note</h3><p>Notice that <code class="literal">match.groups()</code> and <code class="literal">match.groupdict()</code> might return respectively an empty tuple and an empty dict. In order to normalize empty results to a simpler <code class="literal">None</code>, I use a common pattern in Python by exploiting the <code class="literal">or</code> operator. <code class="literal">A or B</code>, in fact, will return <code class="literal">A</code> if <code class="literal">A</code> evaluates to a truthy value, or <code class="literal">B</code> otherwise. Can you think how this might differ from the behavior of the <code class="literal">and</code> operator?</p></div><p>If you're not familiar with those terms, don't worry, you'll see a screenshot soon with an example. We return <code class="literal">None</code> if there is no match (which technically is not needed, as Python would do that anyway, but I have included it here for the sake of being explicit).</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch14lvl3sec64"></a>The form view</h4></div></div></div><p>Finally, let's examine <code class="literal">EntryFormView</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="18"># entries/views.py
class EntryFormView(SuccessMessageMixin, FormView):
    template_name = 'entries/insert.html'
    form_class = EntryForm
    success_url = reverse_lazy('insert')
    success_message = "Entry was created successfully"

    @method_decorator(
        login_required(login_url=reverse_lazy('login')))
    def get(self, request, *args, **kwargs):
        return super(EntryFormView, self).get(
            request, *args, **kwargs)

    @method_decorator(
        login_required(login_url=reverse_lazy('login')))
    def post(self, request, *args, **kwargs):
        return super(EntryFormView, self).post(
            request, *args, **kwargs)

    def form_valid(self, form):
        self._save_with_user(form)
        return super(EntryFormView, self).form_valid(form)

    def _save_with_user(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.save()</code></pre></div><p>This is particularly <span>interesting</span><a class="indexterm" id="id326077226"></a> for a few reasons. First, it shows us a nice example of Python's multiple inheritance. We want to display a message on the page, after having inserted an <code class="literal">Entry</code>, so we inherit from <code class="literal">SuccessMessageMixin</code>. But we want to handle a form as well, so we also inherit from <code class="literal">FormView</code>.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note95"></a>Note</h3><p>Note that, when you deal with mixins and inheritance, you may have to consider the order in which you specify the base classes in the class declaration, as it will affect how methods are found when going up the inheritance chain to serve a call.</p></div><p>In order to set up this view correctly, we need to specify a few attributes at the beginning: the template to be rendered, the form class to be used to handle the data from the <code class="literal">POST</code> request, the URL we need to redirect the user to in the case of success, and the success message.</p><p>Another interesting feature is that this view needs to handle both <code class="literal">GET</code> and <code class="literal">POST</code> requests. When we land on the form page for the first time, the form is empty, and that is the <code class="literal">GET</code> request. On the other hand, when we fill in the form and want to submit the <code class="literal">Entry</code>, we make a <code class="literal">POST</code> request. You can see that the body of <code class="literal">get</code> is conceptually identical to <code class="literal">HomeView</code>. Django does everything for us.</p><p>The <code class="literal">post</code> method is just like <code class="literal">get</code>. The only reason we need to code these two methods is so that we can decorate them to require login.</p><p>Within the Django form-handling process (in the <code class="literal">FormView</code> class), there are a few methods that we can override in order to customize the overall behavior. We need to do it with the <code class="literal">form_valid</code> method. This method will be called when the form validation is successful. Its purpose is to save the form so that an <code class="literal">Entry</code> object is created out of it, and then stored in the database.</p><p>The only problem is that our form is missing the user. We need to intercept that moment in the chain of calls and put the user information in ourselves. This is done by calling the <code class="literal">_save_with_user</code> method, which is very simple.</p><p>First, we ask Django to save the form with the <code class="literal">commit</code> argument set to <code class="literal">False</code>. This creates an <code class="literal">Entry</code> instance without attempting to save it to the database. Saving it immediately would fail because the <code class="literal">user</code> information is not there.</p><p>The next line updates the <code class="literal">Entry</code> instance (<code class="literal">self.object</code>), adding the <code class="literal">user</code> information and, on the last line, we can safely save it. The reason I called <code class="literal">object</code> and set it on the instance like that was to follow what the original <code class="literal">FormView</code> class does.</p><p>We're fiddling with the Django mechanism here, so if we want the whole thing to work, we need to pay attention to when and how we modify its behavior, and make sure we don't alter it incorrectly. For this reason, it's very important to remember to call the <code class="literal">form_valid</code> method of the base class (we use <code class="literal">super</code> for that) at the end of our own <span>customized</span><a class="indexterm" id="id326123363"></a> version, to make sure that every other action that method usually performs is carried out correctly.</p><p>Note how the request is tied to each view instance (<code class="literal">self.request</code>) so that we don't need to pass it through when we refactor our logic into methods. Note also that the user information has been added to the request automatically by Django. Finally, the reason why all the process is split into very small methods like these is so that we can only override those that we need to customize. All this removes the need to write a lot of code.</p><p>Now that we have the views covered, let's see how we couple them to the URLs.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec169"></a>Tying up URLs and views</h3></div></div></div><p>In the <code class="literal">urls.py</code> module, we tie each view to a URL. There are many ways of doing this. I chose the simplest one, which works perfectly for the extent of this exercise, but you <span>may</span><a class="indexterm" id="id326123389"></a> want to explore this subject more deeply if you intend to work with Django. This is the core around which the whole website logic will revolve; therefore, you should try to get it down correctly. Note that the <code class="literal">urls.py</code> module belongs to the project folder:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="19"># regex/urls.py
from django.contrib import admin
from django.urls import path
from django.contrib.auth import views as auth_views
from django.urls import reverse_lazy
from entries.views import HomeView, EntryListView, EntryFormView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('entries/', EntryListView.as_view(), name='entries'),
    path('entries/insert',
        EntryFormView.as_view(),
        name='insert'),

    path('login/',
        auth_views.login,
        kwargs={'template_name': 'admin/login.html'},
        name='login'),
    path('logout/',
        auth_views.logout,
        kwargs={'next_page': reverse_lazy('home')},
        name='logout'),

    path('', HomeView.as_view(), name='home'),
] </code></pre></div><p>If you are familiar with version 1 of Django, you will notice some differences here, as this project is coded in version 2.<span class="emphasis"><em> </em></span>As you can see, the magic comes from the <code class="literal">path</code> function, which has recently replaced the <code class="literal">url</code> function. First, we pass it a path string (also known as a <span class="emphasis"><em>route</em></span>), then the view, and finally a name, which is what we will use in the <code class="literal">reverse</code> and <code class="literal">reverse_lazy</code> functions to recover the URL.</p><p>Note that, when using class-based views, we have to transform them into functions, which is what <code class="literal">path</code> is expecting. To do that, we call the <code class="literal">as_view()</code> method on them.</p><p>Note also that the first <code class="literal">path</code> entry, for the admin, is special. Instead of specifying a URL and a view, it specifies a URL prefix and another <code class="literal">urls.py</code> module (from the <code class="literal">admin.site</code> package). In this way, Django will complete all the URLs for the admin section by prepending <code class="literal">'admin/'</code> to all the URLs specified in <code class="literal">admin.site.urls</code>. We could have done the same for our entries application (and we should have), but I feel it would have been a bit of overkill for this simple project.</p><p>The URL paths defined in this module are so simple that they don't require any regular expression to be defined. Should you need to use a regular expression, you can check out the <code class="literal">re_path</code> function, which is designed for that purpose. </p><p>We also include login and logout functionalities, by employing views that come straight out of the <code class="literal">django.contrib.auth</code> package. We enrich the declaration with the necessary information (such as the next page, for the logout view, for example) and we don't need to write a single line of code to handle authentication. This is brilliant and saves us a lot of time.</p><p>Each <code class="literal">path</code> declaration must be done within the <code class="literal">urlpatterns</code> list and on this matter, it's important to consider that, when Django is trying to find a view for a URL that has been requested, the patterns are exercised in order, from top to bottom. The first one that matches is the one that will provide the view for it so, in general, you have to put specific patterns before generic ones, otherwise they will never get a chance to be caught. To show you an <span>example</span><a class="indexterm" id="id326133340"></a> that uses regular expressions in the route declaration, <code class="literal">'^shop/categories/$'</code> needs to come before <code class="literal">'^shop'</code> (notice that the <code class="literal">'$'</code> signals the end of the pattern, and it is not specified in the latter), otherwise it would never be called.</p><p>So, models, forms, admin, views, and URLs are all done. All that's left is to take care of the templates. I'll have to be very brief on this part because HTML can be very verbose.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch14lvl2sec170"></a>Writing the templates</h3></div></div></div><p>All templates inherit from a base one, which <span>provides</span><a class="indexterm" id="id326133367"></a> the HTML structure for all others, in a very <span class="strong"><strong>object-oriented programming</strong></span> (<span class="strong"><strong>OOP</strong></span>) fashion. It also specifies a few blocks, which are areas that can be overridden by children so that they can provide custom content for those areas. Let's start with the base template:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="20"># entries/templates/entries/base.html
{% load static from staticfiles %}
<span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    {% block meta %}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
       <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    {% endblock meta %}

    {% block styles %}
      &lt;link href="{% static "entries/css/main.css" %}"
       rel="stylesheet"&gt;
    {% endblock styles %}

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> {% block title %}Title{% endblock title %} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      {% block page-content %}
      {% endblock page-content %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      {% block footer %}
      {% endblock footer %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></div><p>There is a good reason to repeat the <code class="literal">entries</code> folder from the <code class="literal">templates</code> one.
When you deploy a Django website, you collect all the template files under one folder. If you don't specify the paths like I did, you may get a <code class="literal">base.html</code> template in the entries application, and a <code class="literal">base.html</code> template in another app. The last one to be collected will override any other file with the <span>same</span><a class="indexterm" id="id326160438"></a> name. For this reason, by putting them in a <code class="literal">templates/entries</code> folder and using this technique for each Django application you write, you avoid the risk of name collisions (the same goes for any other static file).</p><p>There is not much to say about this template, really, apart from the fact that it loads the <code class="literal">static</code> tag so that we can get easy access to the <code class="literal">static</code> path without hardcoding it in the template using <code class="literal">{% static ... %}</code>. The code in the special <code class="literal">{% ... %}</code> sections is code that defines logic. The code in the special <code class="literal">{{ ... }}</code> represents variables that will be rendered on the page.</p><p>We define five blocks: <code class="literal">styles</code>, <code class="literal">meta</code>, <code class="literal">title</code>, <code class="literal">page-content</code>, and <code class="literal">footer</code>, whose purpose is to hold the metadata, style information, title, the content of the page, and the footer, respectively. Blocks can be optionally overridden by child templates in order to provide different content within them.</p><p>Here's the footer:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="21"># entries/templates/entries/footer.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  Go back &lt;a href="{% url "home" %}"&gt;home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre></div><p>It gives us a nice link to the home page, which comes from the following template:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="22"># entries/templates/entries/home.html
{% extends "entries/base.html" %}
{% block title%}Welcome to the Entry website.{% endblock title %}

{% block page-content %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome {{ user.first_name }}!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home-option<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>To see the list of your entries
    please click &lt;a href="{% url "entries" %}"&gt;here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home-option<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>To insert a new entry please click
    &lt;a href="{% url "insert" %}"&gt;here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home-option<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>To login as another user please click
    &lt;a href="{% url "logout" %}"&gt;here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home-option<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>To go to the admin panel
    please click &lt;a href="{% url "admin:index" %}"&gt;here.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
{% endblock page-content %}</code></pre></div><p>It extends the <code class="literal">base.html</code> template, and overrides <code class="literal">title</code> and <code class="literal">page-content</code>. You can see that basically all it does is provide four links to the user. These are the list of entries, the insert page, the logout page, and the admin page. All of this is done without hardcoding a single URL, through the use of the <code class="literal">{% url ... %}</code> tag, which is the template equivalent of the <code class="literal">reverse</code> function.</p><p>The template for inserting <code class="literal">Entry</code> is as follows:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="23"># entries/templates/entries/insert.html
{% extends "entries/base.html" %}
{% block title%}Insert a new Entry{% endblock title %}

{% block page-content %}
  {% if messages %}
    {% for message in messages %}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ message.tags }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% endfor %}
  {% endif %}

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Insert a new Entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  &lt;form action="{% url "insert" %}" method="post"&gt;
    {% csrf_token %}{{ form.as_p }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Insert<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
{% endblock page-content %}

{% block footer %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>&lt;a href="{% url "entries" %}"&gt;See your entries.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  {% include "entries/footer.html" %}
{% endblock footer %}</code></pre></div><p>There is some conditional logic at the beginning to <span>display</span><a class="indexterm" id="id326160633"></a> messages, if any, and then we define the form. Django gives us the ability to render a form by simply calling <code class="literal">{{ form.as_p }}</code> (alternatively, <code class="literal">form.as_ul</code> or <code class="literal">form.as_table</code>). This creates all the necessary fields and labels for us. The difference between the three commands is in the way the form is laid out: as a paragraph, as an unordered list, or as a table. We only need to wrap it in form tags and add a submit button. This behavior was designed for our convenience: we need the freedom to shape that <code class="literal">&lt;form&gt;</code> tag as we want, so Django isn't intrusive on that. Also, note that <code class="literal">{% csrf_token %}</code>.</p><p>It will be rendered into a token by Django and will become part of the data sent to the server on submission. This way, Django will be able to verify that the request was from an allowed source, thus avoiding the aforementioned CSRF issue. Did you see how we handled the token when we wrote the view for the <code class="literal">Entry</code> insertion? Exactly. We didn't write a single line of code for it. Django takes care of it automatically thanks to a <span class="strong"><strong>middleware</strong></span> class (<code class="literal">CsrfViewMiddleware</code>). Please <span>refer</span><a class="indexterm" id="id326160843"></a> to the <span>official</span><a class="indexterm" id="id326160850"></a> Django documentation (<a class="ulink" href="https://docs.djangoproject.com/en/2.0/" target="_blank">https://docs.djangoproject.com/en/2.0/</a>) to explore this subject further.</p><p>For this page, we also use the footer block to display a link to the home page. Finally, we have the list template, which is the most interesting one:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="24"># entries/templates/entries/list.html
{% extends "entries/base.html" %}
{% block title%} Entries list {% endblock title %}

{% block page-content %}
 {% if entries %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Your entries ({{ entries|length }} found)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>&lt;a href="{% url "insert" %}"&gt;Insert new entry.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries-table<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>Matches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
    {% for entry, match in entries %}
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entries-list {% cycle <span class="token punctuation">'</span>light-gray<span class="token punctuation">'</span> <span class="token punctuation">'</span>white<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
        Pattern: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
         "{{ entry.pattern }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        Test String: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
         "{{ entry.test_string }}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        Added: {{ entry.date_added }}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
        {% if match %}
         Group: {{ match.0 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
         Subgroups:
          {{ match.1|default_if_none:"none" }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
         Group Dict: {{ match.2|default_if_none:"none" }}
        {% else %}
         No matches found.
        {% endif %}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    {% endfor %}
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
 {% else %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>You have no entries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>&lt;a href="{% url "insert" %}"&gt;Insert new entry.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
 {% endif %}
{% endblock page-content %}

{% block footer %}
 {% include "entries/footer.html" %}
{% endblock footer %}</code></pre></div><p>It may take you a while to get used to the template language, but really, all there is to it is the creation of a table using a <code class="literal">for</code> loop. We start by checking whether there are any entries and, if so, we create a table. There are two columns, one for <code class="literal">Entry</code>, and the other for the match.</p><p>In the <code class="literal">Entry</code> column, we <span>display</span><a class="indexterm" id="id326160884"></a> the <code class="literal">Entry</code> object (apart from the user), and in the <code class="literal">Matches</code> column, we display that three-tuple we created in the <code class="literal">EntryListView</code>. Note that to access the attributes of an object, we use the same dot syntax we use in Python, for example <code class="literal">{{ entry.pattern }}</code> or <code class="literal">{{ entry.test_string }}</code>, and so on.</p><p>When dealing with lists and tuples, we cannot access items using the square brackets syntax, so we use the dot one as well (<code class="literal">{{ match.0 }}</code> is equivalent to <code class="literal">match[0]</code>, and so on). We also use a filter, through the pipe (<code class="literal">|</code>) operator to display a custom value if a match is <code class="literal">None</code>.</p><p>The Django template language (which is not properly Python) is kept simple for a precise reason. If you find yourself limited by the language, it means you're probably trying to do something in the template that should actually be done in the view, where that logic is more pertinent.</p><p>Allow me to show you a couple of screenshots of the <span class="emphasis"><em>list</em></span> and <span class="emphasis"><em>insert</em></span> templates. This is what the list of entries looks like for my father:</p><div class="mediaobject"><img src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/e6be1ce6-2ec6-4936-b949-555b5733a391.png"/></div><p>Note how the use of the cycle tag alternates the background color of the rows from white to light gray. Those classes are defined in the <code class="literal">main.css</code> file.</p><p>The <code class="literal">Entry</code> insertion page is smart enough to provide a few different scenarios. When you land on it at first, it presents you with just an empty form. If you fill it in correctly, it will display a nice message for you (see the following picture). However, if you fail to fill in both fields, it will <span>display</span><a class="indexterm" id="id326161193"></a> an error message before them, alerting you that those fields are required.</p><p>Note also the custom footer, which includes both a link to the entries list and a link to the home page:</p><div class="mediaobject"><img src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/0c62e8cd-c456-4598-b766-d56b75e620b5.png"/></div><p>And that's it! You can play around with the CSS styles if you want. Download the code for the book and have fun exploring and extending this project. Add something else to the model, create and apply a migration, play with the templates, there's lots to do!</p><p>Django is a very powerful framework, and offers so much more than what I've been able to show you in this chapter, so you should definitely check it out. The <span>beauty</span><a class="indexterm" id="id326171390"></a> of it is that Django is Python, so reading its source code is a very useful exercise.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><div></div><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_14_ch14lvl1sec102_a-regex-website_files/adsct" type="text/javascript"></script></body></html>