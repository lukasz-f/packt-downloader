<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Second approach – a GUI application - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec92/second-approach-a-gui-application" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec92/second-approach-a-gui-application" rel="canonical"/>
<meta content="There are several libraries that write GUI applications in Python. The most famous ones are Tkinter, wxPython, PyGTK, and PyQt." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Second approach – a GUI application - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="There are several libraries that write GUI applications in Python. The most famous ones are Tkinter, wxPython, PyGTK, and PyQt." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec92/second-approach-a-gui-application" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Second approach – a GUI application - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="There are several libraries that write GUI applications in Python. The most famous ones are Tkinter, wxPython, PyGTK, and PyQt." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Second approach – a GUI application - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "There are several libraries that write GUI applications in Python. The most famous ones are Tkinter, wxPython, PyGTK, and PyQt.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch12lvl1sec92"></a>Second approach – a GUI application</h2></div></div><hr/></div><p>There are several <span>libraries</span><a class="indexterm" id="id325919206"></a> that write GUI applications in Python. The most famous ones are <span class="strong"><strong>Tkinter</strong></span>, <span class="strong"><strong>wxPython</strong></span>, <span class="strong"><strong>PyGTK</strong></span>, and <span class="strong"><strong>PyQt</strong></span>. They all offer a wide range of <span>tools</span><a class="indexterm" id="id325916620"></a> and <span>widgets</span><a class="indexterm" id="id325916614"></a> that you can <span>use</span><a class="indexterm" id="id325916606"></a> to compose a GUI application.</p><p>The one I'm going to use for the rest of this chapter is Tkinter. <span class="strong"><strong>Tkinter</strong></span> stands for <span class="strong"><strong>Tk interface</strong></span> and it is the standard Python interface to the Tk GUI toolkit. Both Tk and Tkinter are <span>available</span><a class="indexterm" id="id325916586"></a> on most Unix platforms, macOS X, as well as on Windows systems.</p><p>Let's make sure that <code class="literal">tkinter</code> is installed properly on your system by running this command:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>$ python -m tkinter</strong></span></code></pre></div><p>It should open a dialog window, demonstrating a simple <code class="literal">Tk</code> interface. If you can see that, we're good to go. However, if it doesn't work, please search for <code class="literal">tkinter</code> in the Python <span>official</span><a class="indexterm" id="id325915838"></a> documentation (<a class="ulink" href="https://docs.python.org/3.7/library/tkinter.html" target="_blank">https://docs.python.org/3.7/library/tkinter.html</a>). You will find several links to resources that will help you get up and running with it.</p><p>We're going to make a very simple GUI application that basically mimics the behavior of the script we saw in the first part of this chapter. We won't add the ability to save JPGs or PNGs singularly, but after you've gone through this chapter, you should be able to play with the code and put that feature back in by yourself.</p><p>So, this is what we're aiming for:</p><div class="mediaobject"><img src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/bfb1054d-a89e-4a20-b636-16994fea137a.png"/></div><p>Gorgeous, isn't it? As you can see, it's a very simple interface (this is how it should look on a mac). There is a frame (that is, a container) for the <strong class="userinput"><code>URL</code></strong> field and the <strong class="userinput"><code>Fetch info</code></strong> button, another frame for the <span class="strong"><strong>Listbox</strong></span> (<strong class="userinput"><code>Content</code></strong>) to hold the image names and the radio button to control the way we save them, and finally there is a <strong class="userinput"><code>Scrape!</code></strong> button at the bottom. We also have a status bar, which shows us some information.</p><p>In order to get this layout, we could just <span>place</span><a class="indexterm" id="id325699139"></a> all the widgets on a root window, but that would make the layout logic quite messy and unnecessarily complicated. So, instead, we will divide the space using frames and place the widgets in those frames. This way we will achieve a much nicer result. So, this is the draft for the layout:</p><div class="mediaobject"><img src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/91ce86d5-aba7-43e1-905f-7750a29930d6.png"/></div><p>We have a <span class="strong"><strong>Root Window</strong></span>, which is the main window of the application. We divide it into two rows, the first one in which we place the <span class="strong"><strong>Main Frame</strong></span>, and the second one in which we place the <span class="strong"><strong>Status Frame</strong></span> (which will hold the status bar text). The <span class="strong"><strong>Main Frame</strong></span> is subsequently divided into three rows. In the first one, we place the <span class="strong"><strong>URL Frame</strong></span>, which holds the <span class="strong"><strong>URL</strong></span> widgets. In the second one, we place the <span class="strong"><strong>Img Frame</strong></span>, which will hold the <span class="strong"><strong>Listbox</strong></span> and the <span class="strong"><strong>Radio Frame</strong></span>, which will host a label and the radio button widgets. And finally we have the third one, which will just hold the <span class="strong"><strong>Scrape</strong></span> button.</p><p>In order to lay out frames and widgets, we will use a layout manager, called <span class="strong"><strong>grid</strong></span>, that <span>simply</span><a class="indexterm" id="id325891822"></a> divides up the space into rows and columns, as in a matrix.</p><p>Now, all the code I'm going to write comes from the <code class="literal">guiscrape.py</code> module, so I won't repeat its name for each snippet, to save space. The module is logically divided into three sections, not <span>unlike</span><a class="indexterm" id="id325891875"></a> the script version: imports, layout logic, and business logic. We're going to analyze them line by line, in three chunks.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec145"></a>The imports</h3></div></div></div><p>Imports are like in the script version, except we've lost <code class="literal">argparse</code>, which is no <span>longer</span><a class="indexterm" id="id325891894"></a> needed, and we have added two lines:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># guiscrape.py
from tkinter import * 
from tkinter import ttk, filedialog, messagebox 
...</code></pre></div><p>The first line is quite common practice when dealing with <code class="literal">tkinter</code>, although in general it is bad practice to import using the <code class="literal">*</code> syntax<span class="emphasis"><em>.</em></span> You can incur in name collisions and, if the module is too big, importing everything would be expensive.</p><p>After that, we import <code class="literal">ttk</code>, <code class="literal">filedialog</code>, and <code class="literal">messagebox</code> explicitly, following the conventional approach used with this library. <code class="literal">ttk</code> is the new set of styled widgets. They behave basically like the old ones, but are capable of drawing themselves correctly according to the style your OS is set on, which is nice.</p><p>The rest of the imports (omitted) is what we need in order to carry out the task you know well by now. Note that there is nothing we need to install with <code class="literal">pip</code> in this second part; we already have everything we need.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec146"></a>The layout logic</h3></div></div></div><p>I'm going to paste it chunk by <span>chunk</span><a class="indexterm" id="id325905354"></a> so that I can explain it easily to you. You'll see how all those pieces we talked about in the layout draft are arranged and glued together. What I'm about to paste, as we did in the script before, is the final part of the <code class="literal">guiscrape.py</code> module. We'll leave the middle part, the business logic, for last:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2">if __name__ == "__main__":
    _root = Tk()
    _root.title('Scrape app')</code></pre></div><p>As you know by now, we only want to execute the logic when the module is run directly, so that first line shouldn't surprise you.</p><p>In the last two lines, we set up the main window, which is an instance of the <code class="literal">Tk</code> class. We instantiate it and give it a title. Note that I use the prepending underscore technique for all the names of the <code class="literal">tkinter</code> objects, in order to avoid potential collisions with names in the business logic. I just find it cleaner like this, but you're allowed to disagree:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3">    _mainframe = ttk.Frame(_root, padding='5 5 5 5')
    _mainframe.grid(row=0, column=0, sticky=(E, W, N, S))</code></pre></div><p>Here, we set up the <span class="strong"><strong>Main Frame</strong></span>. It's a <code class="literal">ttk.Frame</code> instance. We set <code class="literal">_root</code> as its parent, and give it some <code class="literal">padding</code>. The <code class="literal">padding</code> is a measure in pixels of how much space should be inserted between the inner content and the borders in order to let our layout breathe a little, otherwise we have a <span class="emphasis"><em>sardine effect</em></span>, where widgets are packed too tightly.</p><p>The second line is more interesting. We place this <code class="literal">_mainframe</code> on the first <code class="literal">row</code> (<code class="literal">0</code>) and first <code class="literal">column</code> (<code class="literal">0</code>) of the parent object (<code class="literal">_root</code>). We also say that this frame needs to extend itself in each direction by using the <code class="literal">sticky</code> argument with all four cardinal directions. If you're wondering where they came from, it's the <code class="literal">from tkinter import *</code> magic that brought them to us:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4">    _url_frame = ttk.LabelFrame(
        _mainframe, text='URL', padding='5 5 5 5')
    _url_frame.grid(row=0, column=0, sticky=(E, W))
    _url_frame.columnconfigure(0, weight=1)
    _url_frame.rowconfigure(0, weight=1)</code></pre></div><p>Next, we start by placing the <span class="strong"><strong>URL Frame</strong></span> down. This time, the <span>parent</span><a class="indexterm" id="id326448006"></a> object is <code class="literal">_mainframe</code>, as you will recall from our draft. This is not just a simple <code class="literal">Frame</code>, it's actually a <code class="literal">LabelFrame</code>, which means we can set the text argument and expect a rectangle to be drawn around it, with the content of the text argument written in the top-left part of it (check out the previous picture if it helps). We position this frame at (<code class="literal">0</code>, <code class="literal">0</code>), and say that it should expand to the left and to the right. We don't need the other two directions.</p><p>Finally, we use <code class="literal">rowconfigure</code> and <code class="literal">columnconfigure</code> to make sure it behaves correctly, should it need to resize. This is just a formality in our present layout:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5">    _url = StringVar()
    _url.set('http://localhost:8000')
    _url_entry = ttk.Entry(
        _url_frame, width=40, textvariable=_url)
    _url_entry.grid(row=0, column=0, sticky=(E, W, S, N), padx=5)
    _fetch_btn = ttk.Button(
        _url_frame, text='Fetch info', command=fetch_url)
    _fetch_btn.grid(row=0, column=1, sticky=W, padx=5)</code></pre></div><p>Here, we have the code to lay out the URL textbox and the <code class="literal">_fetch</code> button. A textbox in this environment is called <code class="literal">Entry</code>. We instantiate it as usual, setting <code class="literal">_url_frame</code> as its parent and giving it a width. Also, and this is the most interesting part, we set the <code class="literal">textvariable</code> argument to be <code class="literal">_url</code>. <code class="literal">_url</code> is a <code class="literal">StringVar</code>, which is an object that is now connected to <code class="literal">Entry</code> and will be used to manipulate its content. Therefore, we don't modify the text in the <code class="literal">_url_entry</code> instance directly, but by accessing <code class="literal">_url</code>. In this case, we call the <code class="literal">set</code> method on it to set the initial value to the URL of our local web page.</p><p>We position <code class="literal">_url_entry</code> at (<code class="literal">0</code>, <code class="literal">0</code>), setting all four cardinal directions for it to stick to, and we also set a bit of extra padding on the left and right edges using <code class="literal">padx</code>, which adds padding on the <span class="emphasis"><em>x</em></span>-axis (horizontal). On the other hand, <code class="literal">pady</code> takes care of the vertical direction.</p><p>By now, you should get that every time you call the <code class="literal">.grid</code> method on an object, we're basically telling the grid layout manager to place that object somewhere, according to rules that we specify as arguments in the <code class="literal">grid()</code> call.</p><p>Similarly, we set up and place the <code class="literal">_fetch</code> button. The only interesting parameter is <code class="literal">command=fetch_url</code>. This means that when we click this button, we call the <code class="literal">fetch_url</code> function. This <span>technique</span><a class="indexterm" id="id325677137"></a> is called <span class="strong"><strong>callback</strong></span>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6">    _img_frame = ttk.LabelFrame(
        _mainframe, text='Content', padding='9 0 0 0')
    _img_frame.grid(row=1, column=0, sticky=(N, S, E, W))</code></pre></div><p>This is what we called <span class="strong"><strong>Img Frame</strong></span> in the <span>layout</span><a class="indexterm" id="id325677158"></a> draft. It is placed on the second row of its parent <code class="literal">_mainframe</code>. It will hold the <span class="strong"><strong>Listbox</strong></span> and the <span class="strong"><strong>Radio Frame</strong></span>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7">    _images = StringVar()
    _img_listbox = Listbox(
        _img_frame, listvariable=_images, height=6, width=25)
    _img_listbox.grid(row=0, column=0, sticky=(E, W), pady=5)
    _scrollbar = ttk.Scrollbar(
        _img_frame, orient=VERTICAL, command=_img_listbox.yview)
    _scrollbar.grid(row=0, column=1, sticky=(S, N), pady=6)
    _img_listbox.configure(yscrollcommand=_scrollbar.set)</code></pre></div><p>This is probably the most interesting bit of the whole layout logic. As we did with <code class="literal">_url_entry</code>, we need to drive the contents of <code class="literal">Listbox</code> by tying it to an <code class="literal">_images</code> variable. We set up <code class="literal">Listbox</code> so that <code class="literal">_img_frame</code> is its parent, and <code class="literal">_images</code> is the variable it's tied to. We also pass some dimensions.</p><p>The interesting bit comes from the <code class="literal">_scrollbar</code> instance. Note that, when we instantiate it, we set its command to <code class="literal">_img_listbox.yview</code>. This is the first half of the contract between <code class="literal">Listbox</code> and <code class="literal">Scrollbar</code>. The other half is provided by the <code class="literal">_img_listbox.configure</code> method, which sets <code class="literal">yscrollcommand=_scrollbar.set</code>.</p><p>By providing this reciprocal bond, when we scroll on <code class="literal">Listbox</code>, <code class="literal">Scrollbar</code> will move accordingly and vice versa, when we operate <code class="literal">Scrollbar</code>, <code class="literal">Listbox</code> will scroll accordingly:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8">    _radio_frame = ttk.Frame(_img_frame)
    _radio_frame.grid(row=0, column=2, sticky=(N, S, W, E))</code></pre></div><p>We place the <span class="strong"><strong>Radio Frame</strong></span>, ready to be populated. Note that <code class="literal">Listbox</code> is occupying (<code class="literal">0</code>, <code class="literal">0</code>) on <code class="literal">_img_frame</code>, <code class="literal">Scrollbar</code> (<code class="literal">0</code>, <code class="literal">1</code>), and therefore <code class="literal">_radio_frame</code> will go in (<code class="literal">0</code>, <code class="literal">2</code>):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9">    _choice_lbl = ttk.Label(
        _radio_frame, text="Choose how to save images")
    _choice_lbl.grid(row=0, column=0, padx=5, pady=5)
    _save_method = StringVar()
    _save_method.set('img')
    _img_only_radio = ttk.Radiobutton(
        _radio_frame, text='As Images', variable=_save_method,
        value='img')
    _img_only_radio.grid(
        row=1, column=0, padx=5, pady=2, sticky=W)
    _img_only_radio.configure(state='normal')
    _json_radio = ttk.Radiobutton(
        _radio_frame, text='As JSON', variable=_save_method,
        value='json')
    _json_radio.grid(row=2, column=0, padx=5, pady=2, sticky=W)</code></pre></div><p>Firstly, we place the label, and we give it some padding. Note that the label and radio buttons are children of <code class="literal">_radio_frame</code>.</p><p>As for the <code class="literal">Entry</code> and <code class="literal">Listbox</code> objects, <code class="literal">Radiobutton</code> is also driven by a bond to an external variable, which I called <code class="literal">_save_method</code>. Each <code class="literal">Radiobutton</code> instance sets a value argument, and by <span>checking</span><a class="indexterm" id="id325910786"></a> the value on <code class="literal">_save_method</code>, we know
which button is selected:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10">    _scrape_btn = ttk.Button(
        _mainframe, text='Scrape!', command=save)
    _scrape_btn.grid(row=2, column=0, sticky=E, pady=5)</code></pre></div><p>On the third row of <code class="literal">_mainframe</code> we place the <span class="strong"><strong>Scrape</strong></span> button. Its <code class="literal">command</code> is <code class="literal">save</code>, which saves the images to be listed in <code class="literal">Listbox</code>, after we have successfully parsed a web page:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11">    _status_frame = ttk.Frame(
        _root, relief='sunken', padding='2 2 2 2')
    _status_frame.grid(row=1, column=0, sticky=(E, W, S))
    _status_msg = StringVar()
    _status_msg.set('Type a URL to start scraping...')
    _status = ttk.Label(
        _status_frame, textvariable=_status_msg, anchor=W)
    _status.grid(row=0, column=0, sticky=(E, W))</code></pre></div><p>We end the layout section by placing down the status frame, which is a simple <code class="literal">ttk.Frame</code>. To give it a little status bar effect, we set its <code class="literal">relief</code> property to <code class="literal">'sunken'</code> and give it a uniform padding of two pixels. It needs to stick to the left, right, and bottom parts of the <code class="literal">_root</code> window, so we set its <code class="literal">sticky</code> attribute to <code class="literal">(E, W, S)</code>.</p><p>We then place a label in it and, this time, we tie it to a <code class="literal">StringVar</code> object, because we will have to modify it every time we want to update the status bar text. You should be acquainted with this technique by now.</p><p>Finally, on the last line, we run the application by calling the <code class="literal">mainloop</code> method on the <code class="literal">Tk</code> instance:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12">    _root.mainloop()</code></pre></div><p>Please remember that all these instructions are placed under the <code class="literal">if __name__ == "__main__":</code> clause in the original script.</p><p>As you can see, the code to design our GUI application is not hard. Granted, at the beginning, you have to play around a little bit. Not everything will work out perfectly at the first attempt, but I <span>promise</span><a class="indexterm" id="id325974669"></a> you it's very easy and you can find plenty of tutorials on the web. Let's now get to the interesting bit, the business logic.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec147"></a>The business logic</h3></div></div></div><p>We'll <span>analyze</span><a class="indexterm" id="id325974685"></a> the business logic of the GUI application in three chunks. There is the fetching logic, the saving logic, and the alerting logic.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch12lvl3sec50"></a>Fetching the web page</h4></div></div></div><p>Let's start with the code to <span>fetch</span><a class="indexterm" id="id325974700"></a> the page and images:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13">config = {}

def fetch_url():
    url = _url.get()
    config['images'] = []
    _images.set(())  # initialised as an empty tuple
    try:
        page = requests.get(url)
    except requests.RequestException as err:
        _sb(str(err))
    else:
        soup = BeautifulSoup(page.content, 'html.parser')
        images = fetch_images(soup, url)
        if images:
            _images.set(tuple(img['name'] for img in images))
            _sb('Images found: {}'.format(len(images)))
        else:
            _sb('No images found')
        config['images'] = images

def fetch_images(soup, base_url):
    images = []
    for img in soup.findAll('img'):
        src = img.get('src')
        img_url = f'{base_url}/{src}'
        name = img_url.split('/')[-1]
        images.append(dict(name=name, url=img_url))
    return images</code></pre></div><p>First of all, let me explain that <code class="literal">config</code> dictionary. We need some way of passing data between the GUI application and the business logic. Now, instead of polluting the global namespace with many different variables, my personal preference is to have a single dictionary that holds all the objects we need to pass back and forth, so that the global namespace isn't clogged up with all those names, and we have a single, clean, easy way of knowing where all the objects that are needed by our application are.</p><p>In this simple example, we'll just populate the <code class="literal">config</code> dictionary <span>with</span><a class="indexterm" id="id325974724"></a> the images we fetch from the page, but I wanted to show you the technique so that you have at least one example. This technique comes from my experience with JavaScript. When you code a web page, you often import several different libraries. If each of these cluttered the global namespace with all sorts of variables, there might be issues in making everything work, because of name clashes and variable overriding.</p><p>So, it's much better to leave the global namespace as clean as we can. In this case, I find that using one <code class="literal">config</code> variable is more than acceptable.</p><p>The <code class="literal">fetch_url</code> function is quite similar to what we did in the script. First, we get the <code class="literal">url</code> value by calling <code class="literal">_url.get()</code>. Remember that the <code class="literal">_url</code> object is a <code class="literal">StringVar</code> instance that is tied to the <code class="literal">_url_entry</code> object, which is an <code class="literal">Entry</code>. The text field you see on the GUI is the <code class="literal">Entry</code>, but the text behind the scenes is the value of the <code class="literal">StringVar</code> object.</p><p>By calling <code class="literal">get()</code> on <code class="literal">_url</code>, we get the value of the text, which is displayed in <code class="literal">_url_entry</code>.</p><p>The next step is to prepare <code class="literal">config['images']</code> to be an empty list, and to empty the <code class="literal">_images</code> variable, which is tied to <code class="literal">_img_listbox</code>. This, of course, has the effect of cleaning up all the items in <code class="literal">_img_listbox</code>.</p><p>After this preparation step, we can try to fetch the page, using the same <code class="literal">try</code>/<code class="literal">except</code> logic we adopted in the script at the beginning of the chapter. The one difference is the action we take if things go wrong. We call <code class="literal">_sb(str(err))</code>. <code class="literal">_sb</code> is a helper function whose code we'll see shortly. Basically, it sets the text in the status bar for us. Not a good name, right? I had to explain its behavior to you–food for thought.</p><p>If we can fetch the page, then we <span>create</span><a class="indexterm" id="id325983553"></a> the <code class="literal">soup</code> instance, and fetch the images from it. The logic of <code class="literal">fetch_images</code> is exactly the same as the one explained before, so I won't repeat myself here.</p><p>If we have images, using a quick tuple comprehension (which is actually a generator expression fed to a tuple constructor) we feed the <code class="literal">_images</code> as <code class="literal">StringVar</code> and this has the effect of populating our <code class="literal">_img_listbox</code> with all the image names. Finally, we update the status bar.</p><p>If there were no images, we still update the status bar, and at the end of the function, regardless of how many images were found, we update <code class="literal">config['images']</code> to hold the <code class="literal">images</code> list. In this way, we'll be able to access the images from other functions by inspecting <code class="literal">config['images']</code> without having to pass that list around.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch12lvl3sec51"></a>Saving the images</h4></div></div></div><p>The logic to save the images is <span>pretty</span><a class="indexterm" id="id325983597"></a> straightforward. Here it is:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14">def save():
    if not config.get('images'):
        _alert('No images to save')
        return

    if _save_method.get() == 'img':
        dirname = filedialog.askdirectory(mustexist=True)
        _save_images(dirname)
    else:
        filename = filedialog.asksaveasfilename(
            initialfile='images.json',
            filetypes=[('JSON', '.json')])
        _save_json(filename)

def _save_images(dirname):
    if dirname and config.get('images'):
        for img in config['images']:
            img_data = requests.get(img['url']).content
            filename = os.path.join(dirname, img['name'])
            with open(filename, 'wb') as f:
                f.write(img_data)
        _alert('Done')

def _save_json(filename):
    if filename and config.get('images'):
        data = {}
        for img in config['images']:
            img_data = requests.get(img['url']).content
            b64_img_data = base64.b64encode(img_data)
            str_img_data = b64_img_data.decode('utf-8')
            data[img['name']] = str_img_data

        with open(filename, 'w') as ijson:
            ijson.write(json.dumps(data))
        _alert('Done')</code></pre></div><p>When the user clicks the <span><strong class="userinput"><code>Scrape!</code></strong></span> button, the <code class="literal">save</code> function is called using the callback mechanism.</p><p>The first thing that this function does is check <span>whether</span><a class="indexterm" id="id325983830"></a> there are actually any images to be saved. If not, it alerts the user about it, using another helper function, <code class="literal">_alert</code>, whose code we'll see shortly. No further action is performed if there are no images.</p><p>On the other hand, if the <code class="literal">config['images']</code> list is not empty, <code class="literal">save</code> acts as a dispatcher, and it calls <code class="literal">_save_images</code> or <code class="literal">_save_json</code>, according to which value is held by <code class="literal">_same_method</code>. Remember, this variable is tied to the radio buttons, therefore we expect its value to be either <code class="literal">'img'</code> or <code class="literal">'json'</code>.</p><p>This dispatcher is a bit different from the one in the script. According to which method we have selected, a different action must be taken.</p><p>If we want to save the images as images, we need to ask the user to choose a directory. We do this by calling <code class="literal">filedialog.askdirectory</code> and assigning the result of the call to the <code class="literal">dirname</code> variable. This opens up a nice dialog window that asks us to choose a directory. The directory we choose must exist, as specified by the way we call the method. This is done so that we don't have to write code to deal with a potentially missing directory when saving the files.</p><p>Here's how this dialog should look on a mac:</p><div class="mediaobject"><img src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/9e803b01-f2ce-438d-9df2-e92b22f475d8.png"/></div><p>If we cancel the operation, <code class="literal">dirname</code> will be set to <code class="literal">None</code>.</p><p>Before finishing <span>analyzing</span><a class="indexterm" id="id325983936"></a> the logic in <code class="literal">save</code>, let's quickly go through <code class="literal">_save_images</code>.</p><p>It's very similar to the version we had in the script so just note that, at the beginning, in order to be sure that we actually have something to do, we check on both <code class="literal">dirname</code> and the presence of at least one image in <code class="literal">config['images']</code>.</p><p>If that's the case, it means we have at least one image to save and the path for it, so we can proceed. The logic to save the images has already been explained. The one thing we do differently this time is join the directory (which means the complete path) to the image name, by means of <code class="literal">os.path.join</code>. </p><p>At the end of <code class="literal">_save_images</code>, if we saved at least one image, we alert the user that we're done.</p><p>Let's go back now to the other branch in <code class="literal">save</code>. This branch is executed when the user selects the <strong class="userinput"><code>As JSON</code></strong> radio button before pressing the <strong class="userinput"><code>Scrape</code></strong> button. In this case, we want to save a file; therefore, we cannot just ask for a directory. We want to give the user the ability to choose a filename as well. Hence, we fire up a different dialog: <code class="literal">filedialog.asksaveasfilename</code>.</p><p>We pass an initial filename, which is proposed to the user–they have the ability to change it if they don't like it. Moreover, because we're saving a JSON file, we're forcing the user to use the correct extension by passing the <code class="literal">filetypes</code> argument. It is a list, with any number of two-tuples <span class="emphasis"><em>(description, extension),</em></span> that runs the logic of the dialog.</p><p>Here's how this dialog should look on a macOS:</p><div class="mediaobject"><img src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/8f878ab1-fb7c-4d26-9b11-331aaa4015d6.png"/></div><p>Once we have chosen a place and a filename, we can proceed with the saving logic, which is the same as it was in the previous script. We create a JSON object from a Python dictionary (<code class="literal">data</code>) that we <span>populate</span><a class="indexterm" id="id325998177"></a> with key/value pairs made by the <code class="literal">images</code> name and Base64-encoded content.</p><p>In <code class="literal">_save_json</code> as well, we have a little check at the beginning that makes sure that we don't proceed unless we have a filename and at least one image to save. This ensures that if the user presses the <strong class="userinput"><code>Cancel</code></strong> button, nothing bad happens.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch12lvl3sec52"></a>Alerting the user</h4></div></div></div><p>Finally, let's see the <span>alerting</span><a class="indexterm" id="id325998203"></a> logic. It's extremely simple:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15">def _sb(msg):
    _status_msg.set(msg)

def _alert(msg):
    messagebox.showinfo(message=msg)</code></pre></div><p>That's it! To change the status bar message all we need to do is to access <code class="literal">_status_msg</code><code class="literal">StringVar</code>, as it's tied to the <code class="literal">_status</code> label.</p><p>On the other hand, if we want to show the user a more visible message, we can fire up a message box. Here's how it should look on a mac:</p><div class="mediaobject"><img src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/9720e18d-ab2a-4180-86f8-c34c8c142826.png"/></div><p>The <code class="literal">messagebox</code> object can also be used to warn the user (<code class="literal">messagebox.showwarning</code>) or to signal an error (<code class="literal">messagebox.showerror</code>). But it can also be used to provide dialogs that ask us whether we're sure we want to proceed or if we really want to delete that file, and so on.</p><p>If you inspect <code class="literal">messagebox</code> by simply printing out what <code class="literal">dir(messagebox)</code> returns, you'll find methods such as <code class="literal">askokcancel</code>, <code class="literal">askquestion</code>, <code class="literal">askretrycancel</code>, <code class="literal">askyesno</code>, and <code class="literal">askyesnocancel</code>, as well as a set of constants to verify the response of the user, such as <code class="literal">CANCEL</code>, <code class="literal">NO</code>, <code class="literal">OK</code>, <code class="literal">OKCANCEL</code>, <code class="literal">YES</code>, and <code class="literal">YESNOCANCEL</code>. You can <span>compare</span><a class="indexterm" id="id325998876"></a> these to the user's choice so that you know the next action to execute when the dialog closes.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec148"></a>How can we improve the application?</h3></div></div></div><p>Now that you're accustomed to the <span>fundamentals</span><a class="indexterm" id="id325998891"></a> of designing a GUI application, I'd like to give you some suggestions on how to make ours better.</p><p>We can start with the code quality. Do you think this code is good enough, or would you improve it? If so, how? I would test it, and make sure it's robust and caters for all the various scenarios that a user might create by clicking around on the application. I would also make sure the behavior is what I would expect when the website we're scraping is down for any reason.</p><p>Another thing that we could improve is the naming. I have prudently named all the components with a leading underscore, both to highlight their somewhat <span class="emphasis"><em>private</em></span> nature, and to avoid having name clashes with the underlying objects they are linked to. But in retrospect, many of those components could use a better name, so it's really up to you to refactor until you find the form that suits you best. You could start by giving a better name to the <code class="literal">_sb</code> function!</p><p>For what concerns the user interface, you could try to resize the main application. See what happens? The whole content stays exactly where it is. Empty space is added if you expand, or the whole widgets set disappears gradually if you shrink. This behavior isn't exactly nice, therefore one quick solution could be to make the root window fixed (that is, unable to resize).</p><p>Another thing that you could do to improve the application is to add the same functionality we had in the script, to save only PNGs or JPGs. In order to do this, you could place a combo box somewhere, with three values: All, PNGs, JPGs, or something similar. The user should be able to select one of those options before saving the files.</p><p>Even better, you could change the declaration of <code class="literal">Listbox</code> so that it's possible to select multiple images at the same time, and only the selected ones will be saved. If you manage to do this (it's not as hard as it seems, believe me), then you should consider presenting the <code class="literal">Listbox</code> a bit better, maybe providing alternating background colors for the rows.</p><p>Another nice thing you could add is a <span>button</span><a class="indexterm" id="id325998925"></a> that opens up a dialog to select a file. The file must be one of the JSON files the application can produce. Once selected, you could run some logic to reconstruct the images from their Base64-encoded version. The logic to do this is very simple, so here's an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16">with open('images.json', 'r') as f:
    data = json.loads(f.read())

for (name, b64val) in data.items():
    with open(name, 'wb') as f:
        f.write(base64.b64decode(b64val))</code></pre></div><p>As you can see, we need to open <code class="literal">images.json</code> in read mode, and grab the <code class="literal">data</code> dictionary. Once we have it, we can loop through its items, and save each image with the Base64-decoded content. I'll leave it up to you to tie this logic to a button in the application.</p><p>Another cool feature that you could add is the ability to open up a preview pane that shows any image you select from <code class="literal">Listbox</code>, so that the user can take a peek at the images before deciding to save them.</p><p>Finally, one last suggestion for this application is to add a menu. Maybe even a simple menu with <strong class="userinput"><code>File</code></strong> and <strong class="userinput"><code>?</code></strong> to provide the usual <strong class="userinput"><code>Help</code></strong> or <strong class="userinput"><code>About</code></strong>. Just for fun. Adding <span>menus</span><a class="indexterm" id="id326012179"></a> is not that complicated; you can add text, keyboard shortcuts, images, and so on.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:12:ch12lvl1sec92:second-approach-a-gui-application:Second approach – a GUI application - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>