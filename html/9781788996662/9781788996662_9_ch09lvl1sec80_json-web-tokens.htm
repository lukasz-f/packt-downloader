<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">JSON Web Tokens - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/9/ch09lvl1sec80/json-web-tokens" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/9/ch09lvl1sec80/json-web-tokens" rel="canonical"/>
<meta content="A JSON Web Token, or JWT, is a JSON-based open standard for creating tokens that assert some number of claims." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="JSON Web Tokens - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="A JSON Web Token, or JWT, is a JSON-based open standard for creating tokens that assert some number of claims." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/9/ch09lvl1sec80/json-web-tokens" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="JSON Web Tokens - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="A JSON Web Token, or JWT, is a JSON-based open standard for creating tokens that assert some number of claims." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/script.js"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/profitwell.js"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/inferredEvents.js"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/445429252334850"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/fbevents.js"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/gtm.js"></script><script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/f(1).txt"></script><script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "JSON Web Tokens - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "A JSON Web Token, or JWT, is a JSON-based open standard for creating tokens that assert some number of claims.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch09lvl1sec80"></a>JSON Web Tokens</h2></div></div><hr/></div><p>A <span class="strong"><strong>JSON Web Token</strong></span>, or <span class="strong"><strong>JWT</strong></span>, is a JSON-based <span>open</span><a class="indexterm" id="id326632867"></a> standard for creating tokens that assert some number of claims. You can learn all about this technology on the website (<a class="ulink" href="https://jwt.io/" target="_blank">https://jwt.io/</a>). In a nutshell, this type of token is comprised of three sections, separated by a dot, in the format <span class="emphasis"><em>A.B.C</em></span>. <span class="emphasis"><em>B</em></span> is the payload, which is where we put the data and the claims. <span class="emphasis"><em>C</em></span> is the signature, which is used to verify the validity of the token, and <span class="emphasis"><em>A</em></span> is the algorithm used to compute the signature. <span class="emphasis"><em>A</em></span>, <span class="emphasis"><em>B</em></span>, and <span class="emphasis"><em>C</em></span> are all encoded with a URL safe Base64 encoding (which I'll refer to as Base64URL).</p><p>Base64 is a very popular binary-to-text encoding scheme that represents binary data in an ASCII string format by translating it into a radix-64 representation. The radix-64 representation uses the letters <span class="emphasis"><em>A-Z</em></span>, <span class="emphasis"><em>a-z</em></span>, and the digits <span class="emphasis"><em>0-9</em></span>, plus the two symbols <span class="emphasis"><em>+</em></span> and <span class="emphasis"><em>/</em></span> for a grand total of 64 symbols altogether. Therefore, not surprisingly, the Base64 alphabet is made up of these 64 symbols. Base64 is used, for example, to encode images attached in an email. It happens seamlessly, so the vast majority of people are completely oblivious of this fact.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note69"></a>Note</h3><p>The reason why a JWT is encoded using Base64URL is because of the characters <code class="literal">+</code> and <code class="literal">/</code>, which in a URL context mean space, and path separator, respectively. Therefore in the URL safe version, they are replaced with <code class="literal">-</code> and <code class="literal">_</code>. Moreover, any padding character (<code class="literal">=</code>), which is normally used in Base64, is stripped out, as this too has a specific meaning within a URL. </p></div><p>The way this type of token works is therefore slightly different than what we are used to when we work with hashes. In fact, the information that the token carries is always visible. You just need to decode <span class="emphasis"><em>A</em></span> and <span class="emphasis"><em>B</em></span> to get the algorithm and the payload. However, the security lies in part <span class="emphasis"><em>C</em></span>, which is a HMAC hash of the token. If you try to modify the <span class="emphasis"><em>B</em></span> part by editing the payload, encoding it back to Base64, and replacing it in the token, the signature won't match any more, and therefore the token will be invalid.</p><p>This means that we can build a payload with claims such as <span class="emphasis"><em>logged in as admin</em></span>, or something along those lines, and as long as the token is valid, we know we can trust that that user is actually logged in as an admin.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip70"></a>Note</h3><p>When dealing with JWTs, you want to make sure you have researched how to handle them safely. Things like not accepting unsigned tokens, or restricting the list of algorithms you use to encode and decode, as well as other security measures, are very important and you should take the time to investigate and learn them.
For this part of the code, you will have to have the <code class="literal">PyJWT</code> and <code class="literal">cryptography</code> Python packages installed. As always, you will find them in the requirements of the source code of this book.</p></div><p>Let's start with a simple example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># tok.py
import jwt

data = {'payload': 'data', 'id': 123456789}

token = jwt.encode(data, 'secret-key')
data_out = jwt.decode(token, 'secret-key')
print(token)
print(data_out)</code></pre></div><p>We define the <code class="literal">data</code> payload, which <span>contains</span><a class="indexterm" id="id326402651"></a> an ID and some payload data. Then, we create a token using the <code class="literal">jwt.encode</code> function, which takes at least the payload and a secret key, which is used to compute the signature. The default algorithm used to calculate the token is <code class="literal">HS256</code>. Let's see the output:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>$ python tok.py</strong></span>
<span class="strong"><strong>b'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXlsb2FkIjoiZGF0YSIsImlkIjoxMjM0NTY3ODl9.WFRY-uoACMoNYX97PXXjEfXFQO1rCyFCyiwxzOVMn40'</strong></span>
<span class="strong"><strong>{'payload': 'data', 'id': 123456789}</strong></span></code></pre></div><p>So, as you can see, the token is a binary string of Base64URL-encoded pieces of data. We have called <code class="literal">jwt.decode</code>, providing the correct secret key. Had we done otherwise, the decoding would have broken.</p><p>Sometimes, you might want to be able to inspect the content of the token without verifying it. You can do so by simply calling <code class="literal">decode</code> this way:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># tok.py
jwt.decode(token, verify=False)</code></pre></div><p>This is useful, for example, when values in the token payload are needed to recover the secret key, but that technique is quite advanced so I won't be spending time on it in this context. Instead, let's see how we can specify a different algorithm for computing the signature:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"># tok.py
token512 = jwt.encode(data, 'secret-key', algorithm='HS512')
data_out = jwt.decode(token512, 'secret-key', algorithm='HS512')
print(data_out)</code></pre></div><p>The output is our original payload dictionary. In case you want to allow more than one algorithm in the decoding phase, you can even specify a list of them, instead of only one.</p><p>Now, while you are free to put whatever you want in the token payload, there are some claims that have been standardized, and they enable you to have a great deal of control over the token.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch09lvl2sec112"></a>Registered claims</h3></div></div></div><p>At the time of <span>writing</span><a class="indexterm" id="id326632613"></a> this book, these are the registered claims:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><code class="literal">iss</code>: The <span class="emphasis"><em>issuer</em></span> of the token</li><li style="list-style-type: disc"><code class="literal">sub</code>: The <span class="emphasis"><em>subject</em></span> information about the party this token is carrying information about</li><li style="list-style-type: disc"><code class="literal">aud</code>: The <span class="emphasis"><em>audience</em></span> for the token</li><li style="list-style-type: disc"><code class="literal">exp</code>: The <span class="emphasis"><em>expiration time</em></span>, after which the token is considered to be invalid</li><li style="list-style-type: disc"><code class="literal">nbf</code>: The <span class="emphasis"><em>not before (time)</em></span>, or the time before which the token is considered to be not valid yet</li><li style="list-style-type: disc"><code class="literal">iat</code>: The time at which the token was <span class="emphasis"><em>issued</em></span></li><li style="list-style-type: disc"><code class="literal">jti</code>: The token <span class="emphasis"><em>ID</em></span></li></ul></div><p>Claims can also be categorized as <span>public</span><a class="indexterm" id="id326678086"></a> or private:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><span class="strong"><strong>Private</strong></span>: Are those that are defined by users (consumers and producers) of the JWTs. In other words, these are ad hoc claims used for a particular case. As such, care must be taken to prevent collisions.</li><li style="list-style-type: disc"><span class="strong"><strong>Public</strong></span>: Are claims that are either registered with the IANA JSON Web Token Claims Registry (a registry where users can register their claims and thus prevent collisions), or named using a collision resistant name (for instance, by prepending a namespace to its name).</li></ul></div><p>To learn all about claims, please refer to the official website. Now, let's see a couple of code examples involving a subset of these claims.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch09lvl3sec28"></a>Time-related claims</h4></div></div></div><p>Let's see how we <span>might</span><a class="indexterm" id="id326678117"></a> use the claims related to time:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># claims_time.py
from datetime import datetime, timedelta
from time import sleep
import jwt

iat = datetime.utcnow()
nfb = iat + timedelta(seconds=1)
exp = iat + timedelta(seconds=3)
data = {'payload': 'data', 'nbf': nfb, 'exp': exp, 'iat': iat}

def decode(token, secret):
    print(datetime.utcnow().time().isoformat())
    try:
        print(jwt.decode(token, secret))
    except (
        jwt.ImmatureSignatureError, jwt.ExpiredSignatureError
    ) as err:
        print(err)
        print(type(err))

secret = 'secret-key'
token = jwt.encode(data, secret)

decode(token, secret)
sleep(2)
decode(token, secret)
sleep(2)
decode(token, secret)</code></pre></div><p>In this example, we set the issued at (<code class="literal">iat</code>) claim to the current UTC time (<span class="strong"><strong>UTC</strong></span> stands for <span class="strong"><strong>Universal Time Coordinated</strong></span>). We then set the <span>not</span><a class="indexterm" id="id326678149"></a> before (<code class="literal">nbf</code>) and expire time (<code class="literal">exp</code>) at <code class="literal">1</code> and <code class="literal">3</code> seconds from now, respectively. We then defined a decode helper function that reacts to a token not being valid yet, or being expired, by trapping the appropriate exceptions, and then we call it three times, interspersed by two calls to sleep. This way, we will try to decode the token when it's not valid yet, then when it's valid, and finally when it's already expired. This function also prints a useful timestamp before attempting decryption. Let's see how it goes (blank lines have been added for readability):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>$ python claims_time.py</strong></span>
<span class="strong"><strong>14:04:13.469778</strong></span>
<span class="strong"><strong>The token is not yet valid (nbf)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.ImmatureSignatureError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>

<span class="strong"><strong>14:04:15.475362</strong></span>
<span class="strong"><strong>{'payload': 'data', 'nbf': 1522591454, 'exp': 1522591456, 'iat': 1522591453}</strong></span>

<span class="strong"><strong>14:04:17.476948</strong></span>
<span class="strong"><strong>Signature has expired</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.ExpiredSignatureError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span></code></pre></div><p>As you can see, it all executed as expected. We get nice, descriptive messages from the exceptions, and get the original payload back when the token is actually valid.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch09lvl3sec29"></a>Auth-related claims</h4></div></div></div><p>Let's see another quick <span>example</span><a class="indexterm" id="id326678765"></a> involving the issuer (<code class="literal">iss</code>) and audience (<code class="literal">aud</code>) claims. The code is conceptually very similar to the previous example, and we're going to exercise it in the same way:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># claims_auth.py
import jwt

data = {'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}
secret = 'secret-key'
token = jwt.encode(data, secret)

def decode(token, secret, issuer=None, audience=None):
    try:
        print(jwt.decode(
            token, secret, issuer=issuer, audience=audience))
    except (
        jwt.InvalidIssuerError, jwt.InvalidAudienceError
    ) as err:
        print(err)
        print(type(err))

decode(token, secret)
# not providing the issuer won't break
decode(token, secret, audience='learn-python')
# not providing the audience will break
decode(token, secret, issuer='fab')
# both will break
decode(token, secret, issuer='wrong', audience='learn-python')
decode(token, secret, issuer='fab', audience='wrong')

decode(token, secret, issuer='fab', audience='learn-python')</code></pre></div><p>As you can see, this time, we have specified <code class="literal">issuer</code> and <code class="literal">audience</code>. It turns out that if we don't provide the issuer when decoding the token, it won't cause the decoding to break. However, providing the wrong issuer will actually break decoding. On the other hand, both failing to provide the audience, or providing the wrong audience, will break decoding.</p><p>As in the previous example, I have written a custom decode function that reacts to the appropriate exceptions. See if you can <span>follow</span><a class="indexterm" id="id326678936"></a> along with the calls and the relative output that follows (I'll help with some blank lines):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong>$ python claims_auth.py</strong></span>
<span class="strong"><strong>Invalid audience</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.InvalidAudienceError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>

<span class="strong"><strong>{'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}</strong></span>

<span class="strong"><strong>Invalid audience</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.InvalidAudienceError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>

<span class="strong"><strong>Invalid issuer</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.InvalidIssuerError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>

<span class="strong"><strong>Invalid audience</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'jwt.exceptions.InvalidAudienceError'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>

<span class="strong"><strong>{'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}</strong></span></code></pre></div><p>Now, let's see one final example for a more complex use case.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch09lvl2sec113"></a>Using asymmetric (public-key) algorithms</h3></div></div></div><p>Sometimes, using a <span>shared</span><a class="indexterm" id="id326679345"></a> secret is not the best option. In those cases, it might be useful to adopt a different technique. In this example, we are going to create a token (and decode it) using a pair of RSA keys.</p><p>Public key cryptography, or asymmetrical cryptography, is any cryptographic system that uses pairs of keys: public keys which may be disseminated widely, and private keys which are known only to the owner. If you are interested in learning more about this topic, please see the end of this chapter for recommendations.</p><p>Now, let's create two pairs of keys. One pair will have no password, and one will. To create them, I'm going to <span>use</span><a class="indexterm" id="id326679358"></a> the <code class="literal">ssh-keygen</code> utils from OpenSSH (<a class="ulink" href="https://www.ssh.com/ssh/keygen/" target="_blank">https://www.ssh.com/ssh/keygen/</a>). In the folder where my scripts for this chapter are, I created an <code class="literal">rsa</code> subfolder. Within it, run the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>$ ssh-keygen -t rsa</strong></span></code></pre></div><p>Give the name <code class="literal">key</code> to the path (it will be saved in the current folder), and simply hit the <span class="emphasis"><em>Enter</em></span> key when asked for the password. When done, do the same again, but this time use the name <code class="literal">keypwd</code> for the key, and give it a password. The one I chose is the classic <code class="literal">Password123</code>. When you are done, change back to the <code class="literal">ch9</code> folder, and run this code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"># token_rsa.py
import jwt
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

data = {'payload': 'data'}

def encode(data, priv_filename, priv_pwd=None, algorithm='RS256'):
    with open(priv_filename, 'rb') as key:
        private_key = serialization.load_pem_private_key(
            key.read(),
            password=priv_pwd,
            backend=default_backend()
        )
    return jwt.encode(data, private_key, algorithm=algorithm)

def decode(data, pub_filename, algorithm='RS256'):
    with open(pub_filename, 'rb') as key:
        public_key = key.read()
    return jwt.decode(data, public_key, algorithm=algorithm)

# no pwd
token = encode(data, 'rsa/key')
data_out = decode(token, 'rsa/key.pub')
print(data_out)

# with pwd
token = encode(data, 'rsa/keypwd', priv_pwd=b'Password123')
data_out = decode(token, 'rsa/keypwd.pub')
print(data_out)</code></pre></div><p>In the previous example, we defined a couple of custom functions to encode and decode tokens using private/public keys. As you can see in the signature of the <code class="literal">encode</code> function, we are using the <code class="literal">RS256</code> algorithm this time. We need to open the private key file by using the special <code class="literal">load_pem_private_key</code> function, which allows us to specify a content, password, and backend. <code class="literal">.pem</code> is the name of the <span>format</span><a class="indexterm" id="id325644472"></a> in which our keys have been created. If you take a look at those files, you will probably recognize them, since they are quite popular.</p><p>The logic is pretty straightforward, and I would encourage you to think about at least one use case where this technique might be more suitable than using a shared key.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_9_ch09lvl1sec80_json-web-tokens_files/adsct" type="text/javascript"></script></body></html>