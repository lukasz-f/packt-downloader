<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Input parameters - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/4/ch04lvl1sec42/input-parameters" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/4/ch04lvl1sec42/input-parameters" rel="canonical"/>
<meta content="At the beginning of this chapter, we saw that a function can take input parameters." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Input parameters - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="At the beginning of this chapter, we saw that a function can take input parameters." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/4/ch04lvl1sec42/input-parameters" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Input parameters - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="At the beginning of this chapter, we saw that a function can take input parameters." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Input parameters - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "At the beginning of this chapter, we saw that a function can take input parameters.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch04lvl1sec42"></a>Input parameters</h2></div></div><hr/></div><p>At the beginning of this chapter, we <span>saw</span><a class="indexterm" id="id325916620"></a> that a function can take input parameters. Before we delve into all possible type of parameters, let's make sure you have a clear understanding of what passing a parameter to a function means. There are three key points to keep in mind:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">Argument-passing is nothing more than assigning an object to a local variable name</li><li style="list-style-type: disc">Assigning an object to an argument name inside a function doesn't affect the caller</li><li style="list-style-type: disc">Changing a mutable object argument in a function affects the caller</li></ul></div><p>Let's look at an example for each of these points.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch04lvl2sec58"></a>Argument-passing</h3></div></div></div><p>Take a look at the following code. We declare a name, <code class="literal">x</code>, in the global scope, then we declare a function, <code class="literal">func(y)</code>, and finally we call it, passing <code class="literal">x</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># key.points.argument.passing.py
x = 3
def func(y):
    print(y)
func(x)  # prints: 3</code></pre></div><p>When <code class="literal">func</code> is called with <code class="literal">x</code>, within its <span>local</span><a class="indexterm" id="id325916570"></a> scope, a name, <code class="literal">y</code>, is created, and it's pointed to the same object <code class="literal">x</code> is pointing to. This is better clarified by the following figure (don't worry about <strong class="userinput"><code>Python 3.3</code></strong>, this is a feature that hasn't changed):</p><div class="mediaobject"><img src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/8a09fa5b-a791-44e6-8512-1d750da7d38e.jpg"/></div><p>The right part of the preceding figure depicts the state of the program when execution has reached the end, after <code class="literal">func</code> has returned (<code class="literal">None</code>). Take a look at the <strong class="userinput"><code>Frames</code></strong> column, and note that we have two names, <code class="literal">x</code> and <code class="literal">func</code>, in the global namespace (<strong class="userinput"><code>Global frame)</code></strong>, pointing to an <code class="literal">int</code> (with a value of <span class="strong"><strong>3</strong></span>) and to a <code class="literal">function</code> object, respectively. Right beneath it, in the rectangle titled <code class="literal">func</code>, we can see the function's local namespace, in which only one name has been defined: <code class="literal">y</code>. Because we have called <code class="literal">func</code> with <code class="literal">x</code> (line <span class="strong"><strong>5</strong></span> in the left part of the figure), <code class="literal">y</code> is pointing to the same object that <code class="literal">x</code> is pointing to. This is what happens under the hood when an argument is passed to a function. If we had used the name <code class="literal">x</code> instead of <code class="literal">y</code> in the function definition, things would have been exactly the same (only maybe a bit confusing at first), there would be a local <code class="literal">x</code> in the function, and a global <code class="literal">x</code> outside, as we saw in the <span class="emphasis"><em>Scopes and name resolution</em></span> section previously in this chapter.</p><p>So, in a nutshell, what really happens is that the function creates, in its local scope, the names defined as arguments and, when we call it, we basically tell Python which objects those names must be pointed toward.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch04lvl2sec59"></a>Assignment to argument names doesn't affect the caller</h3></div></div></div><p>This is something that can be tricky to <span>understand</span><a class="indexterm" id="id325888055"></a> at first, so let's look at an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># key.points.assignment.py
x = 3
def func(x):
    x = 7  # defining a local x, not changing the global one
func(x)
print(x)  # prints: 3</code></pre></div><p>In the preceding code, when the <code class="literal">x = 7</code> line is executed, within the local scope of the <code class="literal">func</code> function, the name, <code class="literal">x</code>, is pointed to an integer with a value of <code class="literal">7</code>, leaving the global <code class="literal">x</code> unaltered.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch04lvl2sec60"></a>Changing a mutable affects the caller</h3></div></div></div><p>This is the final point, and it's very important because Python apparently behaves differently with mutables (just apparently, though). Let's look at an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># key.points.mutable.py
x = [1, 2, 3]
def func(x):
    x[1] = 42  # this affects the caller!

func(x)
print(x)  # prints: [1, 42, 3]</code></pre></div><p>Wow, we actually changed the <span>original</span><a class="indexterm" id="id325891820"></a> object! If you think about it, there is nothing weird in this behavior. The <code class="literal">x</code> name in the function is set to point to the caller object by the function call and within the body of the function, we're not changing <code class="literal">x</code>, in that we're not changing its reference, or, in other words, we are not changing the object <code class="literal">x</code> is pointing to. We're accessing that object's element at position 1, and changing its value.</p><p>Remember point #2 under the <span class="emphasis"><em>Input parameters</em></span> section: <span class="emphasis"><em>Assigning an object to an argument name within a function doesn't affect the caller</em></span>. If that is clear to you, the following code should not be surprising:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"># key.points.mutable.assignment.py
x = [1, 2, 3]
def func(x):
<span class="strong"><strong>x[1] = 42</strong></span>  # this changes the caller!
<span class="strong"><strong>x = 'something else'</strong></span>  # this points x to a new string object

func(x)
print(x)  # still prints: [1, 42, 3]</code></pre></div><p>Take a look at the two lines I have highlighted. At first, like before, we just access the caller object again, at position 1, and change its value to number <code class="literal">42</code>. Then, we reassign <code class="literal">x</code> to point to the <code class="literal">'something else'</code> string. This leaves the caller unaltered and, in fact, the output is the same as that of the previous snippet.</p><p>Take your time to play around with this concept, and experiment with prints and calls to the <code class="literal">id</code> function until everything is clear in your mind. This is one of the key aspects of Python and it must be very clear, otherwise you risk introducing subtle bugs into your code. Once again, the Python Tutor website (<a class="ulink" href="http://www.pythontutor.com/" target="_blank">http://www.pythontutor.com/</a>) will help you a lot by giving you a visual representation of these concepts.</p><p>Now that we have a good understanding of input parameters and how they behave, let's see how we can specify them.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch04lvl2sec61"></a>How to specify input parameters</h3></div></div></div><p>There are five different <span>ways</span><a class="indexterm" id="id325915725"></a> of specifying input parameters:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">Positional arguments</li><li style="list-style-type: disc">Keyword arguments</li><li style="list-style-type: disc">Variable positional arguments</li><li style="list-style-type: disc">Variable keyword arguments</li><li style="list-style-type: disc">Keyword-only arguments</li></ul></div><p>Let's look at them one by one.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec5"></a>Positional arguments</h4></div></div></div><p>Positional <span>arguments</span><a class="indexterm" id="id325915810"></a> are read from left to right and they are the most <span>common</span><a class="indexterm" id="id325915816"></a> type of arguments:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># arguments.positional.py
def func(a, b, c):
    print(a, b, c)
func(1, 2, 3)  # prints: 1 2 3</code></pre></div><p>There is not much else to say. They can be as numerous as you want and they are assigned by position. In the function call, <code class="literal">1</code> comes first, <code class="literal">2</code> comes second, and <code class="literal">3</code> comes third, therefore they are assigned to <code class="literal">a</code>, <code class="literal">b</code>, and <code class="literal">c</code>, respectively.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec6"></a>Keyword arguments and default values</h4></div></div></div><p><span class="strong"><strong>Keyword arguments</strong></span> are <span>assigned</span><a class="indexterm" id="id326636792"></a> by keyword <span>using</span><a class="indexterm" id="id326636800"></a> the <code class="literal">name=value</code> syntax:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># arguments.keyword.py
def func(a, b, c):
    print(a, b, c)
func(a=1, c=2, b=3)  # prints: 1 3 2</code></pre></div><p>Keyword arguments are matched by name, even when they don't respect the definition's original position (we'll see that there is a limitation to this behavior later, when we mix and match different types of arguments).</p><p>The counterpart of keyword arguments, on <span>the</span><a class="indexterm" id="id326636912"></a> definition side, is <span class="strong"><strong>default values</strong></span>. The syntax is the same, <code class="literal">name=value</code>, and allows us to not have to provide an argument if we are happy with the given default:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># arguments.default.py
def func(a, b=4, c=88):
    print(a, b, c)

func(1)  # prints: 1 4 88
func(b=5, a=7, c=9)  # prints: 7 5 9
func(42, c=9)  # prints: 42 4 9
func(42, 43, 44)  # prints: 42, 43, 44</code></pre></div><p>The are two things to notice, which are very important. First of all, you cannot specify a default argument on the left of a positional one. Second, note how in the examples, when an argument is passed without using the <code class="literal">argument_name=value</code> syntax, it must be the first one in the list, and it is always assigned to <code class="literal">a</code>. Notice also that passing values in a positional fashion still works, and follows the function signature order (last line of the example).</p><p>Try and scramble those arguments and see what happens. Python error messages are very good at telling you what's wrong. So, for example, if you tried something such as this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># arguments.default.error.py
def func(a, b=4, c=88):
    print(a, b, c)
func(b=1, c=2, 42)  # positional argument after keyword one</code></pre></div><p>You would get the following error:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>$ python arguments.default.error.py</strong></span>
<span class="strong"><strong>  File "arguments.default.error.py", line 4</strong></span>
<span class="strong"><strong>    func(b=1, c=2, 42) # positional argument after keyword one</strong></span>
<span class="strong"><strong>                  ^</strong></span>
<span class="strong"><strong>SyntaxError: positional argument follows keyword argument</strong></span></code></pre></div><p>This informs you that you've called the function incorrectly.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec7"></a>Variable positional arguments</h4></div></div></div><p>Sometimes you may want to pass a <span>variable</span><a class="indexterm" id="id325640893"></a> number of <span>positional</span><a class="indexterm" id="id325640900"></a> arguments to a function, and Python provides you with the ability to do it. Let's look at a very common use case, the <code class="literal">minimum</code> function. This is a function that calculates the minimum of its input values:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"># arguments.variable.positional.py
def minimum(*n):
    # print(type(n))  # n is a tuple
    if n:  # explained after the code
        mn = n[0]
        for value in n[1:]:
            if value &lt; mn:
                mn = value
        print(mn)

minimum(1, 3, -7, 9)  # n = (1, 3, -7, 9) - prints: -7
minimum()             # n = () - prints: nothing</code></pre></div><p>As you can see, when we specify a parameter prepending a <code class="literal">*</code> to its name, we are telling Python that that parameter will be collecting a variable number of positional arguments, according to how the function is called. Within the function, <code class="literal">n</code> is a tuple. Uncomment <code class="literal">print(type(n))</code> to see for yourself and play around with it for a bit.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note37"></a>Note</h3><p>Have you noticed how we checked whether <code class="literal">n</code> wasn't empty with a simple <code class="literal">if n:</code>? This is because collection objects evaluate to <code class="literal">True</code> when non-empty, and otherwise <code class="literal">False</code> in Python. This is true for tuples, sets, lists, dictionaries, and so on.
One other thing to note is that we may want to throw an error when we call the function with no arguments, instead of silently doing nothing. In this context, we're not concerned about making this function robust, but in understanding variable positional arguments.</p></div><p>Let's make another example to show you two things that, in my experience, are confusing to those who are new to this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10"># arguments.variable.positional.unpacking.py
def func(*args):
    print(args)

values = (1, 3, -7, 9)
func(values)   # equivalent to: func((1, 3, -7, 9))
func(*values)  # equivalent to: func(1, 3, -7, 9)</code></pre></div><p>Take a good look at the last two lines of the preceding example. In the first one, we call <code class="literal">func</code> with one argument, a four-elements tuple. In the second example, by using the <code class="literal">*</code> syntax, we're doing <span>something</span><a class="indexterm" id="id325648678"></a> called <span class="strong"><strong>unpacking</strong></span>, which means that the four-elements tuple is unpacked, and the function is called with four arguments: <code class="literal">1, 3, -7, 9</code>.</p><p>This behavior is part of the magic Python does to allow you to do amazing things when calling functions dynamically.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec8"></a>Variable keyword arguments</h4></div></div></div><p>Variable keyword arguments are very <span>similar</span><a class="indexterm" id="id325648701"></a> to variable <span>positional</span><a class="indexterm" id="id325648708"></a> arguments. The only difference is the syntax (<code class="literal">**</code> instead of <code class="literal">*</code>) and that they are collected in a dictionary. Collection and unpacking work in the same way, so let's look at an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11"># arguments.variable.keyword.py
def func(**kwargs):
    print(kwargs)

# All calls equivalent. They print: {'a': 1, 'b': 42}
func(a=1, b=42)
func(**{'a': 1, 'b': 42})
func(**dict(a=1, b=42))</code></pre></div><p>All the calls are equivalent in the preceding example. You can see that adding a <code class="literal">**</code> in front of the parameter name in the function definition tells Python to use that name to collect a variable number of keyword parameters. On the other hand, when we call the function, we can either pass <code class="literal">name=value</code> arguments explicitly, or unpack a dictionary using the same <code class="literal">**</code> syntax.</p><p>The reason why being able to pass a variable number of keyword parameters is so important may not be evident at the moment, so, how about a more realistic example? Let's define a function that connects to a database. We want to connect to a default database by simply calling this function with no parameters. We also want to connect to any other database by passing the function the appropriate arguments. Before you read on, try to spend a couple of minutes figuring out a solution by yourself:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"># arguments.variable.db.py
def connect(**options):
    conn_params = {
        'host': options.get('host', '127.0.0.1'),
        'port': options.get('port', 5432),
        'user': options.get('user', ''),
        'pwd': options.get('pwd', ''),
    }
    print(conn_params)
    # we then connect to the db (commented out)
    # db.connect(**conn_params)

connect()
connect(host='127.0.0.42', port=5433)
connect(port=5431, user='fab', pwd='gandalf')</code></pre></div><p>Note that in the function, we can prepare a dictionary of connection parameters (<code class="literal">conn_params</code>) using default values as fallbacks, allowing them to be overwritten if they are provided in the function call. There are better ways to do this with fewer lines of code, but we're not concerned with that right now. Running the preceding code yields the following result:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"><span class="strong"><strong>$ python arguments.variable.db.py</strong></span>
<span class="strong"><strong>{'host': '127.0.0.1', 'port': 5432, 'user': '', 'pwd': ''}</strong></span>
<span class="strong"><strong>{'host': '127.0.0.42', 'port': 5433, 'user': '', 'pwd': ''}</strong></span>
<span class="strong"><strong>{'host': '127.0.0.1', 'port': 5431, 'user': 'fab', 'pwd': 'gandalf'}</strong></span></code></pre></div><p>Note the correspondence between the function calls and the output. Notice how default values are overridden according to what was passed to the function.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec9"></a>Keyword-only arguments</h4></div></div></div><p>Python 3 allows for a new <span>type</span><a class="indexterm" id="id325673561"></a> of parameter: the <span class="strong"><strong>keyword-only</strong></span> parameter. We are going to study them only briefly as their use cases are not that frequent. There are two ways of <span>specifying</span><a class="indexterm" id="id325673573"></a> them, either after the variable positional arguments, or after a bare <code class="literal">*</code>. Let's see an example of both:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"># arguments.keyword.only.py
def kwo(*a, c):
    print(a, c)

kwo(1, 2, 3, c=7)  # prints: (1, 2, 3) 7
kwo(c=4)  # prints: () 4
# kwo(1, 2)  # breaks, invalid syntax, with the following error
# TypeError: kwo() missing 1 required keyword-only argument: 'c'

def kwo2(a, b=42, *, c):
    print(a, b, c)

kwo2(3, b=7, c=99)  # prints: 3 7 99
kwo2(3, c=13)  # prints: 3 42 13
# kwo2(3, 23)  # breaks, invalid syntax, with the following error
# TypeError: kwo2() missing 1 required keyword-only argument: 'c'</code></pre></div><p>As anticipated, the function, <code class="literal">kwo</code>, takes a variable number of positional arguments (<code class="literal">a</code>) and a keyword-only one, <code class="literal">c</code>. The results of the calls are straightforward and you can uncomment the third call to see what error Python returns.</p><p>The same applies to the function, <code class="literal">kwo2</code>, which differs from <code class="literal">kwo</code> in that it takes a positional argument, <code class="literal">a</code>, a keyword argument, <code class="literal">b</code>, and then a keyword-only one, <code class="literal">c</code>. You can uncomment the third call to see the error.</p><p>Now that you know how to specify different types of input parameters, let's see how you can combine them in function definitions.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec10"></a>Combining input parameters</h4></div></div></div><p>You can combine <span>input</span><a class="indexterm" id="id325902084"></a> parameters, as long as you follow these ordering rules:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">When defining a function, normal positional arguments come first (<code class="literal">name</code>), then any default arguments (<code class="literal">name=value</code>), then the variable positional arguments (<code class="literal">*name</code> or simply <code class="literal">*</code>), then any keyword-only arguments (either <code class="literal">name</code> or <code class="literal">name=value</code> form is good), and then any variable keyword arguments (<code class="literal">**name</code>).</li></ul></div><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">On the other hand, when calling a function, arguments must be given in the following order: positional arguments first (<code class="literal">value</code>), then any combination of keyword arguments (<code class="literal">name=value</code>), variable positional arguments (<code class="literal">*name</code>), and then variable keyword arguments (<code class="literal">**name</code>).</li></ul></div><p>Since this can be a bit tricky when left hanging in the theoretical world, let's look at a couple of quick examples:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15"># arguments.all.py
def func(a, b, c=7, *args, **kwargs):
    print('a, b, c:', a, b, c)
    print('args:', args)
    print('kwargs:', kwargs)

func(1, 2, 3, *(5, 7, 9), **{'A': 'a', 'B': 'b'})
func(1, 2, 3, 5, 7, 9, A='a', B='b')  # same as previous one</code></pre></div><p>Note the order of the <span>parameters</span><a class="indexterm" id="id325902901"></a> in the function definition, and that the two calls are equivalent. In the first one, we're using the unpacking operators for iterables and dictionaries, while in the second one we're using a more explicit syntax. The execution of this yields the following (I printed only the result of one call, the other one being the same):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16"><span class="strong"><strong>$ python arguments.all.py</strong></span>
<span class="strong"><strong>a, b, c: 1 2 3</strong></span>
<span class="strong"><strong>args: (5, 7, 9)</strong></span>
<span class="strong"><strong>kwargs: {'A': 'a', 'B': 'b'}</strong></span></code></pre></div><p>Let's now look at an example with keyword-only arguments:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="17"># arguments.all.kwonly.py
def func_with_kwonly(a, b=42, *args, <span class="strong"><strong>c, d=256</strong></span>, **kwargs):
    print('a, b:', a, b)
    print('c, d:', c, d)
    print('args:', args)
    print('kwargs:', kwargs)

# both calls equivalent
func_with_kwonly(3, 42, c=0, d=1, *(7, 9, 11), e='E', f='F')
func_with_kwonly(3, 42, *(7, 9, 11), c=0, d=1, e='E', f='F')</code></pre></div><p>Note that I have highlighted the keyword-only arguments in the function declaration. They come after the <code class="literal">*args</code> variable positional argument, and it would be the same if they came right after a single<code class="literal">*</code>(in which case there wouldn't be a variable positional argument). The execution of this yields the following (I printed only the result of one call):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="18"><span class="strong"><strong>$ python arguments.all.kwonly.py</strong></span>
<span class="strong"><strong>a, b: 3 42</strong></span>
<span class="strong"><strong>c, d: 0 1</strong></span>
<span class="strong"><strong>args: (7, 9, 11)</strong></span>
<span class="strong"><strong>kwargs: {'e': 'E', 'f': 'F'}</strong></span></code></pre></div><p>One other thing to note is the names I gave to the variable positional and keyword arguments. You're free to choose differently, but be aware that <code class="literal">args</code> and <code class="literal">kwargs</code> are the conventional names given to these parameters, at least generically.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec11"></a>Additional unpacking generalizations</h4></div></div></div><p>One of the recent new features, introduced in Python 3.5, is the ability to extend the iterable (<code class="literal">*</code>) and dictionary (<code class="literal">**</code>) unpacking operators to allow unpacking in more positions, an arbitrary number of times, and in additional circumstances. I'll present you with an example <span>concerning</span><a class="indexterm" id="id325963991"></a> function calls:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="19"># additional.unpacking.py
def additional(*args, **kwargs):
    print(args)
    print(kwargs)

args1 = (1, 2, 3)
args2 = [4, 5]
kwargs1 = dict(option1=10, option2=20)
kwargs2 = {'option3': 30}
additional(*args1, *args2, **kwargs1, **kwargs2)</code></pre></div><p>In the previous example, we defined a simple function that prints its input arguments, <code class="literal">args</code> and <code class="literal">kwargs</code>. The new feature lies in the way we call this function. Notice how we can unpack multiple iterables and dictionaries, and they are correctly coalesced under <code class="literal">args</code> and <code class="literal">kwargs</code>. The reason why this feature is important is that it allows us not to have to merge <code class="literal">args1</code> with <code class="literal">args2</code>, and <code class="literal">kwargs1</code> with <code class="literal">kwargs2</code> in the code. Running the code produces:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="20"><span class="strong"><strong>$ python additional.unpacking.py</strong></span>
<span class="strong"><strong>(1, 2, 3, 4, 5)</strong></span>
<span class="strong"><strong>{'option1': 10, 'option2': 20, 'option3': 30}</strong></span></code></pre></div><p>Please refer to <span>PEP</span><a class="indexterm" id="id325972515"></a> 448 (<a class="ulink" href="https://www.python.org/dev/peps/pep-0448/" target="_blank">https://www.python.org/dev/peps/pep-0448/</a>) to learn the full extent of this new feature and see further examples.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch04lvl3sec12"></a>Avoid the trap! Mutable defaults</h4></div></div></div><p>One thing to be very aware of with Python is that default values are created at <code class="literal">def</code> time, therefore, subsequent calls to the same function will possibly behave <span>differently</span><a class="indexterm" id="id325972537"></a> according to the mutability of their default values. Let's look at an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="21"># arguments.defaults.mutable.py
def func(a=[], b={}):
    print(a)
    print(b)
    print('#' * 12)
    a.append(len(a))  # this will affect a's default value
    b[len(a)] = len(a)  # and this will affect b's one

func()
func()
func()</code></pre></div><p>Both parameters have mutable default values. This means that, if you affect those objects, any modification will stick around in subsequent function calls. See if you can understand the output of those calls:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="22"><span class="strong"><strong>$ python arguments.defaults.mutable.py</strong></span>
<span class="strong"><strong>[]</strong></span>
<span class="strong"><strong>{}</strong></span>
<span class="strong"><strong>############</strong></span>
<span class="strong"><strong>[0]</strong></span>
<span class="strong"><strong>{1: 1}</strong></span>
<span class="strong"><strong>############</strong></span>
<span class="strong"><strong>[0, 1]</strong></span>
<span class="strong"><strong>{1: 1, 2: 2}</strong></span>
<span class="strong"><strong>############</strong></span></code></pre></div><p>It's interesting, isn't it? While this behavior may seem very weird at first, it actually makes sense, and it's very handy, for example, when using memoization techniques (Google an example of that, if you're interested). Even more interesting is what happens when, between the calls, we introduce one that doesn't use defaults, such as this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="23"># arguments.defaults.mutable.intermediate.call.py
func()
func(a=[1, 2, 3], b={'B': 1})
func()</code></pre></div><p>When we run this code, this is the output:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="24"><span class="strong"><strong>$ python arguments.defaults.mutable.intermediate.call.py</strong></span>
<span class="strong"><strong>[]</strong></span>
<span class="strong"><strong>{}</strong></span>
<span class="strong"><strong>############</strong></span>
<span class="strong"><strong>[1, 2, 3]</strong></span>
<span class="strong"><strong>{'B': 1}</strong></span>
<span class="strong"><strong>############</strong></span>
<span class="strong"><strong>[0]</strong></span>
<span class="strong"><strong>{1: 1}</strong></span>
<span class="strong"><strong>############</strong></span></code></pre></div><p>This output shows us that the defaults are retained even if we call the function with other values. One question that comes to mind is, how do I get a fresh empty value every time? Well, the convention is the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="25"># arguments.defaults.mutable.no.trap.py
def func(a=None):
    if a is None:
        a = []
    # do whatever you want with `a` ...</code></pre></div><p>Note that, by using the preceding technique, if <code class="literal">a</code> isn't passed when calling the function, you always get a brand new, empty list.</p><p>Okay, enough with the input, let's look at the other side of the coin, the output.</p></div></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:4:ch04lvl1sec42:input-parameters:Input parameters - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>