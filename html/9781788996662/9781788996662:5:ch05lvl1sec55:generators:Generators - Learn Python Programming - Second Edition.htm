<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Generators - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec55/generators" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec55/generators" rel="canonical"/>
<meta content="Generators are very powerful tool that Python gifts us with." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Generators - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Generators are very powerful tool that Python gifts us with." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/5/ch05lvl1sec55/generators" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Generators - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Generators are very powerful tool that Python gifts us with." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Generators - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Generators are very powerful tool that Python gifts us with.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch05lvl1sec55"></a>Generators</h2></div></div><hr/></div><p><span class="strong"><strong>Generators</strong></span> are very powerful tool that <span>Python</span><a class="indexterm" id="id326651512"></a> gifts us with. They are based on the concepts of <span class="emphasis"><em>iteration</em></span>, as we said before, and they allow for coding patterns that combine elegance with efficiency.</p><p>Generators are of two types:</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><span class="strong"><strong>Generator functions</strong></span>: These are very <span>similar</span><a class="indexterm" id="id326651485"></a> to regular functions, but instead of returning results through return statements, they use yield, which allows them to suspend and resume their state between each call</li><li style="list-style-type: disc"><span class="strong"><strong>Generator expressions</strong></span>: These are very <span>similar</span><a class="indexterm" id="id326651462"></a> to the <code class="literal">list</code> comprehensions we've seen in this chapter, but instead of returning a list they return an object that produces results one by one</li></ul></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec71"></a>Generator functions</h3></div></div></div><p>Generator functions behave like <span>regular</span><a class="indexterm" id="id326651418"></a> functions in all respects, except for one difference. Instead of collecting results and returning them at once, they are automatically turned into iterators that yield results one at a time when you call <code class="literal">next</code> on them. Generator functions are automatically turned into their own iterators by Python.</p><p>This is all very theoretical so, let's make it clear why such a mechanism is so powerful, and then let's see an example.</p><p>Say I asked you to count out loud from 1 to 1,000,000. You start, and at some point I ask you to stop. After some time, I ask you to resume. At this point, what is the minimum information you need to be able to resume correctly? Well, you need to remember the last number you called. If I stopped you after 31,415, you will just go on with 31,416, and so on.</p><p>The point is, you don't need to remember all the numbers you said before 31,415, nor do you need them to be written down somewhere. Well, you may not know it, but you're behaving like a generator already!</p><p>Take a good look at the following code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># first.n.squares.py
def get_squares(n): # classic function approach
    return [x ** 2 for x in range(n)]
print(get_squares(10))

def get_squares_gen(n):  # generator approach
    for x in range(n):
        yield x ** 2  # we yield, we don't return
print(list(get_squares_gen(10)))</code></pre></div><p>The result of the two <code class="literal">print</code> statements will be the same: <code class="literal">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code>. But there is a huge difference between the two functions. <code class="literal">get_squares</code> is a classic function that collects all the squares of numbers in [0, <span class="emphasis"><em>n</em></span>) in a list, and returns it. On the other hand, <code class="literal">get_squares_gen</code> is a generator, and behaves very differently. Each time the interpreter reaches the <code class="literal">yield</code> line, its execution is suspended. The only reason those <code class="literal">print</code> statements return the same result is because we fed <code class="literal">get_squares_gen</code> to the <code class="literal">list</code> constructor, which exhausts the generator completely by asking the next element until a <code class="literal">StopIteration</code> is raised. Let's see this in detail:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># first.n.squares.manual.py
def get_squares_gen(n):
    for x in range(n):
        yield x ** 2

squares = get_squares_gen(4)  # this creates a generator object
print(squares)  # <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span> <span class="token attr-name">object</span> <span class="token attr-name">get_squares_gen</span> <span class="token attr-name">at</span> <span class="token attr-name">0x10dd...</span><span class="token punctuation">&gt;</span></span>
print(next(squares))  # prints: 0
print(next(squares))  # prints: 1
print(next(squares))  # prints: 4
print(next(squares))  # prints: 9
# the following raises StopIteration, the generator is exhausted,
# any further call to next will keep raising StopIteration
print(next(squares))</code></pre></div><p>In the preceding code, each time we call <code class="literal">next</code> on the generator object, we either start it (first <code class="literal">next</code>) or make it resume from the last suspension point (any other <code class="literal">next</code>).</p><p>The first time we call <code class="literal">next</code> on it, we get <code class="literal">0</code>, which is the square of <code class="literal">0</code>, then <code class="literal">1</code>, then <code class="literal">4</code>, then <code class="literal">9</code>, and since the <code class="literal">for</code> loop stops after that (<code class="literal">n</code> is <code class="literal">4</code>), then the generator naturally ends. A classic function would at that point just return <code class="literal">None</code>, but in order to comply with the iteration protocol, a generator will instead raise a <code class="literal">StopIteration</code> exception.</p><p>This explains how a <code class="literal">for</code> loop works. When you call <code class="literal">for k in range(n)</code>, what happens under the hood is that the <code class="literal">for</code> loop gets an <span>iterator</span><a class="indexterm" id="id326305731"></a> out of <code class="literal">range(n)</code> and starts calling <code class="literal">next</code> on it, until <code class="literal">StopIteration</code> is raised, which tells the <code class="literal">for</code> loop that the iteration has reached its end.</p><p>Having this behavior built into every iteration aspect of Python makes generators even more powerful because once we write them, we'll be able to plug them into whatever iteration mechanism we want.</p><p>At this point, you're probably asking yourself why you would want to use a generator instead of a regular function. Well, the title of this chapter should suggest the answer. I'll talk about performances later, so for now let's concentrate on another aspect: sometimes generators allow you to do something that wouldn't be possible with a simple list. For example, say you want to analyze all permutations of a sequence. If the sequence has a length of <span class="emphasis"><em>N</em></span>, then the number of its permutations is <span class="emphasis"><em>N!</em></span>. This means that if the sequence is 10 elements long, the number of permutations is 3,628,800. But a sequence of 20 elements would have 2,432,902,008,176,640,000 permutations. They grow factorially.</p><p>Now imagine you have a classic function that is attempting to calculate all permutations, put them in a list, and return it to you. With 10 elements, it would require probably a few dozen seconds, but for 20 elements there is simply no way that it can be done.</p><p>On the other hand, a generator function will be able to start the computation and give you back the first permutation, then the second, and so on. Of course you won't have the time to parse them all, there are too many, but at least you'll be able to work with some of them.</p><p>Remember when we were talking about the <code class="literal">break</code> statement in <code class="literal">for</code> loops? When we found a number dividing a <span class="emphasis"><em>candidate prime</em></span> we were breaking the loop, and there was no need to go on.</p><p>Sometimes it's exactly the same, only the amount of data you have to iterate over is so huge that you cannot keep it all in memory in a list. In this case, generators are invaluable: they make possible what wouldn't be possible otherwise.</p><p>So, in order to save memory (and time), use generator functions whenever possible.</p><p>It's also worth noting that you can use the return statement in a generator function. It will produce a <code class="literal">StopIteration</code> exception to be raised, effectively ending the iteration. This is extremely important. If a <code class="literal">return</code> statement were actually to make the function return something, it would break the iteration protocol. Python's consistency prevents this, and allows us great ease when coding. Let's see a quick example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># gen.yield.return.py
def geometric_progression(a, q):
    k = 0
    while True:
        result = a * q**k
        if result &lt;= 100000:
            yield result
        else:
            return
        k += 1

for n in geometric_progression(2, 5):
    print(n)</code></pre></div><p>The preceding code yields all terms of the geometric progression, <span class="emphasis"><em>a</em></span>, <span class="emphasis"><em>aq</em></span>, <span class="emphasis"><em>aq<sup>2</sup></em></span>, <span class="emphasis"><em>aq<sup>3</sup></em></span>, .... When the progression produces a term that is greater than <code class="literal">100000</code>, the generator stops (with a <code class="literal">return</code> statement). Running the code produces the following result:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>$ python gen.yield.return.py</strong></span>
<span class="strong"><strong>2</strong></span>
<span class="strong"><strong>10</strong></span>
<span class="strong"><strong>50</strong></span>
<span class="strong"><strong>250</strong></span>
<span class="strong"><strong>1250</strong></span>
<span class="strong"><strong>6250</strong></span>
<span class="strong"><strong>31250</strong></span></code></pre></div><p>The next term <span>would</span><a class="indexterm" id="id326468939"></a> have been <code class="literal">156250</code>, which is too big.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note50"></a>Note</h3><p>Speaking about <code class="literal">StopIteration</code>, as of Python 3.5, the way that exceptions are handled in generators has changed. To understand the implications of the change is probably asking too much of you at this point, so just know that you can read all about it in PEP 479 (<a class="ulink" href="https://legacy.python.org/dev/peps/pep-0479/" target="_blank">https://legacy.python.org/dev/peps/pep-0479/</a>).</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec72"></a>Going beyond next</h3></div></div></div><p>At the beginning of this chapter, I told you that generator objects are based on the iteration protocol. We'll see in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/6" linkend="ch06">Chapter 6</a>, <span class="emphasis"><em>OOP, Decorators, and Iterators</em></span> a complete example of how to write a custom iterator/iterable object. For now, I just want you to understand how <code class="literal">next()</code> works.</p><p>What happens when you call <code class="literal">next(generator)</code> is that you're calling the <code class="literal">generator.__next__()</code> method. Remember, a <span class="strong"><strong>method</strong></span> is just a function that belongs to an object, and objects in Python can have special methods. <code class="literal">__next__()</code> is just one of these and its purpose is to return the next element of the iteration, or to raise <code class="literal">StopIteration</code> when the <span>iteration</span><a class="indexterm" id="id326650082"></a> is over and there are no more elements to return.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note51"></a>Note</h3><p>If you recall, in Python, an object's special methods are also called <span class="strong"><strong>magic methods</strong></span>, or <span class="strong"><strong>dunder</strong></span> (from "double underscore") <span class="strong"><strong>methods</strong></span>.</p></div><p>When we write a generator function, Python automatically transforms it into an object that is very similar to an iterator, and when we call <code class="literal">next(generator)</code>, that call is transformed in <code class="literal">generator.__next__()</code>. Let's revisit the previous example about generating squares:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># first.n.squares.manual.method.py
def get_squares_gen(n):
    for x in range(n):
        yield x ** 2

squares = get_squares_gen(3)
print(squares.__next__())  # prints: 0
print(squares.__next__())  # prints: 1
print(squares.__next__())  # prints: 4
# the following raises StopIteration, the generator is exhausted,
# any further call to next will keep raising StopIteration</code></pre></div><p>The result is exactly as the previous example, only this time instead of using the <code class="literal">next(squares)</code> proxy call, we're directly calling <code class="literal">squares.__next__()</code>.</p><p>Generator objects have also three other methods that allow us to control their behavior: <code class="literal">send</code>, <code class="literal">throw</code>, and <code class="literal">close</code>. <code class="literal">send</code> allows us to <span>communicate</span><a class="indexterm" id="id326651271"></a> a value back to the generator object, while <code class="literal">throw</code> and <code class="literal">close</code>, respectively, allow us to raise an exception within the generator and close it. Their use is quite advanced and I won't be covering them here in detail, but I want to spend a few words on <code class="literal">send</code>, with a simple example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># gen.send.preparation.py
def counter(start=0):
    n = start
    while True:
        yield n
        n += 1

c = counter()
print(next(c))  # prints: 0
print(next(c))  # prints: 1
print(next(c))  # prints: 2</code></pre></div><p>The preceding iterator creates a generator object that will run forever. You can keep calling it, and it will never stop. Alternatively, you can put it in a <code class="literal">for</code> loop, for example, <code class="literal">for n in counter(): ...</code>, and it will go on forever as well. But what if you wanted to stop it at some point? One solution is to use a variable to control the <code class="literal">while</code> loop. Something such as this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># gen.send.preparation.stop.py
stop = False
def counter(start=0):
    n = start
    while not stop:
        yield n
        n += 1

c = counter()
print(next(c))  # prints: 0
print(next(c))  # prints: 1
stop = True
print(next(c))  # raises StopIteration</code></pre></div><p>This will do it. We start with <code class="literal">stop = False</code>, and until we change it to <code class="literal">True</code>, the generator will just keep going, like before. The moment we change stop to <code class="literal">True</code> though, the <code class="literal">while</code> loop will exit, and the next call will raise a <code class="literal">StopIteration</code> exception. This trick works, but I don't like it. We depend on an external variable, and this can lead to issues: what if another function changes that <code class="literal">stop</code>? Moreover, the code is scattered. In a nutshell, this isn't good enough.</p><p>We can make it better by using <code class="literal">generator.send()</code>. When we call <code class="literal">generator.send()</code>, the value that we feed to <code class="literal">send</code> will be passed in to the generator, execution is resumed, and we can fetch it via the <code class="literal">yield</code> expression. This is all very complicated when explained with words, so let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># gen.send.py
def counter(start=0):
    n = start
    while True:
        result = yield n             # A
        print(type(result), result)  # B
        if result == 'Q':
            break
        n += 1

c = counter()
print(next(c))         # C
print(c.send('Wow!'))  # D
print(next(c))         # E
print(c.send('Q'))     # F</code></pre></div><p>Execution of the preceding <span>code</span><a class="indexterm" id="id326651518"></a> produces the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>$ python gen.send.py</strong></span>
<span class="strong"><strong>0</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><span class="strong"><span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><strong><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'str'</span><span class="token punctuation">&gt;</span></span> Wow!</strong></span>
<span class="strong"><strong>1</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><span class="strong"><span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><strong><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'NoneType'</span><span class="token punctuation">&gt;</span></span> None</strong></span>
<span class="strong"><strong>2</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><span class="strong"><span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><strong><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'str'</span><span class="token punctuation">&gt;</span></span> Q</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "gen.send.py", line 14, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    print(c.send('Q')) # F</strong></span>
<span class="strong"><strong>StopIteration</strong></span></code></pre></div><p>I think it's worth going through this code line by line, like if we were executing it, to see whether we can understand what's going on.</p><p>We start the generator execution with a call to <code class="literal">next</code> (<code class="literal">#C</code>). Within the generator, <code class="literal">n</code> is set to the same value as <code class="literal">start</code>. The <code class="literal">while</code> loop is entered, execution stops (<code class="literal">#A</code>) and <code class="literal">n</code> (<code class="literal">0</code>) is yielded back to the caller. <code class="literal">0</code> is printed on the console.</p><p>We then call <code class="literal">send</code> (<code class="literal">#D</code>), execution resumes, and <code class="literal">result</code> is set to <code class="literal">'Wow!'</code> (still <code class="literal">#A</code>), then its type and value are printed on the console (<code class="literal">#B</code>). <code class="literal">result</code> is not <code class="literal">'Q'</code>, therefore <code class="literal">n</code> is incremented by <code class="literal">1</code> and execution goes back to the <code class="literal">while</code> condition, which, being <code class="literal">True</code>, evaluates to <code class="literal">True</code> (that wasn't hard to guess, right?). Another loop cycle begins, execution stops again (<code class="literal">#A</code>), and <code class="literal">n</code> (<code class="literal">1</code>) is yielded back to the caller. <code class="literal">1</code> is printed on the console.</p><p>At this point, we call <code class="literal">next</code> (<code class="literal">#E</code>), execution is resumed again (<code class="literal">#A</code>), and because we are not sending anything to the generator explicitly, Python behaves exactly like functions that are not using the <code class="literal">return</code> statement; the <code class="literal">yield n</code> expression (<code class="literal">#A</code>) returns <code class="literal">None</code>. <code class="literal">result</code> therefore is set to <code class="literal">None</code>, and its type and value are yet again printed on the console (<code class="literal">#B</code>). Execution continues, <code class="literal">result</code> is not <code class="literal">'Q'</code> so <code class="literal">n</code> is incremented by <code class="literal">1</code>, and we start another loop again. Execution stops again (<code class="literal">#A</code>) and <code class="literal">n</code> (<code class="literal">2</code>) is yielded back to the caller. <code class="literal">2</code> is printed on the console.</p><p>And now for the grand finale: we call <code class="literal">send</code> again (<code class="literal">#F</code>), but this time we pass in <code class="literal">'Q'</code>, therefore when execution is resumed, <code class="literal">result</code> is set to <code class="literal">'Q'</code> (<code class="literal">#A</code>). Its type and value are printed on the console (<code class="literal">#B</code>), and then finally the <code class="literal">if</code> clause evaluates to <code class="literal">True</code> and the <code class="literal">while</code> loop is stopped by the <code class="literal">break</code> statement. The generator naturally terminates, which means a <code class="literal">StopIteration</code> exception is raised. You can see the print of its traceback on the last few lines printed on the console.</p><p>This is not at all simple to understand at first, so if it's not clear to you, don't be discouraged. You can keep reading on and then you can come back to this example after some time.</p><p>Using <code class="literal">send</code> allows for <span>interesting</span><a class="indexterm" id="id325679313"></a> patterns, and it's worth noting that <code class="literal">send</code> can also be used to start the execution of a generator (provided you call it with <code class="literal">None</code>).</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec73"></a>The yield from expression</h3></div></div></div><p>Another <span>interesting</span><a class="indexterm" id="id325679332"></a> construct is the <code class="literal">yield from</code> expression. This expression allows you to yield values from a sub iterator. Its use allows for quite advanced patterns, so let's just see a very quick example of it:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"># gen.yield.for.py
def print_squares(start, end):
    for n in range(start, end):
        yield n ** 2

for n in print_squares(2, 5):
    print(n)</code></pre></div><p>The previous code prints the numbers <code class="literal">4</code>, <code class="literal">9</code>, <code class="literal">16</code> on the console (on separate lines). By now, I expect you to be able to understand it by yourself, but let's quickly recap what happens. The <code class="literal">for</code> loop outside the function gets an iterator from <code class="literal">print_squares(2, 5)</code> and calls <code class="literal">next</code> on it until iteration is over. Every time the generator is called, execution is suspended (and later resumed) on <code class="literal">yield n ** 2</code>, which returns the square of the current <code class="literal">n</code>. Let's see how we can transform this code benefiting from the <code class="literal">yield from</code> expression:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10"># gen.yield.from.py
def print_squares(start, end):
    yield from (n ** 2 for n in range(start, end))

for n in print_squares(2, 5):
    print(n)</code></pre></div><p>This code produces the same result, but as you can see <code class="literal">yield from</code> is actually running a sub iterator, <code class="literal">(n ** 2 ...)</code>. The <code class="literal">yield from</code> expression returns to the caller each value the sub iterator is producing. It's shorter and it reads better.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch05lvl2sec74"></a>Generator expressions</h3></div></div></div><p>Let's now talk about the other <span>techniques</span><a class="indexterm" id="id325679674"></a> to generate values one at a time.</p><p>The syntax is exactly the same as <code class="literal">list</code> comprehensions, only, instead of wrapping the comprehension with square brackets, you wrap it with round brackets. That is called a <span class="strong"><strong>generator expression</strong></span>.</p><p>In general, generator expressions behave like equivalent <code class="literal">list</code> comprehensions, but there is one very important thing to remember: generators allow for one iteration only, then they will be exhausted. Let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11"><span class="strong"><strong># generator.expressions.py</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; cubes = [k**3 for k in range(10)]  # regular list</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; cubes</strong></span>
<span class="strong"><strong>[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(cubes)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'list'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>
<span class="strong"><strong>&gt;&gt;&gt; cubes_gen = (k**3 for k in range(10))  # create as generator</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; cubes_gen</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><span class="strong"><span class="token tag"><span class="token tag"><span class="token punctuation"></span></span></span><strong><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span> <span class="token attr-name">object</span> <span class="token attr-name">&lt;genexpr</span><span class="token punctuation">&gt;</span></span> at 0x103fb5a98&gt;</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; type(cubes_gen)</strong></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></span></span><span class="strong"><span class="token tag"><span class="token punctuation"></span></span><strong><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'generator'</span><span class="token punctuation">&gt;</span></strong><span class="token punctuation"></span></span><span class="token punctuation"></span></span>
<span class="strong"><strong>&gt;&gt;&gt; _(cubes_gen)  # this will exhaust the generator</strong></span>
<span class="strong"><strong>[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; _(cubes_gen)  # nothing more to give</strong></span>
<span class="strong"><strong>[]</strong></span></code></pre></div><p>Look at the line in which the generator expression is created and assigned the name <code class="literal">cubes_gen</code>. You can see it's a generator object. In order to see its elements, we can use a <code class="literal">for</code> loop, a manual set of calls to <code class="literal">next</code>, or simply, feed it to a <code class="literal">list</code> constructor, which is what I did (remember I'm using <code class="literal">_</code> as an alias).</p><p>Notice how, once the generator has been exhausted, there is no way to recover the same elements from it again. We need to recreate it if we want to use it from scratch again.</p><p>In the next few examples, let's see how to reproduce <code class="literal">map</code> and <code class="literal">filter</code> using generator expressions:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"># gen.map.py
def adder(*n):
    return sum(n)
s1 = sum(map(lambda *n: adder(*n), range(100), range(1, 101)))
s2 = sum(adder(*n) for n in zip(range(100), range(1, 101)))</code></pre></div><p>In the previous example, <code class="literal">s1</code> and <code class="literal">s2</code> are exactly the same: they are the sum of <code class="literal">adder(0, 1), adder(1, 2), adder(2, 3)</code>, and so on, which translates to <code class="literal">sum(1, 3, 5, ...)</code>. The syntax is different, though I find the generator expression to be much more readable:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"># gen.filter.py
cubes = [x**3 for x in range(10)]

odd_cubes1 = filter(lambda cube: cube % 2, cubes)
odd_cubes2 = (cube for cube in cubes if cube % 2)</code></pre></div><p>In the previous example, <code class="literal">odd_cubes1</code> and <code class="literal">odd_cubes2</code> are the same: they generate a sequence of odd cubes. Yet again, I <span>prefer</span><a class="indexterm" id="id325907939"></a> the generator syntax. This should be evident when things get a little more complicated:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"># gen.map.filter.py
N = 20
cubes1 = map(
    lambda n: (n, n**3),
    filter(lambda n: n % 3 == 0 or n % 5 == 0, range(N))
)
cubes2 = (
    (n, n**3) for n in range(N) if n % 3 == 0 or n % 5 == 0)</code></pre></div><p>The preceding code creates two generators, <code class="literal">cubes1</code> and <code class="literal">cubes2</code>. They are exactly the same, and return two-tuples (<span class="emphasis"><em>n, n<sup>3</sup></em></span>) when <code class="literal">n</code> is a multiple of <code class="literal">3</code> or <code class="literal">5</code>.</p><p>If you print the list (<code class="literal">cubes1</code>), you get: <code class="literal">[(0, 0), (3, 27), (5, 125), (6, 216), (9, 729), (10, 1000), (12, 1728), (15, 3375), (18, 5832)]</code>.</p><p>See how much better the generator expression reads? It may be debatable when things are very simple, but as soon as you start nesting functions a bit, like we did in this example, the superiority of the generator syntax is evident. It's shorter, simpler, and more elegant.</p><p>Now, let me ask you a question—what is the difference between the following lines of code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15"># sum.example.py
s1 = sum([n**2 for n in range(10**6)])
s2 = sum((n**2 for n in range(10**6)))
s3 = sum(n**2 for n in range(10**6))</code></pre></div><p>Strictly speaking, they all produce the same sum. The expressions to get <code class="literal">s2</code> and <code class="literal">s3</code> are exactly the same because the brackets in <code class="literal">s2</code> are redundant. They are both generator expressions inside the <code class="literal">sum</code> function. The expression to get <code class="literal">s1</code> is different though. Inside <code class="literal">sum</code>, we find a <code class="literal">list</code> comprehension. This means that in order to calculate <code class="literal">s1</code>, the <code class="literal">sum</code> function has to call <code class="literal">next</code> on a list a million times.</p><p>Do you see where we're losing time and memory? Before <code class="literal">sum</code> can start calling <code class="literal">next</code> on that list, the list needs to have been created, which is a waste of time and space. It's much better for <code class="literal">sum</code> to call <code class="literal">next</code> on a simple generator expression. There is no need to have all the numbers from <code class="literal">range(10**6)</code> stored in a list.</p><p>So, <span class="emphasis"><em>watch out for extra parentheses when you write your expressions</em></span>: sometimes it's easy to skip over these details, which makes our code very different. If you don't believe me, check out the following code:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16"># sum.example.2.py
s = sum([n**2 for n in range(10**8)])  # this is killed
# s = sum(n**2 for n in range(10**8))    # this succeeds
print(s)  # prints: 333333328333333350000000</code></pre></div><p>Try running the preceding example. If I run the first line on my old Linux box with 8 GB RAM, this is what I get:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="17"><span class="strong"><strong>$ python sum.example.2.py</strong></span><span class="strong"><strong>Killed</strong></span></code></pre></div><p>On the other hand, if I comment out the first line, and uncomment the second one, this is the result:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="18"><span class="strong"><strong>$ python sum.example.2.py</strong></span><span class="strong"><strong>333333328333333350000000</strong></span></code></pre></div><p>Sweet generator expressions. The <span>difference</span><a class="indexterm" id="id325989147"></a> between the two lines is that in the first one, a list with the squares of the first hundred million numbers must be made before being able to sum them up. That list is huge, and we ran out of memory (at least, my box did, if yours doesn't try a bigger number), therefore Python kills the process for us. Sad face.</p><p>But when we remove the square brackets, we don't have a list any more. The <code class="literal">sum</code> function receives <code class="literal">0</code>, <code class="literal">1</code>, <code class="literal">4</code>, <code class="literal">9</code>, and so on until the last one, and sums them up. No problems, happy face.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:5:ch05lvl1sec55:generators:Generators - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>