<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">IO, streams, and requests - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec68/io-streams-and-requests" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec68/io-streams-and-requests" rel="canonical"/>
<meta content="IO stands for input/output, and it broadly refers to the communication between a computer and the outside world." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="IO, streams, and requests - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="IO stands for input/output, and it broadly refers to the communication between a computer and the outside world." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec68/io-streams-and-requests" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="IO, streams, and requests - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="IO stands for input/output, and it broadly refers to the communication between a computer and the outside world." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "IO, streams, and requests - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "IO stands for input/output, and it broadly refers to the communication between a computer and the outside world.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch07lvl1sec68"></a>IO, streams, and requests</h2></div></div><hr/></div><p><span class="strong"><strong>IO</strong></span> stands for <span class="strong"><strong>input</strong></span>/<span class="strong"><strong>output</strong></span>, and it <span>broadly</span><a class="indexterm" id="id326022080"></a> refers to the <span>communication</span><a class="indexterm" id="id326022106"></a> between a <span>computer</span><a class="indexterm" id="id326022104"></a> and the outside world. There are several different types of IO, and it is outside the scope of this chapter to explain all of them, but I still want to offer you a couple of examples.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec98"></a>Using an in-memory stream</h3></div></div></div><p>The first will <span>show</span><a class="indexterm" id="id326022091"></a> you the <code class="literal">io.StringIO</code> class, which is an in-memory stream for text IO. The second one instead will escape the locality of our computer, and show you how to perform an HTTP request. Let's see the first example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># io_examples/string_io.py
import io

stream = io.StringIO()
stream.write('Learning Python Programming.\n')
print('Become a Python ninja!', file=stream)

contents = stream.getvalue()
print(contents)

stream.close()</code></pre></div><p>In the preceding code snippet, we import the <code class="literal">io</code> module from the standard library. This is a very interesting module that features many tools related to streams and IO. One of them is <code class="literal">StringIO</code>, which is an in-memory buffer in which we're going to write two sentences, using two different methods, as we did with files in the first examples of this chapter. We can both call <code class="literal">StringIO.write</code> or we can use <code class="literal">print</code>, and tell it to direct the data to our stream.</p><p>By calling <code class="literal">getvalue</code>, we can get the content of the stream (and print it), and finally we close it. The call to <code class="literal">close</code> causes the text buffer to be immediately discarded.</p><p>There is a more elegant way to write the previous code (can you guess it, before you look?):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># io_examples/string_io.py
with io.StringIO() as stream:
    stream.write('Learning Python Programming.\n')
    print('Become a Python ninja!', file=stream)
    contents = stream.getvalue()
    print(contents)</code></pre></div><p>Yes, it is again a context manager. Like <code class="literal">open</code>, <code class="literal">io.StringIO</code> works well within a context manager block. Notice the similarity with <code class="literal">open</code>: in this case too, we don't need to manually close the stream.</p><p>In-memory objects can be useful in a <span>multitude</span><a class="indexterm" id="id325906675"></a> of situations. Memory is much faster than a disk and, for small amounts of data, can be the perfect choice.</p><p>When running the script, the output is:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>$ python string_io.py</strong></span>
<span class="strong"><strong>Learning Python Programming.</strong></span>
<span class="strong"><strong>Become a Python ninja!</strong></span></code></pre></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec99"></a>Making HTTP requests</h3></div></div></div><p>Let's now explore a <span>couple</span><a class="indexterm" id="id325916611"></a> of examples on HTTP requests. I will use the <code class="literal">requests</code> library for these examples, which you can install with <code class="literal">pip</code>. We're going to perform HTTP requests against the <a class="ulink" href="http://httpbin.org/" target="_blank">httpbin.org</a> API, which, interestingly, was developed by Kenneth Reitz, the creator of the <code class="literal">requests</code> library itself. This library is amongst the most widely adopted all over the world:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3">import requests

urls = {
    'get': 'https://httpbin.org/get?title=learn+python+programming',
    'headers': 'https://httpbin.org/headers',
    'ip': 'https://httpbin.org/ip',
    'now': 'https://now.httpbin.org/',
    'user-agent': 'https://httpbin.org/user-agent',
    'UUID': 'https://httpbin.org/uuid',
}

def get_content(title, url):
    resp = requests.get(url)
    print(f'Response for {title}')
    print(resp.json())

for title, url in urls.items():
    get_content(title, url)
    print('-' * 40)</code></pre></div><p>The preceding snippet should be simple to understand. I declare a dictionary of URLs against which I want to perform <code class="literal">requests</code>. I have encapsulated the code that performs the request into a tiny function: <code class="literal">get_content</code>. As you can see, very simply, we perform a GET request (by using <code class="literal">requests.get</code>), and we print the title and the JSON decoded version of the body of the response. Let me spend a word about this last bit.</p><p>When we perform a request to a website, or API, we get back a response object, which is, very simply, what was returned by the server we performed the request against. The body of all responses from <a class="ulink" href="https://httpbin.org/" target="_blank">httpbin.org</a> happens to be JSON encoded, so instead of getting the body as it is (by getting <code class="literal">resp.text</code>) and manually decoding it, calling <code class="literal">json.loads</code> on it, we simply combine the two by leveraging the <code class="literal">json</code> method on the response object. There are plenty of reasons why the <code class="literal">requests</code> package has become so widely adopted, and one of them is definitely its ease of use.</p><p>Now, when you perform a request in your application, you will want to have a much more robust approach in dealing with errors and so on, but for this chapter, a simple example will do. Don't worry, I will give you a more comprehensive introduction to HTTP requests in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/14" linkend="ch14">Chapter 14</a>, <span class="emphasis"><em>Web Development</em></span>.</p><p>Going back to our code, in the end, we run a <code class="literal">for</code> loop and get all the URLs. When you run it, you will see the result of each call printed on your console, like this (prettified and trimmed for brevity):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>$ python reqs.py
Response for get
{
  "args": {
    "title": "learn python programming"
  },
  "headers": {
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Host": "httpbin.org",
    "User-Agent": "python-requests/2.19.0"
  },
  "origin": "82.47.175.158",
  "url": "https://httpbin.org/get?title=learn+python+programming"
}
... rest of the output omitted ...
</strong></span></code></pre></div><p>Notice that you might get a slightly <span>different</span><a class="indexterm" id="id326045630"></a> output in terms of version numbers and IPs, which is fine. Now, GET is only one of the HTTP verbs, and it is definitely the most commonly used. The second one is the ubiquitous POST, which is the type of request you make when you need to send data to the server. Every time you submit a form on the web, you're basically making a POST request. So, let's try to make one programmatically:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># io_examples/reqs_post.py
import requests

url = 'https://httpbin.org/post'
data = dict(title='Learn Python Programming')

resp = requests.post(url, data=data)
print('Response for POST')
print(resp.json())</code></pre></div><p>The previous code is very similar to the one we saw before, only this time we don't call <code class="literal">get</code>, but <code class="literal">post</code>, and because we want to send some data, we specify that in the call. The <code class="literal">requests</code> library offers much, much more than this, and it has been praised by the community for the beautiful API it exposes. It is a project that I encourage you to check out and explore, as you will end up using it all the time, anyway.</p><p>Running the previous script (and applying some prettifying magic to the output) yields the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"><span class="strong"><strong>$ python reqs_post.py</strong></span>
<span class="strong"><strong>Response for POST</strong></span>
<span class="strong"><strong>{ 'args': {},</strong></span>
<span class="strong"><strong>  'data': '',</strong></span>
<span class="strong"><strong>  'files': {},</strong></span>
<span class="strong"><strong>  'form': {'title': 'Learn Python Programming'},</strong></span>
<span class="strong"><strong>  'headers': { 'Accept': '*/*',</strong></span>
<span class="strong"><strong>               'Accept-Encoding': 'gzip, deflate',</strong></span>
<span class="strong"><strong>               'Connection': 'close',</strong></span>
<span class="strong"><strong>               'Content-Length': '30',</strong></span>
<span class="strong"><strong>               'Content-Type': 'application/x-www-form-urlencoded',</strong></span>
<span class="strong"><strong>               'Host': 'httpbin.org',</strong></span>
<span class="strong"><strong>               'User-Agent': 'python-requests/2.7.0 CPython/3.7.0b2 '</strong></span>
<span class="strong"><strong>                             'Darwin/17.4.0'},</strong></span>
<span class="strong"><strong>  'json': None,</strong></span></code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong>  'origin': '82.45.123.178',</strong></span>
<span class="strong"><strong>  'url': 'https://httpbin.org/post'}</strong></span></code></pre></div><p>Notice how the headers are now different, and we find the data we sent in the <code class="literal">form</code> key/value pair of the response body.</p><p>I hope these short examples are enough to get you started, especially with requests. The web changes every day, so it's worth learning the basics and then brush up every now and then.</p><p>Let's now move on to the <span>last</span><a class="indexterm" id="id326047865"></a> topic of this chapter: persisting data on disk in different formats.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:7:ch07lvl1sec68:io-streams-and-requests:IO, streams, and requests - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>