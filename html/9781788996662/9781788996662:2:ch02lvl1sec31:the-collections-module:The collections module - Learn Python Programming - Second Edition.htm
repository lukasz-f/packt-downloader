<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">The collections module - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec31/the-collections-module" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec31/the-collections-module" rel="canonical"/>
<meta content="When Python general purpose built-in containers (tuple, list, set, and dict) aren't enough, we can find specialized container datatypes in the collections" name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="The collections module - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="When Python general purpose built-in containers (tuple, list, set, and dict) aren't enough, we can find specialized container datatypes in the collections" property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec31/the-collections-module" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="The collections module - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="When Python general purpose built-in containers (tuple, list, set, and dict) aren't enough, we can find specialized container datatypes in the collections" name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "The collections module - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "When Python general purpose built-in containers (tuple, list, set, and dict) aren't enough, we can find specialized container datatypes in the collections",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch02lvl1sec31"></a>The collections module</h2></div></div><hr/></div><p>When Python <span>general</span><a class="indexterm" id="id326495216"></a> purpose built-in containers (<code class="literal">tuple</code>, <code class="literal">list</code>, <code class="literal">set</code>, and <code class="literal">dict</code>) aren't enough, we can <span>find</span><a class="indexterm" id="id326495194"></a> specialized container datatypes in the <code class="literal">collections</code> module. They are:</p><div class="informaltable"><table style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; " width=""><colgroup><col></col><col></col></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Data type</strong></span></p></td><td style="border-bottom: 0.5pt solid ; "><p><span class="strong"><strong>Description</strong></span></p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">namedtuple()</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Factory function for creating tuple subclasses with named fields</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">deque</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>List-like container with fast appends and pops on either end</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">ChainMap</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Dictionary-like class for creating a single view of multiple mappings</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">Counter</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Dictionary subclass for counting hashable objects</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">OrderedDict</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Dictionary subclass that remembers the order entries were added</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">defaultdict</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Dictionary subclass that calls a factory function to supply missing values</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">UserDict</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Wrapper around dictionary objects for easier dictionary subclassing</p></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p><code class="literal">UserList</code></p></td><td style="border-bottom: 0.5pt solid ; "><p>Wrapper around list objects for easier list subclassing</p></td></tr><tr><td style="border-right: 0.5pt solid ; "><p><code class="literal">UserString</code></p></td><td style=""><p>Wrapper around string objects for easier string subclassing</p></td></tr></tbody></table></div><p> </p><p>We don't have the room to cover all of them, but you can find plenty of examples in the official documentation, so here I'll just give a small example to show you <code class="literal">namedtuple</code>, <code class="literal">defaultdict</code>, and <code class="literal">ChainMap</code>.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec32"></a>namedtuple</h3></div></div></div><p>A <code class="literal">namedtuple</code> is a tuple-like <span>object</span><a class="indexterm" id="id325915820"></a> that has fields accessible by attribute <span>lookup</span><a class="indexterm" id="id325915827"></a> as well as being indexable and iterable (it's actually a subclass of <code class="literal">tuple</code>). This is sort of a compromise between a full-fledged object and a tuple, and it can be useful in those cases where you don't need the full power of a custom object, but you want your code to be more readable by avoiding weird indexing. Another use case is when there is a chance that items in the tuple need to change their position after refactoring, forcing the coder to refactor also all the logic involved, which can be very tricky. As usual, an example is better than a thousand words (or was it a picture?). Say we are handling data about the left and right eyes of a patient. We save one value for the left eye (position 0) and one for the right eye (position 1) in a regular tuple. Here's how that might be:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>&gt;&gt;&gt; vision = (9.5, 8.8)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision</strong></span>
<span class="strong"><strong>(9.5, 8.8)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision[0]  # left eye (implicit positional reference)</strong></span>
<span class="strong"><strong>9.5</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision[1]  # right eye (implicit positional reference)</strong></span>
<span class="strong"><strong>8.8</strong></span></code></pre></div><p>Now let's pretend we handle <code class="literal">vision</code> objects all the time, and at some point the designer decides to enhance them by adding information for the combined vision, so that a <code class="literal">vision</code> object stores data in this format: <span class="emphasis"><em>(left eye, combined, right eye)</em></span>.</p><p>Do you see the trouble we're in now? We may have a lot of code that depends on <code class="literal">vision[0]</code> being the left eye information (which it still is) and <code class="literal">vision[1]</code> being the right eye information (which is no longer the case). We have to refactor our code wherever we handle these objects, changing <code class="literal">vision[1]</code> to <code class="literal">vision[2]</code>, and it can be painful. We could have probably approached this a bit better from the beginning, by using a <code class="literal">namedtuple</code>. Let me show you what I mean:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Vision = namedtuple('Vision', ['left', 'right'])
&gt;&gt;&gt; vision = Vision(9.5, 8.8)
&gt;&gt;&gt; vision[0]
9.5
&gt;&gt;&gt; vision.left  # same as vision[0], but explicit
9.5
&gt;&gt;&gt; vision.right  # same as vision[1], but explicit
8.</strong></span><span class="strong"><strong>8</strong></span></code></pre></div><p>If within our code, we refer to the left and right eyes using <code class="literal">vision.left</code> and <code class="literal">vision.right</code>, all we need to do to fix the new design issue is to change our factory and the way we create instances. The rest of the code won't need to change:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>&gt;&gt;&gt; Vision = namedtuple('Vision', ['left', 'combined', 'right'])</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision = Vision(9.5, 9.2, 8.8)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision.left  # still correct</strong></span>
<span class="strong"><strong>9.5</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision.right  # still correct (though now is vision[2])</strong></span>
<span class="strong"><strong>8.8</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; vision.combined  # the new vision[1]</strong></span>
<span class="strong"><strong>9.2</strong></span></code></pre></div><p>You can see how convenient it is to refer to those values by name rather than by position. After all, a wise man once wrote, <span class="emphasis"><em>Explicit is better than implicit</em></span> (can you recall where? Think <span class="emphasis"><em>Zen</em></span> if you can't...). This example may be a little extreme; of course, it's not likely that our code designer will go for a change like this, but you'd be amazed to see how frequently issues similar to this one happen in a professional environment, and how painful it is to refactor them.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec33"></a>defaultdict</h3></div></div></div><p>The <code class="literal">defaultdict</code> data type is one of my favorites. It <span>allows</span><a class="indexterm" id="id326346747"></a> you to <span>avoid</span><a class="indexterm" id="id326402365"></a> checking if a key is in a dictionary by simply inserting it for you on your first access attempt, with a default value whose type you pass on creation. In some cases, this tool can be very handy and shorten your code a little. Let's see a quick example. Say we are updating the value of <code class="literal">age</code>, by adding one year. If <code class="literal">age</code> is not there, we assume it was <code class="literal">0</code> and we update it to <code class="literal">1</code>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>&gt;&gt;&gt; d = {}</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; d['age'] = d.get('age', 0) + 1  # age not there, we get 0 + 1</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; d</strong></span>
<span class="strong"><strong>{'age': 1}</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; d = {'age': 39}</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; d['age'] = d.get('age', 0) + 1  # age is there, we get 40</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; d</strong></span>
<span class="strong"><strong>{'age': 40}</strong></span></code></pre></div><p>Now let's see how it would work with a <code class="literal">defaultdict</code> data type. The second line is actually the short version of a four-lines-long <code class="literal">if</code> clause that we would have to write if dictionaries didn't have the <code class="literal">get</code> method (we'll see all about <code class="literal">if</code> clauses in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/3" linkend="ch03"><span>Chapter 3</span></a>, <span class="emphasis"><em>Iterating and Making Decisions)</em></span>:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>&gt;&gt;&gt; from collections import defaultdict</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; dd = defaultdict(int)  # int is the default type (0 the value)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; dd['age'] += 1  # short for dd['age'] = dd['age'] + 1</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; dd</strong></span>
<span class="strong"><strong>defaultdict(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'int'</span><span class="token punctuation">&gt;</span></span>, {'age': 1})  # 1, as expected</strong></span></code></pre></div><p>Notice how we just need to instruct the <code class="literal">defaultdict</code> factory that we want an <code class="literal">int</code> number to be used in case the key is missing (we'll get <code class="literal">0</code>, which is the default for the <code class="literal">int</code> type). Also, notice that even though in this example there is no gain on the number of lines, there is definitely a gain in readability, which is very important. You can also use a different technique to instantiate a <code class="literal">defaultdict</code> data type, which involves creating a factory object. To dig deeper, please refer to the official documentation.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec34"></a>ChainMap</h3></div></div></div><p><code class="literal">ChainMap</code> is an extremely nice data type <span>which</span><a class="indexterm" id="id326477909"></a> was introduced in Python 3.3. It behaves like a normal dictionary but according to the Python documentation: "<span class="emphasis"><em>is provided for quickly linking a number of mappings so they can be treated as a single unit</em></span></p><div class="blockquote"><blockquote class="blockquote"><p><em>"</em></p></blockquote></div><em>.</em> This is usually much faster than <span>creating</span><a class="indexterm" id="id326477924"></a> one dictionary and running multiple update calls on it. <code class="literal">ChainMap</code> can be used to simulate nested scopes and is useful in templating. The underlying mappings are stored in a list. That list is public and can be accessed or updated using the maps attribute. Lookups search the underlying mappings successively until a key is found. By contrast, writes, updates, and deletions only operate on the first mapping.<p></p><p>A very common use case is providing defaults, so let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>&gt;&gt;&gt; from collections import ChainMap</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; default_connection = {'host': 'localhost', 'port': 4567}</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; connection = {'port': 5678}</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn = ChainMap(connection, default_connection)  # map creation</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn['port']  # port is found in the first dictionary</strong></span>
<span class="strong"><strong>5678</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn['host']  # host is fetched from the second dictionary</strong></span>
<span class="strong"><strong>'localhost'</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn.maps  # we can see the mapping objects</strong></span>
<span class="strong"><strong>[{'port': 5678}, {'host': 'localhost', 'port': 4567}]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn['host'] = 'packtpub.com'  # let's add host</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn.maps</strong></span>
<span class="strong"><strong>[{'port': 5678, 'host': 'packtpub.com'},</strong></span>
<span class="strong"><strong> {'host': 'localhost', 'port': 4567}]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; del conn['port']  # let's remove the port information</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn.maps</strong></span>
<span class="strong"><strong>[{'host': 'packtpub.com'}, {'host': 'localhost', 'port': 4567}]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; conn['port']  # now port is fetched from the second dictionary</strong></span>
<span class="strong"><strong>4567</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; dict(conn)  # easy to merge and convert to regular dictionary</strong></span>
<span class="strong"><strong>{'host': 'packtpub.com', 'port': 4567}</strong></span></code></pre></div><p>I just love how Python makes your life easy. You work on a <code class="literal">ChainMap</code> object, configure the first mapping as you want, and when you need a complete dictionary with all the defaults as well as the customized items, you just feed the <code class="literal">ChainMap</code> object to a <code class="literal">dict</code> constructor. If you have never coded in other languages, such as Java or C++, you probably won't be able to appreciate fully how precious this is, and how Python makes your life so much easier. I do, I feel claustrophobic every time I have to code in some other language.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:2:ch02lvl1sec31:the-collections-module:The collections module - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>