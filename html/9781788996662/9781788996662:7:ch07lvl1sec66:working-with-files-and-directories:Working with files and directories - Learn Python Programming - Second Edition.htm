<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Working with files and directories - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec66/working-with-files-and-directories" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec66/working-with-files-and-directories" rel="canonical"/>
<meta content="When it comes to files and directories, Python offers plenty of useful tools." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Working with files and directories - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="When it comes to files and directories, Python offers plenty of useful tools." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec66/working-with-files-and-directories" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Working with files and directories - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="When it comes to files and directories, Python offers plenty of useful tools." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Working with files and directories - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "When it comes to files and directories, Python offers plenty of useful tools.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch07lvl1sec66"></a>Working with files and directories</h2></div></div><hr/></div><p>When it comes to files and directories, Python offers <span>plenty</span><a class="indexterm" id="id326655968"></a> of useful tools. In particular, in the following examples, we will leverage the <code class="literal">os</code> and <code class="literal">shutil</code> modules. As we'll be reading and writing on the disk, I will be using a file, <code class="literal">fear.txt</code>, which contains an excerpt from <span class="emphasis"><em>Fear</em></span>, by Thich Nhat Hanh, as a guinea pig for some of our examples.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec90"></a>Opening files</h3></div></div></div><p>Opening a file in Python is very <span>simple</span><a class="indexterm" id="id326655390"></a> and intuitive. In fact, we just need to use the <code class="literal">open</code> function. Let's see a quick example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># files/open_try.py
fh = open('fear.txt', 'rt')  # r: read, t: text

for line in fh.readlines():
    print(line.strip())  # remove whitespace and print

fh.close()</code></pre></div><p>The previous code is very simple. We call <code class="literal">open</code>, passing the filename, and telling <code class="literal">open</code> that we want to read it in text mode. There is no path information before the filename; therefore, <code class="literal">open</code> will assume the file is in the same folder the script is run from. This means that if we run this script from outside the <code class="literal">files</code> folder, then <code class="literal">fear.txt</code> won't be found.</p><p>Once the file has been opened, we obtain a file object back, <code class="literal">fh</code>, which we can use to work on the content of the file. In this case, we use the <code class="literal">readlines()</code> method to iterate over all the lines in the file, and print them. We call <code class="literal">strip()</code> on each line to get rid of any extra spaces around the content, including the line termination character at the end, since <code class="literal">print</code> will already add one for us. This is a quick and dirty solution that works in this example, but should the content of the file contain meaningful spaces that need to be preserved, you will have to be slightly more careful in how you sanitize the data. At the end of the script, we flush and close the stream.</p><p>Closing a file is very important, as we don't want to risk failing to release the handle we have on it. Therefore, we need to apply some precaution, and wrap the previous logic in a <code class="literal">try</code>/<code class="literal">finally</code> block. This has the effect that, whatever error might occur while we try to open and read the file, we can rest assured that <code class="literal">close()</code> will be called:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"># files/open_try.py
try:
    fh = open('fear.txt', 'rt')
    for line in fh.readlines():
        print(line.strip())
finally:
    fh.close()</code></pre></div><p>The logic is exactly the same, but now it is also safe.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note60"></a>Note</h3><p>Don't worry if you don't understand <code class="literal">try</code>/<code class="literal">finally</code> for now. We will explore how to deal with exceptions in the next chapter. For now, suffice to say that putting code within the body of a <code class="literal">try</code> block adds a mechanism around that code that allows us to detect errors (which are called <span class="emphasis"><em>exceptions</em></span>) and decide what to do if they happen. In this case, we don't really do anything in case of errors, but by closing the file within the <code class="literal">finally</code> block, we make sure that line is executed whether or not any error has happened.</p></div><p>We can simplify the <span>previous</span><a class="indexterm" id="id326655976"></a> example this way:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># files/open_try.py
try:
    fh = open('fear.txt')  # rt is default
    for line in fh:  # we can iterate directly on fh
        print(line.strip())
finally:
    fh.close()</code></pre></div><p>As you can see, <code class="literal">rt</code> is the default mode for opening files, so we don't need to specify it. Moreover, we can simply iterate on <code class="literal">fh</code>, without explicitly calling <code class="literal">readlines()</code> on it. Python is very nice and gives us shorthands to make our code shorter and simpler to read.</p><p>All the previous examples produce a print of the file on the console (check out the source code to read the whole content):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3">An excerpt from Fear - By Thich Nhat Hanh

The Present Is Free from Fear

When we are not fully present, we are not really living. We’re not really there, either for our loved ones or for ourselves. If we’re not there, then where are we? We are running, running, running, even during our sleep. We run because we’re trying to escape from our fear.
...</code></pre></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch07lvl3sec17"></a>Using a context manager to open a file</h4></div></div></div><p>Let's admit it: the <span>prospect</span><a class="indexterm" id="id326656014"></a> of having to <span>disseminate</span><a class="indexterm" id="id326656023"></a> our code with <code class="literal">try</code>/<code class="literal">finally</code> blocks is not one of the best. As usual, Python gives us a much nicer way to open a file in a secure fashion: by using a c<span class="emphasis"><em>ontext manager</em></span>. Let's see the code first:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># files/open_with.py
with open('fear.txt') as fh:
    for line in fh:
        print(line.strip())</code></pre></div><p>The previous example is equivalent to the one before it, but reads so much better. The <code class="literal">with</code> statement supports the concept of a runtime context defined by a context manager. This is implemented using a pair of methods, <code class="literal">__enter__</code> and <code class="literal">__exit__</code>, that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends. The <code class="literal">open</code> function is capable of producing a file object when invoked by a context manager, but the true beauty of it lies in the fact that <code class="literal">fh.close()</code> will be called automatically for us, even in case of errors.</p><p>Context managers are used in several different scenarios, such as thread synchronization, closure of files or other objects, and management of network and database connections. You can find information <span>about</span><a class="indexterm" id="id325672551"></a> them in the <code class="literal">contextlib</code> documentation page (<a class="ulink" href="https://docs.python.org/3.7/library/contextlib.html" target="_blank">https://docs.python.org/3.7/library/contextlib.html</a>).</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec91"></a>Reading and writing to a file</h3></div></div></div><p>Now that we <span>know</span><a class="indexterm" id="id325672573"></a> how to open a file, let's see a <span>couple</span><a class="indexterm" id="id325672582"></a> of different ways that we have to read and write to it:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># files/print_file.py
with open('print_example.txt', 'w') as fw:
    print('Hey I am printing into a file!!!', file=fw)</code></pre></div><p>A first approach uses the <code class="literal">print</code> function, which you've seen plenty of times in the previous chapters. After obtaining a file object, this time specifying that we intend to write to it ("<code class="literal">w</code>"), we can tell the call to <code class="literal">print</code> to direct its effects on the file, instead of the default <code class="literal">sys.stdout</code>, which, when executed on a console, is mapped to it.</p><p>The previous code has the effect of creating the <code class="literal">print_example.txt</code> file if it doesn't exist, or truncate it in case it does, and writes the line <code class="literal">Hey I am printing into a file!!!</code> to it.</p><p>This is all nice and easy, but not what we typically do when we want to write to a file. Let's see a much more common approach:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># files/read_write.py
with open('fear.txt') as f:
    lines = [line.rstrip() for line in f]

with open('fear_copy.txt', 'w') as fw:
    fw.write('\n'.join(lines))</code></pre></div><p>In the previous example, we first open <code class="literal">fear.txt</code> and collect its content into a list, line by line. Notice that this time, I'm calling a more precise method, <code class="literal">rstrip()</code>, as an example, to make sure I only strip the whitespace on the right-hand side of every line.</p><p>In the second part of the snippet, we create a new file, <code class="literal">fear_copy.txt</code>, and we write to it all the lines from the original file, joined by a newline, <code class="literal">\n</code>. Python is gracious and works by default with <span class="emphasis"><em>universal newlines</em></span>, which means that even though the original file might have a newline that is different than <code class="literal">\n</code>, it will be translated automatically for us before the line is returned. This behavior is, of course, customizable, but normally it is exactly what you want. Speaking of newlines, can you think of one of them that might be missing in the copy?</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch07lvl3sec18"></a>Reading and writing in binary mode</h4></div></div></div><p>Notice that by <span>opening</span><a class="indexterm" id="id325906676"></a> a file passing <code class="literal">t</code> in <span>the</span><a class="indexterm" id="id325906688"></a> options (or omitting it, as it is the default), we're opening the file in text mode. This means that the content of the file is treated and interpreted as text. If you wish to write bytes to a file, you can open it in binary mode. This is a common requirement when you deal with files that don't just contain raw text, such as images, audio/video, and, in general, any other proprietary format.</p><p>In order to handle files in binary mode, simply specify the <code class="literal">b</code> flag when opening them, as in the following example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># files/read_write_bin.py
with open('example.bin', 'wb') as fw:
    fw.write(b'This is binary data...')

with open('example.bin', 'rb') as f:
    print(f.read())  # prints: b'This is binary data...'</code></pre></div><p>In this example, I'm still using text as binary data, but it could be anything you want. You can see it's treated as a binary by the fact that you get the <code class="literal">b'This ...'</code> prefix in the output.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch07lvl3sec19"></a>Protecting against overriding an existing file</h4></div></div></div><p>Python gives us the <span>ability</span><a class="indexterm" id="id326022089"></a> to open files for writing. By using the <code class="literal">w</code> flag, we open a file and truncate its content. This means the file is overwritten with an empty file, and the original content is lost. If you wish to only open a file for writing in case it doesn't exist, you can use the <code class="literal">x</code> flag instead, in the following example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"># files/write_not_exists.py
with open('write_x.txt', 'x') as fw:
    fw.write('Writing line 1')  # this succeeds

with open('write_x.txt', 'x') as fw:
    fw.write('Writing line 2')  # this fails</code></pre></div><p>If you run the previous snippet, you will find a file called <code class="literal">write_x.txt</code> in your directory, containing only one line of text. The second part of the snippet, in fact, fails to execute. This is the output I get on my console:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"><span class="strong"><strong>$ python write_not_exists.py</strong></span>
<span class="strong"><strong>Traceback (most recent call last):</strong></span>
<span class="strong"><strong>  File "write_not_exists.py", line 6, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span></strong><span class="token tag"><span class="token punctuation"></span></span></span><span class="token tag"><span class="token punctuation"></span></span>
<span class="strong"><strong>    with open('write_x.txt', 'x') as fw:</strong></span>
<span class="strong"><strong>FileExistsError: [Errno 17] File exists: 'write_x.txt'</strong></span></code></pre></div></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec92"></a>Checking for file and directory existence</h3></div></div></div><p>If you want to make <span>sure</span><a class="indexterm" id="id326295041"></a> a file or <span>directory</span><a class="indexterm" id="id326295049"></a> exists (or it doesn't), the <code class="literal">os.path</code> module is what you need. Let's see a small example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10"># files/existence.py
import os

filename = 'fear.txt'
path = os.path.dirname(os.path.abspath(filename))

print(os.path.isfile(filename))  # True
print(os.path.isdir(path))  # True
print(path)  # /Users/fab/srv/lpp/ch7/files</code></pre></div><p>The preceding snippet is quite interesting. After declaring the filename with a relative reference (in that it is missing the path information), we use <code class="literal">abspath</code> to calculate the full, absolute path of the file. Then, we get the path information (by removing the filename at the end) by calling <code class="literal">dirname</code> on it. The result, as you can see, is printed on the last line. Notice also how we check for existence, both for a file and a directory, by calling <code class="literal">isfile</code> and <code class="literal">isdir</code>. In the <code class="literal">os.path</code> module, you find all the functions you need to <span>work</span><a class="indexterm" id="id326295083"></a> with pathnames.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note61"></a>Note</h3><p>Should you ever need to work with paths in a different way, you can check out <code class="literal">pathlib</code>. While <code class="literal">os.path</code> works with strings, <code class="literal">pathlib</code> offers classes representing filesystem paths with semantics appropriate for different operating systems. It is beyond the scope of this chapter, but if you're interested, check out PEP428 (<a class="ulink" href="https://www.python.org/dev/peps/pep-0428/" target="_blank">https://www.python.org/dev/peps/pep-0428/</a>), and its page in the standard library.</p></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec93"></a>Manipulating files and directories</h3></div></div></div><p>Let's see a couple of <span>quick</span><a class="indexterm" id="id326295323"></a> examples on how to <span>manipulate</span><a class="indexterm" id="id326295332"></a> files and directories. The first example manipulates the content:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11"># files/manipulation.py
from collections import Counter
from string import ascii_letters

chars = ascii_letters + ' '

def sanitize(s, chars):
    return ''.join(c for c in s if c in chars)

def reverse(s):
    return s[::-1]

with open('fear.txt') as stream:
    lines = [line.rstrip() for line in stream]

with open('raef.txt', 'w') as stream:
    stream.write('\n'.join(reverse(line) for line in lines))

# now we can calculate some statistics
lines = [sanitize(line, chars) for line in lines]
whole = ' '.join(lines)
cnt = Counter(whole.lower().split())
print(cnt.most_common(3))</code></pre></div><p>The previous example defines two functions: <code class="literal">sanitize</code> and <code class="literal">reverse</code>. They are simple functions whose purpose is to remove anything that is not a letter or space from a string, and produce the reversed copy of a string, respectively.</p><p>We open <code class="literal">fear.txt</code> and we read its content into a list. Then we create a new file, <code class="literal">raef.txt</code>, which will contain the horizontally-mirrored version of the original one. We write all the content of <code class="literal">lines</code> with a single operation, using <code class="literal">join</code> on a new line character. Maybe more interesting, is the bit in the end. First, we reassign <code class="literal">lines</code> to a sanitized version of itself, by means of list comprehension. Then we put them together in the <code class="literal">whole</code> string, and finally, we pass the result to <code class="literal">Counter</code>. Notice that we split the string and put it in lowercase. This way, each word will be counted correctly, regardless of its case, and, thanks to <code class="literal">split</code>, we don't need to worry about extra spaces anywhere. When we print the three most common words, we realize that truly Thich Nhat Hanh's focus is on others, as <code class="literal">we</code> is the most common word in the text:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"><span class="strong"><strong>$ python manipulation.py</strong></span>
<span class="strong"><strong>[('we', 17), ('the', 13), ('were', 7)]</strong></span></code></pre></div><p>Let's now see an example of manipulation more oriented to disk operations, in which we put the <code class="literal">shutil</code> module to use:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13"># files/ops_create.py
import shutil
import os

BASE_PATH = 'ops_example'  # this will be our base path
os.mkdir(BASE_PATH)

path_b = os.path.join(BASE_PATH, 'A', 'B')
path_c = os.path.join(BASE_PATH, 'A', 'C')
path_d = os.path.join(BASE_PATH, 'A', 'D')

os.makedirs(path_b)
os.makedirs(path_c)

for filename in ('ex1.txt', 'ex2.txt', 'ex3.txt'):
    with open(os.path.join(path_b, filename), 'w') as stream:
        stream.write(f'Some content here in {filename}\n')

shutil.move(path_b, path_d)

shutil.move(
    os.path.join(path_d, 'ex1.txt'),
    os.path.join(path_d, 'ex1d.txt')
)</code></pre></div><p>In the <span>previous</span><a class="indexterm" id="id326296466"></a> code, we start by <span>declaring</span><a class="indexterm" id="id326296474"></a> a base path, which will safely contain all the files and folders we're going to create. We then use <code class="literal">makedirs</code> to create two directories: <code class="literal">ops_example/A/B</code> and <code class="literal">ops_example/A/C</code>. (Can you think of a way of creating the two directories by using <code class="literal">map</code>?).</p><p>We use <code class="literal">os.path.join</code> to concatenate directory names, as using <code class="literal">/</code> would specialize the code to run on a platform where the directory separator is <code class="literal">/</code>, but then the code would fail on platforms with a different separator. Let's delegate to <code class="literal">join</code> the task to figure out which is the appropriate separator.</p><p>After creating the directories, within a simple <code class="literal">for</code> loop, we put some code that creates three files in directory <code class="literal">B</code>. Then, we move the folder <code class="literal">B</code> and its content to a different name: <code class="literal">D</code>. And finally, we rename <code class="literal">ex1.txt</code> to <code class="literal">ex1d.txt</code>. If you open that file, you'll see it still contains the original text from the <code class="literal">for</code> loop. Calling <code class="literal">tree</code> on the result produces the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14"><span class="strong"><strong>$ tree ops_example/</strong></span>
<span class="strong"><strong>ops_example/</strong></span>
<span class="strong"><strong>└── A</strong></span>
<span class="strong"><strong>    ├── C</strong></span>
<span class="strong"><strong>    └── D</strong></span>
<span class="strong"><strong>        ├── ex1d.txt</strong></span>
<span class="strong"><strong>        ├── ex2.txt</strong></span>
<span class="strong"><strong>        └── ex3.txt
</strong></span></code></pre></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="ch07lvl3sec20"></a>Manipulating pathnames</h4></div></div></div><p>Let's explore a little more the <span>abilities</span><a class="indexterm" id="id326296583"></a> of <code class="literal">os.path</code> by means of a simple example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15"># files/paths.py
import os

filename = 'fear.txt'
path = os.path.abspath(filename)

print(path)
print(os.path.basename(path))
print(os.path.dirname(path))
print(os.path.splitext(path))
print(os.path.split(path))

readme_path = os.path.join(
    os.path.dirname(path), '..', '..', 'README.rst')

</code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16">print(readme_path)
print(os.path.normpath(readme_path))</code></pre></div><p>Reading the result is probably a good enough explanation for this simple example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="17"><span class="strong"><strong>/Users/fab/srv/lpp/ch7/files/fear.txt           # path</strong></span>
<span class="strong"><strong>fear.txt                                        # basename</strong></span>
<span class="strong"><strong>/Users/fab/srv/lpp/ch7/files                    # dirname</strong></span>
<span class="strong"><strong>('/Users/fab/srv/lpp/ch7/files/fear', '.txt')   # splitext</strong></span>
<span class="strong"><strong>('/Users/fab/srv/lpp/ch7/files', 'fear.txt')    # split</strong></span>
<span class="strong"><strong>/Users/fab/srv/lpp/ch7/files/../../README.rst   # readme_path</strong></span>
<span class="strong"><strong>/Users/fab/srv/lpp/README.rst                   # normalized</strong></span></code></pre></div></div></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec94"></a>Temporary files and directories</h3></div></div></div><p>Sometimes, it's very <span>useful</span><a class="indexterm" id="id326296645"></a> to be able to create a <span>temporary</span><a class="indexterm" id="id326296651"></a> directory or file when running some code. For example, when writing tests that affect the disk, you can use temporary files and directories to run your logic and assert that it's correct, and to be sure that at the end of the test run, the test folder has no leftovers. Let's see how you do it in Python:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="18"># files/tmp.py
import os
from tempfile import NamedTemporaryFile, TemporaryDirectory

with TemporaryDirectory(dir='.') as td:
    print('Temp directory:', td)
    with NamedTemporaryFile(dir=td) as t:
        name = t.name
        print(os.path.abspath(name))</code></pre></div><p>The preceding example is quite straightforward: we create a temporary directory in the current one ("<code class="literal">.</code>"), and we create a named temporary file in it. We print the filename, as well as its full path:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="19"><span class="strong"><strong>$ python tmp.py</strong></span>
<span class="strong"><strong>Temp directory: ./tmpwa9bdwgo</strong></span>
<span class="strong"><strong>/Users/fab/srv/lpp/ch7/files/tmpwa9bdwgo/tmp3d45hm46
</strong></span></code></pre></div><p>Running this script will produce a different result every time. After all, it's a temporary random name we're creating here, right?</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec95"></a>Directory content</h3></div></div></div><p>With Python, you can also inspect the <span>content</span><a class="indexterm" id="id326296691"></a> of a directory. I'll show you two ways of doing this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="20"># files/listing.py
import os

with os.scandir('.') as it:
    for entry in it:
        print(
            entry.name, entry.path,
            'File' if entry.is_file() else 'Folder'
        )</code></pre></div><p>This snippet uses <code class="literal">os.scandir</code>, called on the current directory. We iterate on the results, each of which is an instance of <code class="literal">os.DirEntry</code>, a nice class that exposes useful properties and methods. In the code, we access a subset of those: <code class="literal">name</code>, <code class="literal">path</code>, and <code class="literal">is_file()</code>. Running the code yields the following (I omitted a few results for brevity):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="21"><span class="strong"><strong>$ python listing.py</strong></span>
<span class="strong"><strong>fixed_amount.py ./fixed_amount.py File</strong></span>
<span class="strong"><strong>existence.py ./existence.py File</strong></span>
<span class="strong"><strong>...</strong></span>
<span class="strong"><strong>ops_example ./ops_example Folder</strong></span>
<span class="strong"><strong>...</strong></span></code></pre></div><p>A more powerful way to scan a directory tree is given to us by <code class="literal">os.walk</code>. Let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="22"># files/walking.py
import os

for root, dirs, files in os.walk('.'):
    print(os.path.abspath(root))
    if dirs:
        print('Directories:')
        for dir_ in dirs:
            print(dir_)
        print()
    if files:
        print('Files:')
        for filename in files:
            print(filename)
        print()</code></pre></div><p>Running the preceding snippet will <span>produce</span><a class="indexterm" id="id326346665"></a> a list of all files and directories in the current one, and it will do the same for each sub-directory.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec96"></a>File and directory compression</h3></div></div></div><p>Before we leave <span>this</span><a class="indexterm" id="id326346680"></a> section, let me give you <span>an</span><a class="indexterm" id="id326346758"></a> example of how to create a compressed file. In the source code of the book, I have two examples: one creates a ZIP file, while the other one creates a <code class="literal">tar.gz</code> file. Python allows you to create compressed files in several different ways and formats. Here, I am going to show you how to create the most common one, ZIP:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="23"># files/compression/zip.py
from zipfile import ZipFile

with ZipFile('example.zip', 'w') as zp:
    zp.write('content1.txt')
    zp.write('content2.txt')
    zp.write('subfolder/content3.txt')
    zp.write('subfolder/content4.txt')

with ZipFile('example.zip') as zp:
    zp.extract('content1.txt', 'extract_zip')
    zp.extract('subfolder/content3.txt', 'extract_zip')</code></pre></div><p>In the preceding code, we import <code class="literal">ZipFile</code>, and then, within a context manager, we write into it four dummy context files (two of which are in a sub-folder, to show ZIP preserves the full path). Afterwards, as an example, we open the compressed file and extract a couple of files from it, into the <code class="literal">extract_zip</code> directory. If you are interested in learning <span>more</span><a class="indexterm" id="id326346782"></a> about data compression, make sure you check out the <span class="emphasis"><em>Data Compression and Archiving</em></span>section on the standard library (<a class="ulink" href="https://docs.python.org/3.7/library/archiving.html" target="_blank">https://docs.python.org/3.7/library/archiving.html</a>), where you'll be able to learn all about this topic.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:7:ch07lvl1sec66:working-with-files-and-directories:Working with files and directories - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>