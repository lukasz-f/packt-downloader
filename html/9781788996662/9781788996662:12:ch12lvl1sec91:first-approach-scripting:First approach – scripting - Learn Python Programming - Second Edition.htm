<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">First approach – scripting - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec91/first-approach-scripting" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec91/first-approach-scripting" rel="canonical"/>
<meta content="Now, let's start writing the script. I'll go through the source in three steps: imports, arguments parsing, and business logic." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="First approach – scripting - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Now, let's start writing the script. I'll go through the source in three steps: imports, arguments parsing, and business logic." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/12/ch12lvl1sec91/first-approach-scripting" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="First approach – scripting - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Now, let's start writing the script. I'll go through the source in three steps: imports, arguments parsing, and business logic." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/script.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/profitwell.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/inferredEvents.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/445429252334850"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/fbevents.js"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/gtm.js"></script><script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/f(1).txt"></script><script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "First approach – scripting - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Now, let's start writing the script. I'll go through the source in three steps: imports, arguments parsing, and business logic.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch12lvl1sec91"></a>First approach – scripting</h2></div></div><hr/></div><p>Now, let's start <span>writing</span><a class="indexterm" id="id326441252"></a> the script. I'll go through the source in three steps: imports, arguments parsing, and business logic.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec142"></a>The imports</h3></div></div></div><p>Here's how the <span>script</span><a class="indexterm" id="id325919213"></a> starts:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># scrape.py
import argparse
import base64
import json
import os
from bs4 import BeautifulSoup
import requests</code></pre></div><p>Going through them from the top, you can see that we'll need to parse the arguments, which we'll feed to the script itself (<code class="literal">argparse</code>). We will need the <code class="literal">base64</code> library to save the images within a JSON file (<code class="literal">json</code>), and we'll need to open files for writing (<code class="literal">os</code>). Finally, we'll need <code class="literal">BeautifulSoup</code> for scraping the web page easily, and <code class="literal">requests</code> to fetch its content. I assume you're familiar with <code class="literal">requests</code> as we have used it in previous chapters.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note80"></a>Note</h3><p>We will explore the HTTP protocol and the <code class="literal">requests</code> mechanism in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/14" linkend="ch14"><span>Chapter 14</span></a>, <span class="emphasis"><em>Web Development</em></span>, so for now, let's just (simplistically) say that we perform an HTTP request to fetch the content of a web page. We can do it programmatically using a library, such as <code class="literal">requests</code>, and it's more or less the equivalent of typing a URL in your browser and pressing <span class="emphasis"><em><span class="strong"><strong>Enter</strong></span></em></span> (the browser then fetches the content of a web page and displays it to you).</p></div><p>Of all these imports, only the last two don't belong to the Python standard library, so make sure you have them installed:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>$ pip freeze | egrep -i "soup|requests"</strong></span>
<span class="strong"><strong>beautifulsoup4==4.6.0</strong></span>
<span class="strong"><strong>requests==2.18.4</strong></span></code></pre></div><p>Of course, the version numbers might be different for you. If they're not installed, use this command to do so:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>$ pip install beautifulsoup4==4.6.0 requests==2.18.4</strong></span></code></pre></div><p>At this point, the only thing that I reckon might confuse you is the <code class="literal">base64/json</code> couple, so allow me to spend a few words on that.</p><p>As we saw in the previous chapter, JSON is one of the <span>most</span><a class="indexterm" id="id326247968"></a> popular formats for data exchange between applications. It's also widely used for other purposes too, for example, to save data in a file. In our script, we're going to offer the user the ability to save images as image files, or as a JSON single file. Within the JSON, we'll put a dictionary with keys as the image names and values as their content. The only issue is that saving images in the binary format is tricky, and this is where the <code class="literal">base64</code> library comes to the rescue.</p><p>The <code class="literal">base64</code> library is actually quite useful. For example, every time you send an email with an image attached to it, the image gets encoded with <code class="literal">base64</code> before the email is sent. On the recipient side, images are automatically decoded into their original binary format so that the email client can display them.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec143"></a>Parsing arguments</h3></div></div></div><p>Now that the <span>technicalities</span><a class="indexterm" id="id326247994"></a> are out of the way, let's see the second section of our script (it should be at the end of the <code class="literal">scrape.py</code> module):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3">if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Scrape a webpage.')
    parser.add_argument(
        '-t',
        '--type',
        choices=['all', 'png', 'jpg'],
        default='all',
        help='The image type we want to scrape.')
    parser.add_argument(
        '-f',
        '--format',
        choices=['img', 'json'],
        default='img',
        help='The format images are _saved to.')
    parser.add_argument(
        'url',
        help='The URL we want to scrape for images.')
    args = parser.parse_args()
    scrape(args.url, args.format, args.type)</code></pre></div><p>Look at that first line; it is a very common idiom when it comes to scripting. According to the official Python documentation, the <code class="literal">'__main__'</code> string is the name of the scope in which top-level code executes. A module's <code class="literal">__name__</code> is set equal to <code class="literal">'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p><p>Therefore, if you put the execution logic under that <code class="literal">if</code>, it will be run only when you run the script directly, as its <code class="literal">__name__</code> will be <code class="literal">'__main__'</code>. On the other hand, should you import from this module, then its name will be set to something else, so the logic under the <code class="literal">if</code> won't run.</p><p>The first thing we do is define our parser. I would recommend using the standard library module, <code class="literal">argparse</code>, which is simple enough and quite powerful. There are other options out there, but in this case, <code class="literal">argparse</code> will provide us with all we need.</p><p>We want to feed our script three <span>different</span><a class="indexterm" id="id326273342"></a> pieces of data: the types of images we want to save, the format in which we want to save them, and the URL for the page to be scraped.</p><p>The types can be PNGs, JPGs, or both (default), while the format can be either image or JSON, image being the default. URL is the only mandatory argument.</p><p>So, we add the <code class="literal">-t</code> option, allowing also the long version, <code class="literal">--type</code>. The choices are <code class="literal">'all'</code>, <code class="literal">'png'</code>, and <code class="literal">'jpg'</code>. We set the default to <code class="literal">'all'</code> and we add a <code class="literal">help</code> message.</p><p>We do a similar procedure for the <code class="literal">format</code> argument, allowing both the short and long syntax (<code class="literal">-f</code> and <code class="literal">--format</code>), and finally we add the <code class="literal">url</code> argument, which is the only one that is specified differently so that it won't be treated as an option, but rather as a positional argument.</p><p>In order to parse all the arguments, all we need is <code class="literal">parser.parse_args()</code>. Very simple, isn't it?</p><p>The last line is where we trigger the actual logic, by calling the <code class="literal">scrape</code> function, passing all the arguments we just parsed. We will see its definition shortly. The nice thing about <code class="literal">argparse</code> is that if you call the script by passing <code class="literal">-h</code>, it will print a nice usage text for you automatically. Let's try it out:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>$ python scrape.py -h</strong></span>
<span class="strong"><strong>usage: scrape.py [-h] [-t {all,png,jpg}] [-f {img,json}] url</strong></span>

<span class="strong"><strong>Scrape a webpage.</strong></span>

<span class="strong"><strong>positional arguments:</strong></span>
<span class="strong"><strong>  url The URL we want to scrape for images.</strong></span>

</code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>optional arguments:</strong></span>
<span class="strong"><strong>  -h, --help show this help message and exit</strong></span>
<span class="strong"><strong>  -t {all,png,jpg}, --type {all,png,jpg}</strong></span>
<span class="strong"><strong>                        The image type we want to scrape.</strong></span>
<span class="strong"><strong>  -f {img,json}, --format {img,json}</strong></span>
<span class="strong"><strong>                        The format images are _saved to.</strong></span></code></pre></div><p>If you think about it, the one true advantage of this is that we just need to specify the arguments and we don't have to worry about the usage text, which means we won't have to keep it in sync with the arguments' definition every time we change something. This is precious.</p><p>Here are a few <span>different</span><a class="indexterm" id="id326278013"></a> ways to call our <code class="literal">scrape.py</code> script, which demonstrate that <code class="literal">type</code> and <code class="literal">format</code> are optional, and how you can use the short and long syntaxes to employ them:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"><span class="strong"><strong>$ python scrape.py http://localhost:8000</strong></span>
<span class="strong"><strong>$ python scrape.py -t png http://localhost:8000</strong></span>
<span class="strong"><strong>$ python scrape.py --type=jpg -f json http://localhost:8000</strong></span></code></pre></div><p>The first one is using default values for <code class="literal">type</code> and <code class="literal">format</code>. The second one will save only PNG images, and the third one will save only JPGs, but in JSON format.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch12lvl2sec144"></a>The business logic</h3></div></div></div><p>Now that we've seen the scaffolding, let's deep dive into the actual logic (if it looks intimidating, don't worry; we'll go through it together). Within the script, this logic lies after the <span>imports</span><a class="indexterm" id="id326346748"></a> and before the parsing (before the <code class="literal">if __name__</code> clause):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7">def scrape(url, format_, type_):
    try:
        page = requests.get(url)
    except requests.RequestException as err:
        print(str(err))
    else:
        soup = BeautifulSoup(page.content, 'html.parser')
        images = _fetch_images(soup, url)
        images = _filter_images(images, type_)
        _save(images, format_)</code></pre></div><p>Let's start with the <code class="literal">scrape</code> function. The first thing it does is fetch the page at the given <code class="literal">url</code> argument. Whatever error may happen while doing this, we trap it in <code class="literal">RequestException</code> (<code class="literal">err</code>) and print it. <code class="literal">RequestException</code> is the base exception class for all the exceptions in the <code class="literal">requests</code> library.</p><p>However, if things go well, and we have a page back from the <code class="literal">GET</code> request, then we can proceed (<code class="literal">else</code> branch) and feed its content to the <code class="literal">BeautifulSoup</code> parser. The <code class="literal">BeautifulSoup</code> library allows us to parse a web page in no time, without having to write all the logic that would be needed to find all the images in a page, which we really don't want to do. It's not as easy as it seems, and reinventing the wheel is never good. To fetch images, we use the <code class="literal">_fetch_images</code> function and we filter them with <code class="literal">_filter_images</code>. Finally, we call <code class="literal">_save</code> with the result.</p><p>Splitting the code into different functions with meaningful names allows us to read it more easily. Even if you haven't seen the logic of the <code class="literal">_fetch_images</code>, <code class="literal">_filter_images</code>, and <code class="literal">_save</code> functions, it's not hard to predict what they do, right? Check out the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8">def _fetch_images(soup, base_url):
    images = []
    for img in soup.findAll('img'):
        src = img.get('src')
        img_url = f'{base_url}/{src}'
        name = img_url.split('/')[-1]
        images.append(dict(name=name, url=img_url))
    return images</code></pre></div><p><code class="literal">_fetch_images</code> takes a <code class="literal">BeautifulSoup</code> object and a base URL. All it does is loop through all of the images found on the page and fill in the <code class="literal">name</code> and <code class="literal">url</code> information about them in a dictionary (one per image). All dictionaries are added to the <code class="literal">images</code> list, which is returned at the end.</p><p>There is some trickery going on when we get the name of an image. We split the <code class="literal">img_url</code> (<code class="literal">http://localhost:8000/img/my_image_name.png</code>) string using <code class="literal">'/'</code> as a separator, and we take the last item as the image name. There is a more robust way of doing this, but for this example it would be overkill. If you want to see the details of each step, try to break this logic down into smaller steps, and print the result of each of them to help yourself understand. Toward the end of the book, I'll show you another technique for <span>debugging</span><a class="indexterm" id="id326382909"></a> in a much more efficient way.</p><p>Anyway, by just adding <code class="literal">print(images)</code> at the end of the <code class="literal">_fetch_images</code> function, we get this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"><span class="strong"><strong>[{'url': 'http://localhost:8000/img/owl-alcohol.png', 'name': 'owl-alcohol.png'}, {'url': 'http://localhost:8000/img/owl-book.png', 'name': 'owl-book.png'}, ...]</strong></span></code></pre></div><p>I truncated the result for brevity. You can see each dictionary has a <code class="literal">url</code> and <code class="literal">name</code> key/value pair, which we can use to fetch, identify, and save our images as we like. At this point, I hear you asking what would happen if the images on the page were specified with an absolute path instead of a relative one, right? Good question!</p><p>The answer is that the script will fail to download them because this logic expects relative paths. I was about to add a bit of logic to solve this issue when I thought that, at this stage, it would be a nice exercise for you to do it, so I'll leave it up to you to fix it.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip81"></a>Note</h3><p><span>Hint:</span> Inspect the start of that <code class="literal">src</code> variable. If it starts with <code class="literal">'http'</code>, it's probably an absolute path. You might also want to checkout <code class="literal">urllib.parse</code> to do that.</p></div><p>I hope the body of the <code class="literal">_filter_images</code> function is interesting to you. I wanted to show you how to check on multiple extensions using a mapping technique:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10">def _filter_images(images, type_):
    if type_ == 'all':
        return images
    ext_map = {
        'png': ['.png'],
        'jpg': ['.jpg', '.jpeg'],
    }
    return [
        img for img in images
        if _matches_extension(img['name'], ext_map[type_])
    ]

def _matches_extension(filename, extension_list):
    name, extension = os.path.splitext(filename.lower())
    return extension in extension_list</code></pre></div><p>In this function, if <code class="literal">type_</code> is <code class="literal">all</code>, then no filtering is required, so we just return all the images. On the other hand, when <code class="literal">type_</code> is not <code class="literal">all</code>, we get the allowed extensions from the <code class="literal">ext_map</code> dictionary, and use it to filter the images in the list comprehension that ends the function body. You can see that by using another helper function, <code class="literal">_matches_extension</code>, I have made the list comprehension simpler and more readable.</p><p>All <code class="literal">_matches_extension</code> does is split the name of the image getting its extension and check whether it is within the list of allowed ones. Can you find one micro-improvement (speed-wise) that could be made to this function?</p><p>I'm sure you're wondering why I have <span>collected</span><a class="indexterm" id="id326441260"></a> all the images in the list and then removed them, instead of checking whether I wanted to save them before adding them to the list. The first reason is that I needed <code class="literal">_fetch_images</code> in the GUI application as it is now. The second reason is that combining, fetching, and filtering would produce a longer and more complicated function, and I'm trying to keep the complexity level down. The third reason is that this could be a nice exercise for you to do:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11">def _save(images, format_):
    if images:
        if format_ == 'img':
            _save_images(images)
        else:
            _save_json(images)
        print('Done')
    else:
        print('No images to save.')

def _save_images(images):
    for img in images:
        img_data = requests.get(img['url']).content
        with open(img['name'], 'wb') as f:
            f.write(img_data)

def _save_json(images):
    data = {}
    for img in images:
        img_data = requests.get(img['url']).content
        b64_img_data = base64.b64encode(img_data)
        str_img_data = b64_img_data.decode('utf-8')
        data[img['name']] = str_img_data
    with open('images.json', 'w') as ijson:
        ijson.write(json.dumps(data))</code></pre></div><p>Let's keep going through the code and inspect the <code class="literal">_save</code> function. You can see that, when <code class="literal">images</code> isn't empty, this basically acts as a dispatcher. We either call <code class="literal">_save_images</code> or <code class="literal">_save_json</code>, depending on what information is stored in the <code class="literal">format_</code> variable.</p><p>We are almost done. Let's jump to <code class="literal">_save_images</code>. We loop on the <code class="literal">images</code> list and for each dictionary we find there, we perform a <code class="literal">GET</code> request on the image URL and save its content in a file, which we name as the image itself.</p><p>Finally, let's now step into the <code class="literal">_save_json</code> function. It's very similar to the previous one. We basically fill in the <code class="literal">data</code> dictionary. The image name is the <span class="emphasis"><em>key</em></span>, and the Base64 representation of its binary content is the <span class="emphasis"><em>value</em></span>. When we're done populating our dictionary, we use the <code class="literal">json</code> library to dump it in the <code class="literal">images.json</code> file. I'll give you a small preview of that:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12"># images.json (truncated)
{
  "owl-alcohol.png": "iVBORw0KGgoAAAANSUhEUgAAASwAAAEICA...
  "owl-book.png": "iVBORw0KGgoAAAANSUhEUgAAASwAAAEbCAYAA...
  "owl-books.png": "iVBORw0KGgoAAAANSUhEUgAAASwAAAElCAYA...
  "owl-ebook.jpg": "/9j/4AAQSkZJRgABAQEAMQAxAAD/2wBDAAEB...
  "owl-rose.jpeg": "/9j/4AAQSkZJRgABAQEANAA0AAD/2wBDAAEB...
}</code></pre></div><p>And that's it! Now, before <span>proceeding</span><a class="indexterm" id="id325644432"></a> to the next section, make sure you play with this script and understand how it works. Try to modify something, print out intermediate results, add a new argument or functionality, or scramble the logic. We're going to migrate it into a GUI application now, which will add a layer of complexity simply because we'll have to build the GUI interface, so it's important that you're well acquainted with the business logic—it will allow you to concentrate on the rest of the code.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><div></div><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662:12:ch12lvl1sec91:first-approach-scripting:First approach – scripting - Learn Python Programming - Second Edition_files/adsct" type="text/javascript"></script></body></html>