<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Persisting data on disk - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec69/persisting-data-on-disk" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec69/persisting-data-on-disk" rel="canonical"/>
<meta content="In the last section of this chapter, we're exploring how to persist data on disk in three different formats." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Persisting data on disk - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="In the last section of this chapter, we're exploring how to persist data on disk in three different formats." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/7/ch07lvl1sec69/persisting-data-on-disk" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Persisting data on disk - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="In the last section of this chapter, we're exploring how to persist data on disk in three different formats." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/script.js"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/profitwell.js"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/inferredEvents.js"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/445429252334850"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/fbevents.js"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/gtm.js"></script><script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/f(1).txt"></script><script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Persisting data on disk - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "In the last section of this chapter, we're exploring how to persist data on disk in three different formats.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch07lvl1sec69"></a>Persisting data on disk</h2></div></div><hr/></div><p>In the last <span>section</span><a class="indexterm" id="id325916595"></a> of this chapter, we're exploring how to persist data on disk in three different formats. We will explore <code class="literal">pickle</code>, <code class="literal">shelve</code>, and a short example that will involve accessing a database using SQLAlchemy, the most widely adopted ORM library in the Python ecosystem.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec100"></a>Serializing data with pickle</h3></div></div></div><p>The <code class="literal">pickle</code> module, from the Python <span>standard</span><a class="indexterm" id="id325915729"></a> library, offers tools to <span>convert</span><a class="indexterm" id="id325915842"></a> Python objects into byte streams, and vice versa. Even though there is a partial overlap in the API that <code class="literal">pickle</code> and <code class="literal">json</code> expose, the two are quite different. As we have seen previously in this chapter, JSON is a text format, human readable, language independent, and supports only a restricted subset of Python data types. The <code class="literal">pickle</code> module, on the other hand, is not human readable, translates to bytes, is Python specific, and, thanks to the wonderful Python introspection capabilities, it supports an extremely large amount of data types.</p><p>Regardless of these differences, though, which you should know when you consider whether to use one or the other, I think that the most important concern regarding <code class="literal">pickle</code> lies in the security threats you are exposed to when you use it. <span class="emphasis"><em>Unpickling</em></span> erroneous or malicious data from an untrusted source can be very dangerous, so if you decide to adopt it in your application, you need to be extra careful.</p><p>That said, let's see it in action, by means of a simple example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># persistence/pickler.py
import pickle
from dataclasses import dataclass

@dataclass
class Person:
    first_name: str
    last_name: str
    id: int

    def greet(self):
        print(f'Hi, I am {self.first_name} {self.last_name}'
              f' and my ID is {self.id}'
        )

people = [
    Person('Obi-Wan', 'Kenobi', 123),
    Person('Anakin', 'Skywalker', 456),
]

# save data in binary format to a file
with open('data.pickle', 'wb') as stream:
    pickle.dump(people, stream)

# load data from a file
with open('data.pickle', 'rb') as stream:
    peeps = pickle.load(stream)

for person in peeps:
    person.greet()</code></pre></div><p>In the previous example, we create a <code class="literal">Person</code> class using the <code class="literal">dataclass</code> decorator, which we have seen in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/6" linkend="ch06">Chapter 6</a>, <span class="emphasis"><em>OOP, Decorators, and Iterators</em></span>. The only reason I wrote this example with a data class is to <span>show</span><a class="indexterm" id="id325699132"></a> you how effortlessly <code class="literal">pickle</code> deals with it, with no <span>need</span><a class="indexterm" id="id325699144"></a> for us to do anything we wouldn't do for a simpler data type.</p><p>The class has three attributes: <code class="literal">first_name</code>, <code class="literal">last_name</code>, and <code class="literal">id</code>. It also exposes a <code class="literal">greet</code> method, which simply prints a hello message with the data.</p><p>We create a list of instances, and then we save it to a file. In order to do so, we use <code class="literal">pickle.dump</code>, to which we feed the content to be <span class="emphasis"><em>pickled</em></span>, and the stream to which we want to write. Immediately after that, we read from that same file, and by using <code class="literal">pickle.load</code>, we convert back into Python the whole content of that stream. Just to make sure that the objects have been converted correctly, we call the <code class="literal">greet</code> method on both of them. The result is the following:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>$ python pickler.py</strong></span>
<span class="strong"><strong>Hi, I am Obi-Wan Kenobi and my ID is 123</strong></span>
<span class="strong"><strong>Hi, I am Anakin Skywalker and my ID is 456  </strong></span></code></pre></div><p>The <code class="literal">pickle</code> module also allows you to convert to (and from) byte objects, by means of the <code class="literal">dumps</code> and <code class="literal">loads</code> functions (note the <code class="literal">s</code> at the end of both names). In day-to-day applications, <code class="literal">pickle</code> is usually used when we need to persist Python data that is not supposed to be exchanged with another application. One example I stumbled upon recently was the session management in a <code class="literal">flask</code> plugin, which pickles the session object before sending it to Redis. In practice, though, you are unlikely to have to deal with this library very often.</p><p>Another tool that is possibly used even less, but that proves to be very useful when you are short of resources, is <code class="literal">shelve</code>.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec101"></a>Saving data with shelve</h3></div></div></div><p>A <code class="literal">shelf</code>, is a <span>persistent</span><a class="indexterm" id="id325891888"></a> dictionary-like object. The beauty of it is <span>that</span><a class="indexterm" id="id325891896"></a> the values you save into a <code class="literal">shelf</code> can be any object you can <code class="literal">pickle</code>, so you're not restricted like you would be if you were using a database. Albeit interesting and useful, the <code class="literal">shelve</code> module is used quite rarely in practice. Just for completeness, let's see a quick example of how it works:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># persistence/shelf.py
import shelve

class Person:
    def __init__(self, name, id):
        self.name = name
        self.id = id

with shelve.open('shelf1.shelve') as db:
    db['obi1'] = Person('Obi-Wan', 123)
    db['ani'] = Person('Anakin', 456)
    db['a_list'] = [2, 3, 5]
    db['delete_me'] = 'we will have to delete this one...'

    print(list(db.keys()))  # ['ani', 'a_list', 'delete_me', 'obi1']

    del db['delete_me']  # gone!

    print(list(db.keys()))  # ['ani', 'a_list', 'obi1']

    print('delete_me' in db)  # False
    print('ani' in db)  # True

    a_list = db['a_list']
    a_list.append(7)</code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3">    db['a_list'] = a_list
    print(db['a_list'])  # [2, 3, 5, 7]</code></pre></div><p>Apart from the wiring and the boilerplate around it, the previous example resembles an exercise with dictionaries. We create a simple <code class="literal">Person</code> class and then we open a <code class="literal">shelve</code> file within a context manager. As you can see, we use the dictionary syntax to store four objects: two <code class="literal">Person</code> instances, a list, and a string. If we print the <code class="literal">keys,</code> we get a list containing the four keys we used. Immediately after printing it, we delete the (aptly named) <code class="literal">delete_me</code> key/value pair from shelf. Printing the <code class="literal">keys</code> again shows the deletion has succeeded. We then test a couple of keys for membership, and finally, we append number <code class="literal">7</code> to <code class="literal">a_list</code>. Notice how we have to extract the list from the shelf, modify it, and save it again.</p><p>In case this <span>behavior</span><a class="indexterm" id="id325915802"></a> is undesired, there is <span>something</span><a class="indexterm" id="id325915813"></a> we can do:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># persistence/shelf.py
with shelve.open('shelf2.shelve', writeback=True) as db:
    db['a_list'] = [11, 13, 17]
    db['a_list'].append(19)  # in-place append!
    print(db['a_list'])  # [11, 13, 17, 19]</code></pre></div><p>By opening the shelf with <code class="literal">writeback=True</code>, we enable the <code class="literal">writeback</code> feature, which allows us to simply append to <code class="literal">a_list</code> as if it actually was a value within a regular dictionary. The reason why this feature is not active by default is that it comes with a price that you pay in terms of memory consumption and slower closing of the shelf.</p><p>Now that we have paid homage to the standard library modules related to data persistence, let's take a look at the most widely adopted ORM in the Python ecosystem: <span class="emphasis"><em>SQLAlchemy</em></span>.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch07lvl2sec102"></a>Saving data to a database</h3></div></div></div><p>For this example, we are <span>going</span><a class="indexterm" id="id326492435"></a> to work with an in-memory database, which <span>will</span><a class="indexterm" id="id326492443"></a> make things simpler for us. In the source code of the book, I have left a couple of comments to show you how to generate a SQLite file, so I hope you'll explore that option as well.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note62"></a>Note</h3><p>You can find a free database browser for SQLite at <a class="ulink" href="http://sqlitebrowser.org/" target="_blank">sqlitebrowser.org</a>. If you are not satisfied with it, you will be able to find a wide range of tools, some free, some not free, that you can use to access and manipulate a database file.</p></div><p>Before we dive into the code, allow me to briefly introduce the concept of a relational database.</p><p>A relational database is a database that allows <span>you</span><a class="indexterm" id="id326492494"></a> to save data following the <span class="strong"><strong>relational model</strong></span>, invented in 1969 by Edgar F. Codd. In this model, data is stored in one or more tables. Each table has rows (also known as <span class="strong"><strong>records</strong></span>, or <span class="strong"><strong>tuples</strong></span>), each of which represents an entry in the table. Tables also have columns (also known as <span class="strong"><strong>attributes</strong></span>), each of which represents an attribute of the records. Each record is identified through a unique key, more commonly known as the <span class="strong"><strong>primary key</strong></span>, which is the union of one or more columns in the table. To give you an example: imagine a table called <code class="literal">Users</code>, with columns <code class="literal">id</code>, <code class="literal">username</code>, <code class="literal">password</code>, <code class="literal">name</code>, and <code class="literal">surname</code>. Such a table would be perfect to contain users of our system. Each row would represent a different user. For example, a row with the values <code class="literal">3</code>, <code class="literal">gianchub</code>, <code class="literal">my_wonderful_pwd</code>, <code class="literal">Fabrizio</code>, and <code class="literal">Romano</code>, would represent my user in the system.</p><p>The reason why the model is called <span class="strong"><strong>relational</strong></span> is because you can establish relations between tables. For example, if you added a table called <code class="literal">PhoneNumbers</code> to our fictitious database, you could insert phone numbers into it, and then, through a relation, establish which phone number belongs to which user.</p><p>In order to query a relational database, we <span>need</span><a class="indexterm" id="id326502942"></a> a special language. The main standard is called <span class="strong"><strong>SQL</strong></span>, which stands for <span class="strong"><strong>Structured Query Language</strong></span>. It is born out of something called <span class="strong"><strong>relational algebra</strong></span>, which is a very <span>nice</span><a class="indexterm" id="id326502964"></a> family of algebras used to model data stored according to the relational model, and performing queries on it. The most common operations you can perform usually involve filtering on the rows or columns, joining tables, aggregating the results according to some criteria, and so on. To give you an example in English, a query on our imaginary database could be: <span class="emphasis"><em>Fetch all users (username, name, surname) whose username starts with "m", who have at most one phone number</em></span>. In this query, we are asking for a subset of the columns in the <code class="literal">User</code> table. We are filtering on users by taking only those whose username starts with the letter <span class="emphasis"><em>m</em></span>, and even further, only those who have at most one phone number.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note63"></a>Note</h3><p>Back in the days when I was a student in Padova, I spent a whole semester learning both the relational algebra semantics, and the standard SQL (amongst other things). If it wasn't for a major bicycle accident I had the day of the exam, I would say that this was one of the most fun exams I ever had to prepare.</p></div><p>Now, each database comes with its own <span class="emphasis"><em>flavor</em></span> of SQL. They all respect the standard to some extent, but none fully does, and they are all different from one another in some respects. This poses an issue in modern software development. If our application contains SQL code, it is quite likely that if we decided to use a different database engine, or maybe a different version of the same engine, we would find our SQL code needs amending.</p><p>This can be quite painful, especially since SQL queries can become very, very complicated quite quickly. In order to alleviate this pain a little, computer scientists (<span class="emphasis"><em>bless them</em></span>) have created code that maps objects of a particular language to tables of a <span>relational</span><a class="indexterm" id="id326503509"></a> database. Unsurprisingly, the name of such tools is <span class="strong"><strong>Object-Relational Mapping</strong></span> (<span class="strong"><strong>ORM</strong></span>s).</p><p>In modern application development, you would normally start interacting with a database by using an ORM, and should you find yourself in a situation where you can't perform a query you need to perform, through the ORM, you <span>would</span><a class="indexterm" id="id326503529"></a> then resort to <span>using</span><a class="indexterm" id="id326503545"></a> SQL directly. This is a good compromise between having no SQL at all, and using no ORM, which ultimately means specializing the code that interacts with the database, with the aforementioned disadvantages.</p><p>In this section, I'd like to show an example that leverages SQLAlchemy, the most popular Python ORM. We are going to define two models (<code class="literal">Person</code> and <code class="literal">Address</code>) which map to a table each, and then we're going to populate the database and perform a few queries on it.</p><p>Let's start with the model declarations:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"># persistence/alchemy_models.py
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import (
    Column, Integer, String, ForeignKey, create_engine)
from sqlalchemy.orm import relationship</code></pre></div><p>At the beginning, we import some functions and types. The first thing we need to do then is to create an engine. This engine tells SQLAlchemy about the type of database we have chosen for our example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># persistence/alchemy_models.py
engine = create_engine('sqlite:///:memory:')
Base = declarative_base()

class Person(Base):
    __tablename__ = 'person'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

    addresses = relationship(
        'Address',
        back_populates='person',
        order_by='Address.email',
        cascade='all, delete-orphan'
    )

    def __repr__(self):
        return f'{self.name}(id={self.id})'

class Address(Base):
    __tablename__ = 'address'

    id = Column(Integer, primary_key=True)
    email = Column(String)
    person_id = Column(ForeignKey('person.id'))
    person = relationship('Person', back_populates='addresses')

    def __str__(self):
        return self.email
    __repr__ = __str__

Base.metadata.create_all(engine)</code></pre></div><p>Each model then inherits from the <code class="literal">Base</code> table, which in this example consists of the mere default, returned by <code class="literal">declarative_base()</code>. We define <code class="literal">Person</code>, which maps to a table called <code class="literal">person</code>, and exposes the attributes <code class="literal">id</code>, <code class="literal">name</code>, and <code class="literal">age</code>. We also declare a relationship with the <code class="literal">Address</code> model, by stating that accessing the <code class="literal">addresses</code> attribute will fetch all the entries in the <code class="literal">address</code> table that are related to the particular <code class="literal">Person</code> instance we're dealing with. The <code class="literal">cascade</code> option affects how creation and deletion work, but it is a more advanced concept, so I'd suggest you glide on it for now and maybe investigate more later on.</p><p>The last thing we declare is the <code class="literal">__repr__</code> method, which provides us with the official string representation of an object. This is supposed to be a representation that can be used to completely reconstruct the object, but in this example, I simply use it to provide something in output. Python redirects <code class="literal">repr(obj)</code> to a call to <code class="literal">obj.__repr__()</code>.</p><p>We also declare the <code class="literal">Address</code> model, which will contain email addresses, and a reference to the person they belong to. You can see the <code class="literal">person_id</code> and <code class="literal">person</code> attributes are both about setting a relation between the <code class="literal">Address</code> and <code class="literal">Person</code> instances. Note how I declared the <code class="literal">__str__</code> method on <code class="literal">Address</code>, and then assigned an alias to it, called <code class="literal">__repr__</code>. This means that calling both <code class="literal">repr</code> and <code class="literal">str</code> on <code class="literal">Address</code> objects will ultimately result in calling the <code class="literal">__str__</code> method. This is quite a common technique in Python, so I took the opportunity to show it to you here.</p><p>On the last line, we tell the engine to create tables in the database according to our models.</p><p>A deeper understanding of this code would require much more space than I can afford, so I encourage <span>you</span><a class="indexterm" id="id325644448"></a> to read up on <span class="strong"><strong>database management systems</strong></span> (<span class="strong"><strong>DBMS</strong></span>), SQL, Relational Algebra, and SQLAlchemy.</p><p>Now that we have our models, let's use them to persist some data!</p><p>Let's take a look at the following example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># persistence/alchemy.py
from alchemy_models import Person, Address, engine
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)
session = Session()</code></pre></div><p>First we create <code class="literal">session</code>, which is the object we use to manage the database. Next, we proceed by creating two people:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8">anakin = Person(name='Anakin Skywalker', age=32)
obi1 = Person(name='Obi-Wan Kenobi', age=40)</code></pre></div><p>We then add <span>email</span><a class="indexterm" id="id325644483"></a> addresses to <span>both</span><a class="indexterm" id="id325644491"></a> of them, using two different techniques. One assigns them to a list, and the other one simply appends them:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9">obi1.addresses = [
    Address(email='obi1@example.com'),
    Address(email='wanwan@example.com'),
]

anakin.addresses.append(Address(email='ani@example.com'))
anakin.addresses.append(Address(email='evil.dart@example.com'))
anakin.addresses.append(Address(email='vader@example.com'))</code></pre></div><p>We haven't touched the database yet. It's only when we use the session object that something actually happens in it:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="10">session.add(anakin)
session.add(obi1)
session.commit()</code></pre></div><p>Adding the two <code class="literal">Person</code> instances is enough to also add their addresses (this is thanks to the cascading effect). Calling <code class="literal">commit</code> is what actually tells SQLAlchemy to commit the transaction and save the data in the database. A transaction is an operation that provides something like a sandbox, but in a database context. As long as the transaction hasn't been committed, we can roll back any modification we have done to the database, and by so doing, revert to the state we were before starting the transaction itself. SQLAlchemy offers more complex and granular ways to deal with transactions, which you can study in its official documentation, as it is quite an advanced topic. We now query for all the people whose name starts with <code class="literal">Obi</code> by using <code class="literal">like</code>, which hooks to the <code class="literal">LIKE</code> operator in SQL<span class="emphasis"><em>:</em></span></p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="11">obi1 = session.query(Person).filter(
    Person.name.like('Obi%')
).first()
print(obi1, obi1.addresses)</code></pre></div><p>We take the first result of that query (we know we only have Obi-Wan anyway), and print it. We then fetch <code class="literal">anakin</code>, by using an exact match on his name (just to show you a different way of filtering):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="12">anakin = session.query(Person).filter(
    Person.name=='Anakin Skywalker'
).first()
print(anakin, anakin.addresses)</code></pre></div><p>We then capture Anakin's ID, and delete the <code class="literal">anakin</code> object from the global frame:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="13">anakin_id = anakin.id
del anakin</code></pre></div><p>The reason we do this is because I want to show you how to fetch an object by its ID. Before we do that, we write the <code class="literal">display_info</code> function, which we will use to display the full content of the database (fetched starting from the addresses, in order to demonstrate how to fetch objects by using a relation attribute in SQLAlchemy):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="14">def display_info():
    # get all addresses first
    addresses = session.query(Address).all()

    # display results
    for address in addresses:
        print(f'{address.person.name} &lt;{address.email}&gt;')

    # display how many objects we have in total
    print('people: {}, addresses: {}'.format(
        session.query(Person).count(),
        session.query(Address).count())
    )</code></pre></div><p>The <code class="literal">display_info</code> function prints all the addresses, along with the respective person's name, and, at the end, produces a final piece of information regarding the number of objects in the database. We call the function, then <span>we</span><a class="indexterm" id="id325906650"></a> fetch and delete <code class="literal">anakin</code> (think about <span class="emphasis"><em>Darth Vader</em></span> and <span>you</span><a class="indexterm" id="id325906665"></a> won't be sad about deleting him), and then we display the info again, to verify he's actually disappeared from the database:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="15">display_info()

anakin = session.query(Person).get(anakin_id)
session.delete(anakin)
session.commit()

display_info()</code></pre></div><p>The output of all these snippets run together is the following (for your convenience, I have separated the output into four blocks, to reflect the four blocks of code that actually produce that output):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="16"><span class="strong"><strong>$ python alchemy.py</strong></span>
<span class="strong"><strong>Obi-Wan Kenobi(id=2) [obi1@example.com, wanwan@example.com]
</strong></span>
<span class="strong"><strong>Anakin Skywalker(id=1) [ani@example.com, evil.dart@example.com, vader@example.com]</strong></span>
<span class="strong"><strong>
Anakin Skywalker &lt;ani@example.com&gt;</strong></span>
<span class="strong"><strong>Anakin Skywalker &lt;evil.dart@example.com&gt;</strong></span>
<span class="strong"><strong>Anakin Skywalker &lt;vader@example.com&gt;</strong></span>
<span class="strong"><strong>Obi-Wan Kenobi &lt;obi1@example.com&gt;</strong></span>
<span class="strong"><strong>Obi-Wan Kenobi &lt;wanwan@example.com&gt;</strong></span>
<span class="strong"><strong>people: 2, addresses: 5</strong></span>
<span class="strong"><strong>
Obi-Wan Kenobi &lt;obi1@example.com&gt;</strong></span>
<span class="strong"><strong>Obi-Wan Kenobi &lt;wanwan@example.com&gt;</strong></span>
<span class="strong"><strong>people: 1, addresses: 2</strong></span></code></pre></div><p>As you can see from the last two blocks, deleting <code class="literal">anakin</code> has deleted one <code class="literal">Person</code> object, and the three addresses associated with it. Again, this is due to the fact that cascading took place when we deleted <code class="literal">anakin</code>.</p><p>This concludes our brief introduction to data persistence. It is a vast and, at times, complex domain, which I encourage you to explore learning as much theory as possible. Lack of knowledge or proper understanding, when it comes to database systems, can really bite.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_7_ch07lvl1sec69_persisting-data-on-disk_files/adsct" type="text/javascript"></script></body></html>