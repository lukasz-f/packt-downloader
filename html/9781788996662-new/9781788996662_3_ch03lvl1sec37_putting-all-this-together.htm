<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Putting all this together - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/3/ch03lvl1sec37/putting-all-this-together" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/3/ch03lvl1sec37/putting-all-this-together" rel="canonical"/>
<meta content="Now that you have seen all there is to see about conditionals and loops, it's time to spice things up a little, and look at those two examples I anticipated at" name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Putting all this together - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Now that you have seen all there is to see about conditionals and loops, it's time to spice things up a little, and look at those two examples I anticipated at" property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/3/ch03lvl1sec37/putting-all-this-together" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Putting all this together - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Now that you have seen all there is to see about conditionals and loops, it's time to spice things up a little, and look at those two examples I anticipated at" name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/script.js"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/profitwell.js"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/inferredEvents.js"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/445429252334850"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/fbevents.js"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/gtm.js"></script><script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style>
<script async="" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/hotjar-982604(1).js"></script><script async="" charset="utf-8" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/modules.bb88fc9b50ded24ae044.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><style></style><script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/f(1).txt"></script><script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Putting all this together - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Now that you have seen all there is to see about conditionals and loops, it's time to spice things up a little, and look at those two examples I anticipated at",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script><script id="mmpack.0" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch03lvl1sec37"></a>Putting all this together</h2></div></div><hr/></div><p>Now that you have seen all there is to see about conditionals and loops, it's time to spice things up a little, and look at those two examples I anticipated at the beginning of this chapter. We'll mix and match here, so you can see how you can use all these concepts together. Let's start by writing some code to generate a list of prime numbers up to some limit. Please bear in mind that I'm going to write a very inefficient and rudimentary algorithm to detect primes. The important thing for you is to concentrate on those bits in the code that belong to this chapter's subject.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch03lvl2sec47"></a>A prime generator</h3></div></div></div><p>According <span>to</span><a class="indexterm" id="id325977440"></a> Wikipedia:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself. A natural number greater than 1 that is not a prime number is called a composite number.</em></span></p></blockquote></div><p>Based on this definition, if we consider the first 10 <span>natural</span><a class="indexterm" id="id325977422"></a> numbers, we can see that 2, 3, 5, and 7 are primes, while 1, 4, 6, 8, 9, and 10 are not. In order to have a computer tell you whether a number, <span class="emphasis"><em>N</em></span>, is prime, you can divide that number by all natural numbers in the range [2, <span class="emphasis"><em>N</em></span>). If any of those divisions yields zero as a remainder, then the number is not a prime. Enough chatter, let's get down to business. I'll write two versions of this, the second of which will exploit the <code class="literal">for...else</code> syntax:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"># primes.py
primes = []  # this will contain the primes in the end
upto = 100  # the limit, inclusive
for n in range(2, upto + 1):
    is_prime = True  # flag, new at each iteration of outer for
    for divisor in range(2, n):
        if n % divisor == 0:
            is_prime = False
            break</code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1">    if is_prime:  # check on flag
        primes.append(n)
print(primes)</code></pre></div><p>There are a lot of things to notice in the preceding code. First of all, we set up an empty <code class="literal">primes</code> list, which will contain the primes at the end. The limit is <code class="literal">100</code>, and you can see it's inclusive in the way we call <code class="literal">range()</code> in the outer loop. If we wrote <code class="literal">range(2, upto)</code> that would be <span class="emphasis"><em>[2, upto)</em></span>, right? Therefore <code class="literal">range(2, upto + 1)</code> gives us <span class="emphasis"><em>[2, upto + 1) == [2, upto]</em></span>.</p><p>So, there are two <code class="literal">for</code> loops. In the outer one, we loop over the candidate primes, that is, all <span>natural</span><a class="indexterm" id="id325905653"></a> numbers from <code class="literal">2</code> to <code class="literal">upto</code>. Inside each iteration of this outer loop, we set up a flag (which is set to <code class="literal">True</code> at each iteration), and then start dividing the current <code class="literal">n</code> by all numbers from <code class="literal">2</code> to <code class="literal">n - 1</code>. If we find a proper divisor for <code class="literal">n</code>, it means <code class="literal">n</code> is composite, and therefore we set the flag to <code class="literal">False</code> and break the loop. Notice that when we break the inner one, the outer one keeps on going normally. The reason why we break after having found a proper divisor for <code class="literal">n</code> is that we don't need any further information to be able to tell that <code class="literal">n</code> is not a prime.</p><p>When we check on the <code class="literal">is_prime</code> flag, if it is still <code class="literal">True</code>, it means we couldn't find any number in [2, <span class="emphasis"><em>n</em></span>) that is a proper divisor for <code class="literal">n</code>, therefore <code class="literal">n</code> is a prime. We append <code class="literal">n</code> to the <code class="literal">primes</code> list, and hop! Another iteration proceeds, until <code class="literal">n</code> equals <code class="literal">100</code>.</p><p>Running this code yields:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>$ python primes.py</strong></span>
<span class="strong"><strong>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
</strong></span></code></pre></div><p>Before we proceed, one question: of all the iterations of the outer loop, one of them is different from all the others. Could you tell which one, and why? Think about it for a second, go back to the code, try to figure it out for yourself, and then keep reading on.</p><p>Did you figure it out? If not, don't feel bad, it's perfectly normal. I asked you to do it as a small exercise because it's what coders do all the time. The skill to understand what the code does by simply looking at it is something you build over time. It's very important, so try to exercise it whenever you can. I'll tell you the answer now: the iteration that behaves differently from all others is the first one. The reason is because in the first iteration, <code class="literal">n</code> is <code class="literal">2</code>. Therefore the innermost <code class="literal">for</code> loop won't even run, because it's a <code class="literal">for</code> loop that iterates over <code class="literal">range(2, 2)</code>, and what is that if not [2, 2)? Try it out for yourself, write a simple <code class="literal">for</code> loop with that iterable, put a <code class="literal">print</code> in the body suite, and see whether anything happens (it won't...).</p><p>Now, from an algorithmic point of view, this code is inefficient, so let's at least make it more beautiful:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"># primes.else.py
primes = []
upto = 100
for n in range(2, upto + 1):
    for divisor in range(2, n):
        if n % divisor == 0:
            break
    else:
        primes.append(n)
print(primes)</code></pre></div><p>Much nicer, right? The <code class="literal">is_prime</code> flag is gone, and we append <code class="literal">n</code> to the <code class="literal">primes</code> list when we know the inner <code class="literal">for</code> loop hasn't encountered any <code class="literal">break</code> statements. See how the code looks cleaner and reads better?</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch03lvl2sec48"></a>Applying discounts</h3></div></div></div><p>In this example, I want to show you a technique I like a lot. In many <span>programming</span><a class="indexterm" id="id325998776"></a> languages, other than the <code class="literal">if</code>/<code class="literal">elif</code>/<code class="literal">else</code> constructs, in whatever form or syntax they may come, you can find another statement, usually called <code class="literal">switch</code>/<code class="literal">case</code>, that in Python is missing. It is the equivalent of a cascade of <code class="literal">if</code>/<code class="literal">elif</code>/.../<code class="literal">elif</code>/<code class="literal">else</code> clauses, with a syntax similar to this (warning! JavaScript code!):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4">/* switch.js */
switch (day_number) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        day = "Weekday";
        break;
    case 6:
        day = "Saturday";
        break;
    case 0:
        day = "Sunday";
        break;
    default:
        day = "";</code></pre></div><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5">        alert(day_number + ' is not a valid day number.')
}</code></pre></div><p>In the preceding code, we <code class="literal">switch</code> on a variable called <code class="literal">day_number</code>. This means we get its value and then we decide what case it fits in (if any). From <code class="literal">1</code> to <code class="literal">5</code> there is a cascade, which means no matter the number, [<code class="literal">1</code>, <code class="literal">5</code>] all go down to the bit of logic that sets <code class="literal">day</code> as <code class="literal">"Weekday"</code>. Then we have single cases for <code class="literal">0</code> and <code class="literal">6</code>, and a <code class="literal">default</code> case to prevent errors, which alerts the system that <code class="literal">day_number</code> is not a valid day number, that is, not in [<code class="literal">0</code>, <code class="literal">6</code>]. Python is perfectly capable of realizing such logic using <code class="literal">if</code>/<code class="literal">elif</code>/<code class="literal">else</code> statements:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># switch.py
if 1 &lt;= day_number &lt;= 5:
    day = 'Weekday'
elif day_number == 6:
    day = 'Saturday'
elif day_number == 0:
    day = 'Sunday'
else:
    day = ''
    raise ValueError(
        str(day_number) + ' is not a valid day number.')</code></pre></div><p>In the preceding code, we reproduce the same logic of the <span>JavaScript</span><a class="indexterm" id="id326044475"></a> snippet in Python, using <code class="literal">if</code>/<code class="literal">elif</code>/<code class="literal">else</code> statements. I raised the <code class="literal">ValueError</code> exception just as an example at the end, if <code class="literal">day_number</code> is not in [<code class="literal">0</code>, <code class="literal">6</code>]. This is one possible way of translating the <code class="literal">switch</code>/<code class="literal">case</code> logic, but there is also another one, sometimes called dispatching, which I will show you in the last version of the next example.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip33"></a>Note</h3><p>By the way, did you notice the first line of the previous snippet? Have you noticed that Python can make double (actually, even multiple) comparisons? It's just wonderful!</p></div><p>Let's start the new example by simply writing some code that assigns a discount to customers based on their coupon value. I'll keep the logic down to a minimum here, remember that all we really care about is understanding conditionals and loops:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"># coupons.py
customers = [
    dict(id=1, total=200, coupon_code='F20'),  # F20: fixed, £20
    dict(id=2, total=150, coupon_code='P30'),  # P30: percent, 30%
    dict(id=3, total=100, coupon_code='P50'),  # P50: percent, 50%
    dict(id=4, total=110, coupon_code='F15'),  # F15: fixed, £15
]
for customer in customers:
    code = customer['coupon_code']
    if code == 'F20':
        customer['discount'] = 20.0
    elif code == 'F15':
        customer['discount'] = 15.0
    elif code == 'P30':
        customer['discount'] = customer['total'] * 0.3
    elif code == 'P50':
        customer['discount'] = customer['total'] * 0.5
    else:
        customer['discount'] = 0.0

for customer in customers:
    print(customer['id'], customer['total'], customer['discount'])</code></pre></div><p>We start by setting up some customers. They have an order total, a coupon code, and an ID. I made up four different types of coupons, two are fixed and two are percentage-based. You can see that in the <code class="literal">if</code>/<code class="literal">elif</code>/<code class="literal">else</code> cascade I apply the discount accordingly, and I set it as a <code class="literal">'discount'</code> key in the <code class="literal">customer</code> dictionary.</p><p>At the end, I just print out part of the data to see whether my code is working properly:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"><span class="strong"><strong>$ python coupons.py</strong></span>
<span class="strong"><strong>1 200 20.0</strong></span>
<span class="strong"><strong>2 150 45.0</strong></span>
<span class="strong"><strong>3 100 50.0</strong></span>
<span class="strong"><strong>4 110 15.0</strong></span></code></pre></div><p>This code is simple to understand, but all those clauses are kind of cluttering the logic. It's not easy to see what's going on at a first glance, and I don't like it. In cases like this, you can exploit a dictionary to your advantage, like this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="9"># coupons.dict.py
customers = [
    dict(id=1, total=200, coupon_code='F20'),  # F20: fixed, £20
    dict(id=2, total=150, coupon_code='P30'),  # P30: percent, 30%
    dict(id=3, total=100, coupon_code='P50'),  # P50: percent, 50%
    dict(id=4, total=110, coupon_code='F15'),  # F15: fixed, £15
]
discounts = {
    'F20': (0.0, 20.0),  # each value is (percent, fixed)
    'P30': (0.3, 0.0),
    'P50': (0.5, 0.0),
    'F15': (0.0, 15.0),
}
for customer in customers:
    code = customer['coupon_code']
    percent, fixed = discounts.get(code, (0.0, 0.0))
    customer['discount'] = percent * customer['total'] + fixed

for customer in customers:
    print(customer['id'], customer['total'], customer['discount'])</code></pre></div><p>Running the preceding code yields exactly the same result we had from the snippet before it. We spared two lines, but more importantly, we gained a lot in readability, as the body of the <code class="literal">for</code> loop now is just three lines long, and very easy to understand. The concept here is to use a <span>dictionary</span><a class="indexterm" id="id326046567"></a> as a <span class="strong"><strong>dispatcher</strong></span>. In other words, we try to fetch something from the dictionary based on a code (our <code class="literal">coupon_code</code>), and by using <code class="literal">dict.get(key, default)</code>, we make sure we also cater for when the <code class="literal">code</code> is not in the dictionary and we need a default value.</p><p>Notice that I had to apply some very simple linear algebra in order to calculate the discount properly. Each discount has a percentage and fixed part in the dictionary, represented by a two-tuple. By applying <code class="literal">percent * total + fixed</code>, we get the correct discount. When <code class="literal">percent</code> is <code class="literal">0</code>, the formula just gives the fixed amount, and it gives <code class="literal">percent * total</code> when fixed is <code class="literal">0</code>. </p><p>This technique is important because it is also used in other contexts, with functions, where it actually becomes much more powerful than what we've seen in the preceding snippet. Another advantage of using it is that you can code it in such a way that the keys and values of the <code class="literal">discounts</code> dictionary are fetched dynamically (for example, from a database). This will allow the code to adapt to whatever discounts and conditions you have, without having to modify anything.</p><p>If it's not completely clear to you how it works, I suggest you take your time and experiment with it. Change values and add print statements to see what's going on while the program is running.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(5)]);</script><iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_3_ch03lvl1sec37_putting-all-this-together_files/adsct" type="text/javascript"></script></body></html>