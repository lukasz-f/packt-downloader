<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Mutable sequences - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec28/mutable-sequences" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec28/mutable-sequences" rel="canonical"/>
<meta content="Mutable sequences differ from their immutable sisters in that they can be changed after creation." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Mutable sequences - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="Mutable sequences differ from their immutable sisters in that they can be changed after creation." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/2/ch02lvl1sec28/mutable-sequences" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Mutable sequences - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="Mutable sequences differ from their immutable sisters in that they can be changed after creation." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/script.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/profitwell.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/inferredEvents.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/445429252334850"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/fbevents.js"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/gtm.js"></script><script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/f(1).txt"></script><script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Mutable sequences - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "Mutable sequences differ from their immutable sisters in that they can be changed after creation.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch02lvl1sec28"></a>Mutable sequences</h2></div></div><hr/></div><p>Mutable sequences differ from their <span>immutable</span><a class="indexterm" id="id326292966"></a> sisters in that they can be changed after creation. There are two mutable sequence types in Python: lists and byte arrays. I said before that the <span>dictionary</span><a class="indexterm" id="id326292888"></a> is the king of data structures in Python. I guess this makes the list its rightful queen.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec30"></a>Lists</h3></div></div></div><p>Python <span>lists</span><a class="indexterm" id="id326292872"></a> are mutable sequences. They are very similar to tuples, but they don't have the <span>restrictions</span><a class="indexterm" id="id326292869"></a> of immutability. Lists are commonly used to storing collections of homogeneous objects, but there is nothing preventing you from store heterogeneous collections as well. Lists can be created in many different ways. Let's see an example:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>&gt;&gt;&gt; []  # empty list</strong></span>
<span class="strong"><strong>[]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; list()  # same as []</strong></span>
<span class="strong"><strong>[]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; [1, 2, 3]  # as with tuples, items are comma separated</strong></span>
<span class="strong"><strong>[1, 2, 3]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; [x + 5 for x in [2, 3, 4]]  # Python is magic</strong></span>
<span class="strong"><strong>[7, 8, 9]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; list((1, 3, 5, 7, 9))  # list from a tuple</strong></span>
<span class="strong"><strong>[1, 3, 5, 7, 9]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; list('hello')  # list from a string</strong></span>
<span class="strong"><strong>['h', 'e', 'l', 'l', 'o']</strong></span></code></pre></div><p>In the previous example, I showed you how to create a list using different techniques. I would like you to take a good look at the line that says <code class="literal">Python is magic</code>, which I am not expecting you to fully understand at this point (unless you cheated and you're not a novice!). That is called a <span class="strong"><strong>list </strong></span><span class="strong"><strong>comprehension</strong></span>, a very <span>powerful</span><a class="indexterm" id="id325699130"></a> functional feature of Python, which we'll see in detail in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/5" linkend="ch05"><span>Chapter 5</span></a>, <span class="emphasis"><em>Saving Time and Memory</em></span>. I just wanted to make your mouth water at this point.</p><p>Creating lists is good, but the real fun comes when we use them, so let's see the main methods they gift us with:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1"><span class="strong"><strong>&gt;&gt;&gt; a = [1, 2, 1, 3]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.append(13)  # we can append anything at the end</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[1, 2, 1, 3, 13]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.count(1)  # how many `1` are there in the list?</strong></span>
<span class="strong"><strong>2</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.extend([5, 7])  # extend the list by another (or sequence)</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[1, 2, 1, 3, 13, 5, 7]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.index(13)  # position of `13` in the list (0-based indexing)</strong></span>
<span class="strong"><strong>4</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.insert(0, 17)  # insert `17` at position 0</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[17, 1, 2, 1, 3, 13, 5, 7]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.pop()  # pop (remove and return) last element</strong></span>
<span class="strong"><strong>7</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.pop(3)  # pop element at position 3</strong></span>
<span class="strong"><strong>1</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[17, 1, 2, 3, 13, 5]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.remove(17)  # remove `17` from the list</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[1, 2, 3, 13, 5]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.reverse()  # reverse the order of the elements in the list</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[5, 13, 3, 2, 1]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.sort()  # sort the list</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[1, 2, 3, 5, 13]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.clear()  # remove all elements from the list</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>[]</strong></span></code></pre></div><p>The preceding code gives you a roundup of a list's main methods. I want to show you how powerful they are, using <code class="literal">extend</code> as an example. You can extend lists using any sequence type:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"><span class="strong"><strong>&gt;&gt;&gt; a = list('hello')  # makes a list from a string</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>['h', 'e', 'l', 'l', 'o']</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.append(100)  # append 100, heterogeneous type</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>['h', 'e', 'l', 'l', 'o', 100]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.extend((1, 2, 3))  # extend using tuple</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>['h', 'e', 'l', 'l', 'o', 100, 1, 2, 3]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a.extend('...')  # extend using string</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a</strong></span>
<span class="strong"><strong>['h', 'e', 'l', 'l', 'o', 100, 1, 2, 3, '.', '.', '.']</strong></span></code></pre></div><p>Now, let's see what are the most common operations you can do with lists:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>&gt;&gt;&gt; a = [1, 3, 5, 7]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; min(a)  # minimum value in the list</strong></span>
<span class="strong"><strong>1</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; max(a)  # maximum value in the list</strong></span>
<span class="strong"><strong>7</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sum(a)  # sum of all values in the list</strong></span>
<span class="strong"><strong>16</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; len(a)  # number of elements in the list</strong></span>
<span class="strong"><strong>4</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; b = [6, 7, 8]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a + b  # `+` with list means concatenation</strong></span>
<span class="strong"><strong>[1, 3, 5, 7, 6, 7, 8]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a * 2  # `*` has also a special meaning</strong></span>
<span class="strong"><strong>[1, 3, 5, 7, 1, 3, 5, 7]</strong></span></code></pre></div><p>The last two lines in the preceding code are quite interesting because they introduce us to a <span>concept</span><a class="indexterm" id="id326287991"></a> called <span class="strong"><strong>operator </strong></span><span class="strong"><strong>overloading</strong></span>. In short, it means that operators such as <code class="literal">+</code>, <code class="literal">-</code>. <code class="literal">*</code>, <code class="literal">%</code>, and so on, may represent different operations according to the context they are used in. It doesn't make any sense to sum two lists, right? Therefore, the <code class="literal">+</code> sign is used to concatenate them. Hence, the <code class="literal">*</code> sign is used to concatenate the list to itself according to the right operand.</p><p>Now, let's take a step further and see something a little more interesting. I want to show you how powerful the <code class="literal">sorted</code> method can be and how easy it is in Python to achieve results that require a great deal of effort in other languages:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"><span class="strong"><strong>&gt;&gt;&gt; from operator import itemgetter</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; a = [(5, 3), (1, 3), (1, 2), (2, -1), (4, 9)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sorted(a)</strong></span>
<span class="strong"><strong>[(1, 2), (1, 3), (2, -1), (4, 9), (5, 3)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sorted(a, key=itemgetter(0))</strong></span>
<span class="strong"><strong>[(1, 3), (1, 2), (2, -1), (4, 9), (5, 3)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sorted(a, key=itemgetter(0, 1))</strong></span>
<span class="strong"><strong>[(1, 2), (1, 3), (2, -1), (4, 9), (5, 3)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sorted(a, key=itemgetter(1))</strong></span>
<span class="strong"><strong>[(2, -1), (1, 2), (5, 3), (1, 3), (4, 9)]</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; sorted(a, key=itemgetter(1), reverse=True)</strong></span>
<span class="strong"><strong>[(4, 9), (5, 3), (1, 3), (1, 2), (2, -1)]</strong></span></code></pre></div><p>The preceding code deserves a little explanation. First of all, <code class="literal">a</code> is a list of tuples. This means each element in <code class="literal">a</code> is a tuple (a 2-tuple, to be precise). When we call <code class="literal">sorted(some_list)</code>, we get a sorted version of <code class="literal">some_list</code>. In this case, the sorting on a 2-tuple works by sorting them on the first item in the tuple, and on the second when the first one is the same. You can see this behavior in the result of <code class="literal">sorted(a)</code>, which yields <code class="literal">[(1, 2), (1, 3), ...]</code>. Python also gives us the ability to control which element(s) of the tuple the sorting must be run against. Notice that when we instruct the <code class="literal">sorted</code> function to work on the first element of each tuple (by <code class="literal">key=itemgetter(0)</code>), the result is different: <code class="literal">[(1, 3), (1, 2), ...]</code>. The sorting is done only on the first element of each tuple (which is the one at position 0). If we want to replicate the default behavior of a simple <code class="literal">sorted(a)</code> call, we need to use <code class="literal">key=itemgetter(0, 1)</code>, which tells Python to sort first on the elements at position 0 within the tuples, and then on those at position 1. Compare the results and you'll see they match.</p><p>For completeness, I included an example of sorting only on the elements at position 1, and the same but in reverse order. If you have ever seen sorting in Java, I expect you to be quite impressed at this moment.</p><p>The Python sorting algorithm is very powerful, and it was <span>written</span><a class="indexterm" id="id326292483"></a> by Tim Peters (we've already seen this name, can you recall when?). It is aptly named <span class="strong"><strong>Timsort</strong></span>, and it is a blend between <span class="strong"><strong>merge</strong></span> and <span class="strong"><strong>insertion </strong></span><span class="strong"><strong>sort</strong></span> and has better time performances than most other algorithms used for mainstream programming languages. Timsort is a stable sorting algorithm, which means that when multiple records have the same key, their original order is preserved. We've seen this in the result of <code class="literal">sorted(a, key=itemgetter(0))</code>, which has yielded <code class="literal">[(1, 3), (1, 2), ...]</code>, in which the order of those two tuples has been preserved because they have the same value at position 0.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch02lvl2sec31"></a>Byte arrays</h3></div></div></div><p>To conclude our overview of mutable <span>sequence</span><a class="indexterm" id="id326292758"></a> types, let's spend a couple of <span>minutes</span><a class="indexterm" id="id326292764"></a> on the <code class="literal">bytearray</code> type. Basically, they represent the mutable version of <code class="literal">bytes</code> objects. They expose most of the usual methods of mutable sequences as well as most of the methods of the <code class="literal">bytes</code> type. Items are integers in the range [0, 256).</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note23"></a>Note</h3><p>When it comes to intervals, I'm going to use the standard notation for open/closed ranges. A square bracket on one end means that the value is included, while a round brace means it's excluded. The granularity is usually inferred by the type of the edge elements so, for example, the interval [3, 7] means all integers between 3 and 7, inclusive. On the other hand, (3, 7) means all integers between 3 and 7 exclusive (hence 4, 5, and 6). Items in a <code class="literal">bytearray</code> type are integers between 0 and 256; 0 is included, 256 is not. One reason intervals are often expressed like this is to ease coding. If we break a range <span class="emphasis"><em>[a, b)</em></span> into <span class="emphasis"><em>N</em></span> consecutive ranges, we can easily represent the original one as a concatenation like this:<span class="emphasis"><em>[a,k<sub>1</sub>)+[k<sub>1</sub>,k<sub>2</sub>)+[k<sub>2</sub>,k<sub>3</sub>)+...+[k<sub>N-1</sub>,b)</em></span>
The middle points (<span class="emphasis"><em>k<sub>i</sub></em></span>) being excluded on one end, and included on the other end, allow for easy concatenation and splitting when intervals are handled in the code.</p></div><p>Let's see a quick <span>example</span><a class="indexterm" id="id326292990"></a> with the <code class="literal">bytearray </code>type:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>&gt;&gt;&gt; bytearray()  # empty bytearray object</strong></span>
<span class="strong"><strong>bytearray(b'')</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; bytearray(10)  # zero-filled instance with given length</strong></span>
<span class="strong"><strong>bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; bytearray(range(5)) # bytearray from iterable of integers</strong></span>
<span class="strong"><strong>bytearray(b'\x00\x01\x02\x03\x04')</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; name = bytearray(b'Lina')  #A - bytearray from bytes</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; name.replace(b'L', b'l')</strong></span>
<span class="strong"><strong>bytearray(b'lina')</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; name.endswith(b'na')</strong></span>
<span class="strong"><strong>True</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; name.upper()</strong></span>
<span class="strong"><strong>bytearray(b'LINA')</strong></span>
<span class="strong"><strong>&gt;&gt;&gt; name.count(b'L')</strong></span>
<span class="strong"><strong>1</strong></span></code></pre></div><p>As you can see in the preceding code, there are a <span>few</span><a class="indexterm" id="id326402609"></a> ways to create a <code class="literal">bytearray</code> object. They can be useful in many situations; for example, when receiving data through a socket, they eliminate the need to concatenate data while polling, hence they can prove to be very handy. On the line <code class="literal">#A</code>, <span>I created</span> a <code class="literal">bytearray</code> named as <code class="literal">name</code> from the bytes literal <code class="literal">b'Lina'</code> to show you how the <code class="literal">bytearray</code> object exposes methods from both sequences and strings, which is extremely handy. If you think about it, they can be considered as mutable strings.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><div></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_2_ch02lvl1sec28_mutable-sequences_files/adsct" type="text/javascript"></script></body></html>