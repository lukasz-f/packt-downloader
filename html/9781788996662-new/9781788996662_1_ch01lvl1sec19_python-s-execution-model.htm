<!DOCTYPE html>
<html class="ng-scope" lang="en" ng-app="PacktUnlimited" ng-strict-di=""><head class="ng-scope" ng-controller="metadataController as metadataController"><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style class="vjs-styles-defaults">
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid {
        padding-top: 56.25%
      }
    </style><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>
<title class="ng-binding" ng-bind-html="metadataController.pageTitle">Python's execution model - Learn Python Programming - Second Edition</title>
<link href="https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
<meta content="CGEyu7dKgqkqBrxdainq9bY0WowOCMOdZ1nKVzzvYJg" name="google-site-verification"/>
<meta content="index,follow" name="robots"/>
<link href="https://fonts.googleapis.com/" rel="dns-prefetch"/>
<link href="https://maxcdn.bootstrapcdn.com/" rel="dns-prefetch"/>
<link href="https://cdn.polyfill.io/" rel="dns-prefetch"/>
<meta content="!" name="fragment"/>
<link href="https://subscription.packtpub.com/book/application_development/9781788996662/1/ch01lvl1sec19/python-s-execution-model" ng-href="https://subscription.packtpub.com/book/application_development/9781788996662/1/ch01lvl1sec19/python-s-execution-model" rel="canonical"/>
<meta content="In this section, I would like to introduce you to a few very important concepts, such as scope, names, and namespaces." name="description"/>
<meta content="#212121" name="theme-color"/>
<meta class="ng-scope" content="book" ng-if="metadataController.productType" property="og:type"/>
<meta content="Python's execution model - Learn Python Programming - Second Edition" property="og:title"/>
<meta content="In this section, I would like to introduce you to a few very important concepts, such as scope, names, and namespaces." property="og:description"/>
<meta content="https://subscription.packtpub.com/book/application_development/9781788996662/1/ch01lvl1sec19/python-s-execution-model" property="og:url"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" property="og:image:secure_url"/>
<link href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" ng-href="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" rel="image_src"/>
<meta class="ng-scope" content="Fabrizio Romano" name="book:author" ng-if="metadataController.productType &amp;&amp; metadataController.authorListString"/>
<meta class="ng-scope" content="9781788996662" name="book:isbn" ng-if="metadataController.productType &amp;&amp; metadataController.isbn"/>
<meta class="ng-scope" content="2018-06-29T06:10:00.000Z" name="book:release_date" ng-if="metadataController.productType &amp;&amp; metadataController.releaseDate"/>
<meta class="ng-scope" content="https://packtpub.com/" name="book:publisher" ng-if="metadataController.productType"/>
<meta content="Python's execution model - Learn Python Programming - Second Edition" name="twitter:title"/>
<meta content="In this section, I would like to introduce you to a few very important concepts, such as scope, names, and namespaces." name="twitter:description"/>
<meta content="https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png" name="twitter:image"/>
<meta content="summary" name="twitter:card"/>
<meta content="@packtpub" name="twitter:site"/>
<meta content="@packtpub" name="twitter:creator"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<base href="."/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-57x57.png" rel="apple-touch-icon" sizes="57x57"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-72x72.png" rel="apple-touch-icon" sizes="72x72"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-114x114.png" rel="apple-touch-icon" sizes="114x114"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-144x144.png" rel="apple-touch-icon" sizes="144x144"/>
<link href="https://subscription.packtpub.com/images/apple-icons/apple-icon-180x180.png" rel="apple-touch-icon" sizes="180x180"/>
<link crossorigin="anonymous" href="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" rel="stylesheet"/>
<link href="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/css" rel="stylesheet" type="text/css"/>
<script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/script.js"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/profitwell.js"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/inferredEvents.js"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/445429252334850"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/fbevents.js"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/f.txt" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/uwt.js" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/analytics.js" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/e8mdsr07" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/heap-34805961.js" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/hotjar-982604.js" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/recaptcha__pl.js" type="text/javascript"></script><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/gtm.js"></script><script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/polyfill.min.js"></script>
<script async="" defer="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/api.js"></script>
<script async="" defer="" ng-src="https://static.zuora.com/Resources/libs/hosted/1.3.0/zuora-min.js" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/zuora-min.js"></script>
<script>
            //Set your APP_ID
            var APP_ID = 'e8mdsr07'; // to come from wpConfig

            (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        </script>
<script async="" charset="utf-8" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/modules.bb88fc9b50ded24ae044.js"></script><style id="mm_style_mm_cdApiStyleId_1" media="screen" type="text/css"></style><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script async="" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/hotjar-982604(1).js"></script><style></style><script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/f(1).txt"></script><script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/f(2).txt"></script><script id="schema" type="application/ld+json">{
	"@context": "https://schema.org",
	"@type": "book",
	"author": [
		"Fabrizio Romano"
	],
	"datePublished": "2018-06-29T06:10:00.000Z",
	"image": "https://d255esdrn735hr.cloudfront.net/sites/default/files/B10074_Ned_coccover.png",
	"name": "Python's execution model - Learn Python Programming - Second Edition",
	"publisher": {
		"@type": "Organization",
		"name": "Packt",
		"logo": {
			"@type": "ImageObject",
			"url": "https://d3ginfw2u4xn7p.cloudfront.net/c825bf9a03a944639d91ecb1f0010fc4/images/white-packt.png"
		}
	},
	"isPartOf": "/book/application_development/9781788996662",
	"description": "In this section, I would like to introduce you to a few very important concepts, such as scope, names, and namespaces.",
	"isbn": "9781788996662",
	"bookFormat": "https://schema.org/EBook"
}</script></head><body class="prototype-nav home-body" ng-class="{
    'cover-background': currentPage === 'login' ||
        currentPage === 'create-account' ||
        currentPage === 'password-reset',
    'checkout': currentPage === 'checkout',
    'has-footer': currentPage !== 'login' &amp;&amp;
        currentPage !== 'create-account' &amp;&amp;
        currentPage !== 'password-reset' &amp;&amp;
        currentPage !== 'product',
    'has-bottom-pagination': currentPage === 'saved' ||
        currentPage === 'bookmarks' ||
        currentPage === 'purchases' ||
        currentPage === 'history',
    
    'sidebar-open': showSideBarOverlay,
    'home-body': currentPage != 'create-account' || !freeWeekend,
    'free-weekend': currentPage === 'create-account' &amp;&amp; freeWeekend,
     }"><prerender-ready class="ng-isolate-scope">
<script>
    window.prerenderReady = false;
</script>
</prerender-ready>
<script>
                window.dataLayer = window.dataLayer || [];
                (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-WJMM825');
            </script>
<script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/mmapi.js" type="text/javascript"></script><script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({originalLocation:document.location.protocol+"//"+document.location.hostname+document.location.pathname+document.location.search});</script><script id="" type="text/javascript">Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(a){a=(this.document||this.ownerDocument).querySelectorAll(a);for(var b=a.length;0<=--b&&a.item(b)!==this;);return-1<b});</script>
<script id="" type="text/javascript">hj("tagRecording",[google_tag_manager["GTM-WJMM825"].macro(4)]);</script><script id="mmpack.0" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/mmpackage-1.12.js" type="text/javascript"></script>

<script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/cookieconsent.min.js" type="text/javascript"></script>

<link href="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/app.104d50d2c3a3114104d18ba8a565ba3d.bundle.css" rel="stylesheet"/>


<sidebar-overlay class="ng-isolate-scope" show="showSideBarOverlay"></sidebar-overlay>
<div class="page">
<div class="alertbox" id="alertbox"></div>
<div autoscroll="true" class="ng-scope" ng-view="" style="height:100%;">




<div class="book-page-wrapper ng-scope">
<div class="container book-page">

<div class="clearfix"></div>



<div class="container-fluid" id="book-wrapper">
<div class="ng-scope" ng-include="productController.contentView" onload="productController.onFinishLoadContent()"><div class="col-sm-12 ng-scope reader-container" id="reader-content" ng-class="{'reader-container': productController.productType === 'book'}" ng-show="productController.isContentAvailable" on-finish-page-render="productController.applyFontSize()">
<div class="row">
<div class="book-content" style="position:relative;">
<div class="ng-binding" ng-bind-html="productController.content"><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch01lvl1sec19"></a>Python's execution model</h2></div></div><hr/></div><p>In this section, I would like to introduce you to a few very important concepts, such as scope, names, and namespaces. You can read all about Python's execution model in the <span>official</span><a class="indexterm" id="id325916621"></a> language reference, of course, but I would argue that it is quite technical and abstract, so let me give you a less formal explanation first.</p><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch01lvl2sec20"></a>Names and namespaces</h3></div></div></div><p>Say you are looking for a book, so you go to the library and ask <span>someone</span><a class="indexterm" id="id325916606"></a> for the book you want to fetch. They tell you something like <span class="emphasis"><em>Second Floor, Section X, Row Three</em></span>. So you go up the stairs, look for Section X, and so on.</p><p>It would be very different to enter a library where all the books are piled together in random order in one big room. No floors, no sections, no rows, no order. Fetching a book would be extremely hard.</p><p>When we write code, we have the same issue: we have to try and organize it so that it will be easy for someone who has no prior knowledge about it to find what they're looking for. When software is structured correctly, it also promotes code reuse. On the other hand, disorganized software is more likely to expose scattered pieces of duplicated logic.</p><p>First of all, let's start with the book. We refer to a book by its title and in Python lingo, that would be a name. Python names are the closest abstraction to what other languages call variables. Names basically refer to objects and are introduced by name-binding operations. Let's make a quick example (notice that anything that follows a <code class="literal">#</code> is a comment):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="0"><span class="strong"><strong>&gt;&gt;&gt; n = 3  # integer number
&gt;&gt;&gt; address = "221b Baker Street, NW1 6XE, London"  # Sherlock Holmes' address
&gt;&gt;&gt; employee = {
...     'age': 45,
...     'role': 'CTO',
...     'SSN': 'AB1234567',
... }
&gt;&gt;&gt; # let's print them
&gt;&gt;&gt; n
3
&gt;&gt;&gt; address
'221b Baker Street, NW1 6XE, London'
&gt;&gt;&gt; employee
{'age': 45, 'role': 'CTO', 'SSN': 'AB1234567'}
&gt;&gt;&gt; other_name
Traceback (most recent call last):
  File "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stdin</span><span class="token punctuation">&gt;</span></span>", line 1, in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>
NameError: name 'other_name' is not defined
</strong></span></code></pre></div><p>We defined three objects in the preceding code (do you remember what are the three features every Python object has?):</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">An integer number <code class="literal">n</code> (type: <code class="literal">int</code>, value: <code class="literal">3</code>)</li><li style="list-style-type: disc">A string <code class="literal">address</code> (type: <code class="literal">str</code>, value: Sherlock Holmes' address)</li><li style="list-style-type: disc">A dictionary <code class="literal">employee</code> (type: <code class="literal">dict</code>, value: a dictionary that holds three key/value pairs)</li></ul></div><p>Don't worry, I know you're not supposed to know what a dictionary is. We'll see in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/2" linkend="ch02">Chapter 2</a>, <span class="emphasis"><em>Built-in Data Types</em></span>, that it's the king of Python data structures.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip13"></a>Note</h3><p>Have you noticed that the prompt changed from <code class="literal">&gt;&gt;&gt;</code> to <code class="literal">...</code> when I typed in the definition of employee? That's because the definition spans over multiple lines.</p></div><p>So, what are <code class="literal">n</code>, <code class="literal">address</code>, and <code class="literal">employee</code>? They are <span class="strong"><strong>names</strong></span>. Names that we <span>can</span><a class="indexterm" id="id325915736"></a> use to retrieve data within our code. They need to be kept somewhere so that whenever we need to retrieve those objects, we can use their names to fetch them. We need some space to hold them, hence: namespaces!</p><p>A <span class="strong"><strong>namespace</strong></span> is therefore a mapping from <span>names</span><a class="indexterm" id="id325699123"></a> to objects. Examples are the set of built-in names (containing functions that are always accessible in any Python program), the global names in a module, and the local names in a function. Even the set of attributes of an object can be considered a namespace.</p><p>The beauty of namespaces is that they allow you to define and organize your names with clarity, without overlapping or interference. For example, the namespace associated with that book we were looking for in the library can be used to import the book itself, like this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="1">from library.second_floor.section_x.row_three import book </code></pre></div><p>We start from the <code class="literal">library</code> namespace, and by means of the dot (<code class="literal">.</code>) operator, we walk into that namespace. Within this namespace, we look for <code class="literal">second_floor</code>, and again we walk into it with the <code class="literal">.</code> operator. We then walk into <code class="literal">section_x</code>, and finally within the last namespace, <code class="literal">row_three</code>, we find the name we were looking for: <code class="literal">book</code>.</p><p>Walking through a namespace will be clearer when we'll be dealing with real code examples. For now, just keep in mind that namespaces are places where names are associated with objects.</p><p>There is another concept, which is closely related to that of a namespace, which I'd like to briefly talk about: the <span class="strong"><strong>scope</strong></span>.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch01lvl2sec21"></a>Scopes</h3></div></div></div><p>According to Python's documentation:</p><div class="blockquote"><blockquote class="blockquote"><p><span class="emphasis"><em>" <span class="emphasis"><em>A scope is a textual region of a Python program, where a namespace is directly accessible</em></span>."</em></span></p></blockquote></div><p>Directly accessible means that when you're <span>looking</span><a class="indexterm" id="id325891797"></a> for an unqualified reference to a name, Python tries to find it in the namespace.</p><p>Scopes are determined statically, but actually, during runtime, they are used dynamically. This means that by inspecting the source code, you can tell what the scope of an object is, but this doesn't prevent the software from altering that during runtime. There are four different scopes that Python makes accessible (not necessarily all of them are present at the same time, of course):</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc">The <span class="strong"><strong>local</strong></span> scope, which is the <span>innermost</span><a class="indexterm" id="id325891819"></a> one and contains the local names.</li><li style="list-style-type: disc">The <span class="strong"><strong>enclosing</strong></span> scope, that is, the <span>scope</span><a class="indexterm" id="id325891874"></a> of any enclosing function. It contains non-local names and also non-global names.</li><li style="list-style-type: disc">The <span class="strong"><strong>global</strong></span> scope contains the <span>global</span><a class="indexterm" id="id325891889"></a> names.</li><li style="list-style-type: disc">The <span class="strong"><strong>built-in</strong></span> scope <span>contains</span><a class="indexterm" id="id325891904"></a> the built-in names. Python comes with a set of functions that you can use in an off-the-shelf fashion, such as <code class="literal">print</code>, <code class="literal">all</code>, <code class="literal">abs</code>, and so on. They live in the built-in scope.</li></ul></div><p>The rule is the following: when we refer to a name, Python starts looking for it in the current namespace. If the name is not found, Python continues the search to the enclosing scope and this continues until the built-in scope is searched. If a name hasn't been found after <span>searching</span><a class="indexterm" id="id325915717"></a> the built-in scope, then Python raises a <code class="literal">NameError</code><span class="strong"><strong> exception</strong></span>, which basically means that the name hasn't been defined (you saw this in the preceding example).</p><p>The order in which the namespaces are scanned when <span>looking</span><a class="indexterm" id="id326648106"></a> for a name is therefore: <span class="strong"><strong>local</strong></span>, <span class="strong"><strong>enclosing</strong></span>, <span class="strong"><strong>global</strong></span>, <span class="strong"><strong>built-in</strong></span> (<span class="strong"><strong>LEGB</strong></span>).</p><p>This is all very theoretical, so let's see an example. In order to show you local and enclosing namespaces, I will have to define a few functions. Don't worry if you are not familiar with their syntax for the moment. We'll study functions in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/4" linkend="ch04"><span>Chapter 4</span></a>, <span class="emphasis"><em>Functions, the Building Blocks of Code</em></span>. Just <span>remember</span><a class="indexterm" id="id326649739"></a> that in the following code, when you see <code class="literal">def</code>, it means I'm defining a function:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="2"># scopes1.py
# Local versus Global

# we define a function, called local
def local():
    m = 7
    print(m)

m = 5
print(m)

# we call, or `execute` the function local
local()</code></pre></div><p>In the preceding example, we define the same name <code class="literal">m</code>, both in the global scope and in the local one (the one defined by the <code class="literal">local</code> function). When we execute this program with the following command (have you activated your virtualenv?):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="3"><span class="strong"><strong>$ python scopes1.py</strong></span></code></pre></div><p>We see two numbers printed on the console: <code class="literal">5</code> and <code class="literal">7</code>.</p><p>What happens is that the Python <span>interpreter</span><a class="indexterm" id="id326650195"></a> parses the file, top to bottom. First, it finds a couple of comment lines, which are skipped, then it parses the definition of the function <code class="literal">local</code>. When called, this function does two things: it sets up a name to an object representing number <code class="literal">7</code> and prints it. The Python interpreter keeps going and it finds another name binding. This time the binding happens in the global scope and the value is <code class="literal">5</code>. The next line is a call to the <code class="literal">print</code> function, which is executed (and so we get the first value printed on the console: <code class="literal">5</code>).</p><p>After this, there is a call to the function <code class="literal">local</code>. At this point, Python executes the function, so at this time, the binding <code class="literal">m = 7</code> happens and it's printed.</p><p>One very important thing to notice is that the part of the code that belongs to the definition of the <code class="literal">local</code> function is indented by four spaces on the right. Python, in fact, defines scopes by indenting the code. You walk into a scope by indenting, and walk out of it by unindenting. Some coders use two spaces, others three, but the suggested number of spaces to use is four. It's a good measure to maximize readability. We'll talk more about all the conventions you should embrace when writing Python code later.</p><p>What would happen if we removed that <code class="literal">m = 7</code> line? Remember the LEGB rule. Python would start looking for <code class="literal">m</code> in the local scope (function <code class="literal">local</code>), and, not finding it, it would go to the next enclosing scope. The next one, in this case, is the global one because there is no enclosing function wrapped around <code class="literal">local</code>. Therefore, we would see two numbers <code class="literal">5</code> printed on the console. Let's <span>actually</span><a class="indexterm" id="id326677921"></a> see what the code would look like:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="4"># scopes2.py
# Local versus Global

def local():
    # m doesn't belong to the scope defined by the local function
    # so Python will keep looking into the next enclosing scope.
    # m is finally found in the global scope
    print(m, 'printing from the local scope')

m = 5
print(m, 'printing from the global scope')

local()</code></pre></div><p>Running <code class="literal">scopes2.py</code> will print this:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="5"><span class="strong"><strong>$ python scopes2.py
5 printing from the global scope
5 printing from the local scope</strong></span></code></pre></div><p>As expected, Python prints <code class="literal">m</code> the first time, then when the function <code class="literal">local</code> is called, <code class="literal">m</code> isn't found in its scope, so Python looks for it following the LEGB chain until <code class="literal">m</code> is found in the global scope.</p><p>Let's see an example with an extra layer, the enclosing scope:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="6"># scopes3.py
# Local, Enclosing and Global

def enclosing_func():
    m = 13

    def local():
        # m doesn't belong to the scope defined by the local
        # function so Python will keep looking into the next
        # enclosing scope. This time m is found in the enclosing
        # scope
        print(m, 'printing from the local scope')

    # calling the function local
    local()

m = 5
print(m, 'printing from the global scope')

enclosing_func()</code></pre></div><p>Running <code class="literal">scopes3.py</code> will print on <span>the</span><a class="indexterm" id="id326678010"></a> console:</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="7"><span class="strong"><strong>$ python scopes3.py</strong></span><span class="strong"><strong>(5, 'printing from the global scope')</strong></span><span class="strong"><strong>(13, 'printing from the local scope')</strong></span></code></pre></div><p>As you can see, the <code class="literal">print</code> instruction from the function <code class="literal">local</code> is referring to <code class="literal">m</code> as before. <code class="literal">m</code> is still not defined within the function itself, so Python starts walking scopes following the LEGB order. This time <code class="literal">m</code> is found in the enclosing scope.</p><p>Don't worry if this is still not perfectly clear for now. It will come to you as we go through the examples in the book. The <span class="emphasis"><em>Classes</em></span> section of the <span>Python</span><a class="indexterm" id="id326678058"></a> tutorial (<a class="ulink" href="https://docs.python.org/3/tutorial/classes.html" target="_blank">https://docs.python.org/3/tutorial/classes.html</a>) has an interesting paragraph about scopes and namespaces. Make sure you read it at some point if you want a deeper understanding of the subject.</p><p>Before we finish off this chapter, I would like to talk a bit more about objects. After all, basically everything in Python is an object, so I think they deserve a bit more attention.</p></div><div class="section" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ch01lvl2sec22"></a>Objects and classes</h3></div></div></div><p>When I introduced <span>objects</span><a class="indexterm" id="id326678080"></a> previously in the <span class="emphasis"><em>A proper introduction</em></span> section of the chapter, I said that we use them to represent real-life objects. For example, we sell goods of any kind on the web nowadays and we need to be able to handle, store, and represent them properly. But objects are actually so much more than that. Most of what you will ever do, in Python, has to do with manipulating objects.</p><p>So, without going into too much detail (we'll do that in <a class="link" href="https://subscription.packtpub.com/book/application_development/9781788996662/6" linkend="ch06"><span>Chapter 6</span></a>, <span class="emphasis"><em>OOP, Decorators, and Iterators</em></span>), I want to give you the <span class="emphasis"><em>in a nutshell</em></span> kind of explanation about classes and objects.</p><p>We've already seen that objects are Python's abstraction for data. In fact, everything in Python is an object, infact numbers, strings (data structures that hold text), containers, collections, even functions. You can think of them as if they were boxes with at least three features: an ID (unique), a type, and a value.</p><p>But how do they come to life? How do we create them? How do we write our <span>own</span><a class="indexterm" id="id326678110"></a> custom objects? The answer lies in one simple word: <span class="strong"><strong>classes</strong></span>.</p><p>Objects are, in fact, instances of classes. The beauty of Python is that classes are objects themselves, but let's not go down this road. It leads to one of the most advanced <span>concepts</span><a class="indexterm" id="id326678234"></a> of this language: <span class="strong"><strong>metaclasses</strong></span>. For now, the best way for you to get the difference between classes and objects is by means of an example.</p><p>Say a friend tells you, <span class="emphasis"><em>I bought a new bike!</em></span> You immediately understand what she's talking about. Have you seen the bike? No. Do you know what color it is? Nope. The brand? Nope. Do you know anything about it? Nope. But at the same time, you know everything you need in order to understand what your friend meant when she told you she bought a new bike. You know that a bike has two wheels attached to a frame, a saddle, pedals, handlebars, brakes, and so on. In other words, even if you haven't seen the bike itself, you know the concept of <span class="emphasis"><em>bike</em></span>. An abstract set of features and characteristics that together form something called <span class="emphasis"><em>bike</em></span>.</p><p>In computer programming, that is called a <span class="strong"><strong>class</strong></span>. It's that simple. Classes are used to create objects. In fact, <span>objects</span><a class="indexterm" id="id326678263"></a> are said to be <span class="strong"><strong>instances of classes</strong></span>.</p><p>In other words, we all know what a bike is; we know the class. But then I have my own bike, which is an instance of the bike class. And my bike is an object with its own characteristics and methods. You have your own bike. Same class, but different instance. Every bike ever created in the world is an instance of the bike class.</p><p>Let's see an example. We will write a class that defines a bike and then we'll create two bikes, one red and one blue. I'll keep the code very simple, but don't fret if you don't understand everything about it; all you need to care about at this moment is to understand the difference between a class and an object (or instance of a class):</p><div class="informalexample"><pre class="programlisting language-markup"><code class=" language-markup" data-code-index="8"># bike.py
# let's define the class Bike
class Bike:

    def __init__(self, colour, frame_material):
        self.colour = colour
        self.frame_material = frame_material

    def brake(self):
        print("Braking!")

# let's create a couple of instances
red_bike = Bike('Red', 'Carbon fiber')
blue_bike = Bike('Blue', 'Steel')

# let's inspect the objects we have, instances of the Bike class.
print(red_bike.colour)  # prints: Red
print(red_bike.frame_material)  # prints: Carbon fiber
print(blue_bike.colour)  # prints: Blue
print(blue_bike.frame_material)  # prints: Steel

# let's brake!
red_bike.brake()  # prints: Braking!</code></pre></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="tip14"></a>Note</h3><p>I hope by now I don't need to tell you to run the file every time, right? The filename is indicated in the first line of the code block. Just run <code class="literal">$ python filename</code>, and you'll be fine. But remember to have your virtualenv activated!</p></div><p>So many interesting things to notice here. First things first; the definition of a class happens with the <code class="literal">class</code> statement. Whatever code comes after the <code class="literal">class</code> statement, and is indented, is called the body of the class. In our case, the last line that belongs to the class definition is the <code class="literal">print("Braking!")</code> one.</p><p>After having defined the class, we're ready to create instances. You can see that the class body hosts the definition of two methods. A method is basically (and simplistically) a function that belongs to a class.</p><p>The first method, <code class="literal">__init__</code>, is an <span class="strong"><strong>initializer</strong></span>. It uses some <span>Python</span><a class="indexterm" id="id326679355"></a> magic to set up the objects with the <span>values</span><a class="indexterm" id="id326679372"></a> we pass when we create it.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title"><a id="note15"></a>Note</h3><p>Every method that has leading and trailing double underscores, in Python, is called a <span class="strong"><strong>magic method</strong></span>. Magic methods are used by Python for a multitude of different purposes; hence it's never a good idea to name a custom method using two leading and trailing underscores. This naming convention is best left to Python.</p></div><p>The other method we defined, <code class="literal">brake</code>, is just an example of an additional method that we could call if we wanted to brake the bike. It contains just a <code class="literal">print</code> statement, of course; it's an example.</p><p>We created two bikes then. One has red color and a carbon fiber frame, and the other one has blue color and a steel frame. We pass those values upon creation. After creation, we print out the color property and frame type of the red bike, and the frame type of the blue one just as an example. We also call the <code class="literal">brake</code> method of the <code class="literal">red_bike</code>.</p><p>One last thing to notice. You remember I told you that the set of attributes of an object is considered to be a namespace? I hope it's clearer what I meant now. You see that by getting to the <code class="literal">frame_type</code> property through different namespaces (<code class="literal">red_bike</code>, <code class="literal">blue_bike</code>), we obtain different values. No overlapping, no confusion.</p><p>The dot (<code class="literal">.</code>) operator is of course the means we use to walk into a namespace, in the case of objects as well.</p></div></div></div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.isTruncatedContent">
<div class="fade-out" ng-show="productController.productType === 'book'">
</div>
</div>
<div class="ng-hide" ng-show="!productController.entitled &amp;&amp; productController.productType === 'video'">

</div>
</div>
<div class="video-wrapper ng-hide" ng-show="productController.productType === 'video' &amp;&amp; productController.entitled">

<div class="transcript panel panel-default ng-hide" id="transcript" ng-show="productController.hasCaptions"></div>
</div>


</div>






<div class="row ns">
<hr/>
</div>
</div>

</div>
</div>
</div>
</div>
</div>
</div>


<script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/app.dfc913a7d3f9c785692c.bundle.js" type="text/javascript"></script>
<iframe id="_hjRemoteVarsFrame" name="_hjRemoteVarsFrame" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/box-90f3a29ef7448451db5af955688970d7.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;" title="_hjRemoteVarsFrame"></iframe><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="undefined";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">window.dataLayer=window.dataLayer||[];window.dataLayer.push({pageLoaded:"pageLoaded"});</script><script id="" type="text/javascript">(function(a,e,f,g,b,c,d){a.ProfitWellObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","https://dna8twue3dlxq.cloudfront.net/js/profitwell.js","profitwell");profitwell("auth_token","8c79afc46264fdacbbb5c7bfc3b4800f");profitwell("user_email","");</script><div></div><iframe aria-hidden="true" id="intercom-frame" src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/saved_resource.html" style="position: absolute !important; opacity: 0 !important; width: 1px !important; height: 1px !important; top: 0 !important; left: 0 !important; border: none !important; display: block !important; z-index: -1 !important;" tabindex="-1"></iframe><script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/adsct" type="text/javascript"></script><div id="intercom-css-container"><style data-emotion="intercom-global"></style><style data-emotion="intercom"></style></div><script id="" type="text/javascript">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};window.heap.appid||heap.load("34805961");</script><script id="" type="text/javascript">var HeapUserId="72f2212e-37fa-4f9e-80a7-7aeb3cbd99b3";"string"===typeof HeapUserId&&"undefined"!==HeapUserId&&window.heap.identify(HeapUserId);</script>
<script id="" type="text/javascript">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","//connect.facebook.net/en_US/fbevents.js");fbq("init","445429252334850");fbq("track","PageView");</script>

<script id="" type="text/javascript">(function(c,d,e,f,g,a,b){c[e]=c[e]||[];a=d.createElement(f);a.async=1;a.src=g;b=d.getElementsByTagName(f)[0];b.parentNode.insertBefore(a,b)})(window,document,"_gscq","script","//widgets.getsitecontrol.com/95715/script.js");</script><script src="./9781788996662_1_ch01lvl1sec19_python-s-execution-model_files/adsct" type="text/javascript"></script></body></html>